
C:\Users\user\AppData\Local\Temp\VMBuilds\TeensyRS422Class\teensy40\Release/TeensyRS422Class.ino.elf:     file format elf32-littlearm


Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	46 43 46 42 00 00 01 56 00 00 00 00 01 01 02 00     FCFB...V........
	...
60000044:	01 04 03 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
	...
60000080:	eb 04 18 0a 06 32 04 26 00 00 00 00 00 00 00 00     .....2.&........
60000090:	05 04 04 24 00 00 00 00 00 00 00 00 00 00 00 00     ...$............
	...
600000b0:	06 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
600000d0:	20 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00      ...............
	...
60000100:	d8 04 18 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
60000110:	02 04 18 08 04 20 00 00 00 00 00 00 00 00 00 00     ..... ..........
	...
60000130:	60 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00     `...............
	...
600001c0:	00 01 00 00 00 10 00 00 01 00 00 00 00 00 00 00     ................
600001d0:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
60000200:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000210:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000220:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000230:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000240:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000250:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000260:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000270:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000280:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000290:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600002f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000300:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000310:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000320:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000330:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000340:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000350:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000360:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000390:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600003f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000410:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000420:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000450:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000460:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000470:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000480:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000490:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600004f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000500:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000510:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000520:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000530:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000540:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000550:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000560:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000570:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000580:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600005f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000600:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000610:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000620:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000630:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000640:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000650:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000660:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000670:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000680:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000690:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600006f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000700:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000710:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000720:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000730:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000740:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000750:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000760:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000770:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000780:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000790:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600007f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000810:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000820:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000830:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000840:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000850:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000880:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000890:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600008f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000900:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000910:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000940:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000950:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000980:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000990:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009d0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
600009f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000a90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ab0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ac0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ad0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ba0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000c90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ca0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ce0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000cf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000d90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000da0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000db0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000dd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000de0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000df0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000e90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ea0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000eb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ec0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ed0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ee0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ef0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f20:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000f90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000fe0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
60000ff0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

60001000 <ImageVectorTable>:
60001000:	d1 00 20 40 2c 10 00 60 00 00 00 00 00 00 00 00     .. @,..`........
60001010:	20 10 00 60 00 10 00 60 00 00 00 00 00 00 00 00      ..`...`........

60001020 <BootData>:
60001020:	00 00 00 60 40 60 00 00 00 00 00 00                 ...`@`......

6000102c <vector_table>:
6000102c:	00 00 01 20 35 10 00 60                             ... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	4b74      	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	4a74      	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	4874      	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a74      	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a73      	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	4974      	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	428a      	cmp	r2, r1
6000104e:	d00f      	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	4b73      	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	429a      	cmp	r2, r3
60001054:	d20c      	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	43d4      	mvns	r4, r2
60001058:	4608      	mov	r0, r1
6000105a:	4423      	add	r3, r4
6000105c:	f023 0303 	bic.w	r3, r3, #3
60001060:	3304      	adds	r3, #4
60001062:	440b      	add	r3, r1
		*dest++ = *src++;
60001064:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000106a:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	d1f9      	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	4a6c      	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	496d      	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	428a      	cmp	r2, r1
60001076:	d00f      	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	4b6c      	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	429a      	cmp	r2, r3
6000107c:	d20c      	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	43d4      	mvns	r4, r2
60001080:	4608      	mov	r0, r1
60001082:	4423      	add	r3, r4
60001084:	f023 0303 	bic.w	r3, r3, #3
60001088:	3304      	adds	r3, #4
6000108a:	440b      	add	r3, r1
		*dest++ = *src++;
6000108c:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001092:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	d1f9      	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	4a65      	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	4b66      	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	429a      	cmp	r2, r3
6000109e:	d20b      	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	43d0      	mvns	r0, r2
600010a2:	4611      	mov	r1, r2
		*dest++ = 0;
600010a4:	2400      	movs	r4, #0
600010a6:	4403      	add	r3, r0
600010a8:	f023 0303 	bic.w	r3, r3, #3
600010ac:	3304      	adds	r3, #4
600010ae:	4413      	add	r3, r2
600010b0:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	428b      	cmp	r3, r1
600010b6:	d1fb      	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	4a5f      	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010be:	4b5f      	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	6011      	str	r1, [r2, #0]
600010c2:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010c6:	4a5e      	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	f843 2f04 	str.w	r2, [r3, #4]!
600010cc:	4299      	cmp	r1, r3
600010ce:	d1fb      	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	4b5c      	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	2180      	movs	r1, #128	; 0x80
600010d4:	4a5c      	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	f803 1b01 	strb.w	r1, [r3], #1
600010da:	4293      	cmp	r3, r2
600010dc:	d1fb      	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	4c5b      	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	4e5a      	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	2500      	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	4b56      	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	4943      	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	69f3      	ldr	r3, [r6, #28]
60001112:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
6000111a:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	6a73      	ldr	r3, [r6, #36]	; 0x24
6000111e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001126:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	f000 f8e0 	bl	600012f4 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	4a48      	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	4b48      	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	4949      	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	4946      	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	4a46      	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	4847      	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	4a46      	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	4844      	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	4944      	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	f043 0301 	orr.w	r3, r3, #1
6000116c:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	6803      	ldr	r3, [r0, #0]
60001170:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	f000 f90f 	bl	60001394 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	4840      	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	f000 faa6 	bl	600016d8 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	bf00      	nop
6000118e:	bf00      	nop
60001190:	bf00      	nop
60001192:	bf00      	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	4a3a      	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	4b39      	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011b4:	07d2      	lsls	r2, r2, #31
600011b6:	d408      	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	4932      	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011c4:	f042 0201 	orr.w	r2, r2, #1
600011c8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	4a2e      	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	4c2f      	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	6893      	ldr	r3, [r2, #8]
600011d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011d4:	6093      	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	f000 fa7b 	bl	600016d0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	2b13      	cmp	r3, #19
600011de:	d9fc      	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	f000 f986 	bl	600014f0 <usb_init>
	analog_init();
600011e4:	f000 f85a 	bl	6000129c <analog_init>
	pwm_init();
600011e8:	f000 fa6a 	bl	600016c0 <__pwm_init_veneer>
	tempmon_init();
600011ec:	f000 f904 	bl	600013f8 <tempmon_init>

	startup_late_hook();
600011f0:	f000 fa7e 	bl	600016f0 <__startup_late_hook_veneer>
600011f4:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600011fa:	d3fb      	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	f000 fa64 	bl	600016c8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	f000 fa56 	bl	600016b0 <__main_veneer>
60001204:	e7fe      	b.n	60001204 <ResetHandler+0x1d0>
60001206:	bf00      	nop
60001208:	400ac000 	.word	0x400ac000
6000120c:	aaaaaaab 	.word	0xaaaaaaab
60001210:	00200007 	.word	0x00200007
60001214:	20078000 	.word	0x20078000
60001218:	00000000 	.word	0x00000000
6000121c:	60001700 	.word	0x60001700
60001220:	00003bb0 	.word	0x00003bb0
60001224:	20000000 	.word	0x20000000
60001228:	600052bc 	.word	0x600052bc
6000122c:	20000d90 	.word	0x20000d90
60001230:	20000d90 	.word	0x20000d90
60001234:	200042c0 	.word	0x200042c0
60001238:	e000ed88 	.word	0xe000ed88
6000123c:	20001ffc 	.word	0x20001ffc
60001240:	00000d71 	.word	0x00000d71
60001244:	e000e400 	.word	0xe000e400
60001248:	e000e4a0 	.word	0xe000e4a0
6000124c:	400d8000 	.word	0x400d8000
60001250:	400fc000 	.word	0x400fc000
60001254:	e000ed08 	.word	0xe000ed08
60001258:	e000e014 	.word	0xe000e014
6000125c:	e000e018 	.word	0xe000e018
60001260:	00001fe1 	.word	0x00001fe1
60001264:	e000edfc 	.word	0xe000edfc
60001268:	20200000 	.word	0x20200000
6000126c:	000020e5 	.word	0x000020e5
60001270:	e0001000 	.word	0xe0001000
60001274:	e0001004 	.word	0xe0001004
60001278:	20001a34 	.word	0x20001a34
6000127c:	23c34600 	.word	0x23c34600
60001280:	40084000 	.word	0x40084000
60001284:	400d4000 	.word	0x400d4000
60001288:	56c00000 	.word	0x56c00000
6000128c:	20001a3c 	.word	0x20001a3c
60001290:	20002000 	.word	0x20002000
60001294:	2018101b 	.word	0x2018101b
60001298:	13110d0c 	.word	0x13110d0c

6000129c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000129c:	4b11      	ldr	r3, [pc, #68]	; (600012e4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
6000129e:	4912      	ldr	r1, [pc, #72]	; (600012e8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012a2:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012a4:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600012a8:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600012aa:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012ac:	f240 65b7 	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012b0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012b2:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600012b4:	f440 7040 	orr.w	r0, r0, #768	; 0x300
600012b8:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012ba:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600012bc:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600012be:	6c93      	ldr	r3, [r2, #72]	; 0x48
600012c0:	061b      	lsls	r3, r3, #24
600012c2:	d4fc      	bmi.n	600012be <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012c4:	4b09      	ldr	r3, [pc, #36]	; (600012ec <analog_init+0x50>)
600012c6:	f240 60b7 	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012ca:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600012cc:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600012ce:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600012d0:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600012d2:	6c93      	ldr	r3, [r2, #72]	; 0x48
600012d4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
600012d8:	d1fb      	bne.n	600012d2 <analog_init+0x36>
	calibrating = 0;
600012da:	4a05      	ldr	r2, [pc, #20]	; (600012f0 <analog_init+0x54>)
600012dc:	7013      	strb	r3, [r2, #0]
}
600012de:	bc30      	pop	{r4, r5}
600012e0:	4770      	bx	lr
600012e2:	bf00      	nop
600012e4:	400fc000 	.word	0x400fc000
600012e8:	400c4000 	.word	0x400c4000
600012ec:	400c8000 	.word	0x400c8000
600012f0:	20001a30 	.word	0x20001a30

600012f4 <configure_cache>:
#define SIZE_32M	(SCB_MPU_RASR_SIZE(24) | SCB_MPU_RASR_ENABLE)
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012f4:	b5f0      	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012f6:	4a19      	ldr	r2, [pc, #100]	; (6000135c <configure_cache+0x68>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012f8:	2100      	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012fa:	4b19      	ldr	r3, [pc, #100]	; (60001360 <configure_cache+0x6c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012fc:	f04f 0e10 	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001300:	4818      	ldr	r0, [pc, #96]	; (60001364 <configure_cache+0x70>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001302:	2401      	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001304:	4e18      	ldr	r6, [pc, #96]	; (60001368 <configure_cache+0x74>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001306:	4d19      	ldr	r5, [pc, #100]	; (6000136c <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001308:	6001      	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000130a:	4f19      	ldr	r7, [pc, #100]	; (60001370 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000130c:	f8c2 e000 	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001310:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
60001312:	6015      	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
60001314:	4e17      	ldr	r6, [pc, #92]	; (60001374 <configure_cache+0x80>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001316:	4d18      	ldr	r5, [pc, #96]	; (60001378 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001318:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
6000131a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
6000131c:	4f17      	ldr	r7, [pc, #92]	; (6000137c <configure_cache+0x88>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000131e:	601d      	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001320:	4e17      	ldr	r6, [pc, #92]	; (60001380 <configure_cache+0x8c>)

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
60001322:	4d18      	ldr	r5, [pc, #96]	; (60001384 <configure_cache+0x90>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
60001324:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001326:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001328:	4f17      	ldr	r7, [pc, #92]	; (60001388 <configure_cache+0x94>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
6000132a:	6015      	str	r5, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
6000132c:	4e17      	ldr	r6, [pc, #92]	; (6000138c <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000132e:	4d18      	ldr	r5, [pc, #96]	; (60001390 <configure_cache+0x9c>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001330:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
60001332:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001334:	601d      	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001336:	6004      	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001338:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000133c:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001340:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
60001344:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001348:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000134c:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001350:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
60001354:	f842 3c88 	str.w	r3, [r2, #-136]
60001358:	bdf0      	pop	{r4, r5, r6, r7, pc}
6000135a:	bf00      	nop
6000135c:	e000ed9c 	.word	0xe000ed9c
60001360:	e000eda0 	.word	0xe000eda0
60001364:	e000ed94 	.word	0xe000ed94
60001368:	03080025 	.word	0x03080025
6000136c:	00200011 	.word	0x00200011
60001370:	07020021 	.word	0x07020021
60001374:	20000012 	.word	0x20000012
60001378:	13080025 	.word	0x13080025
6000137c:	20200013 	.word	0x20200013
60001380:	130b0027 	.word	0x130b0027
60001384:	40000014 	.word	0x40000014
60001388:	13100033 	.word	0x13100033
6000138c:	60000015 	.word	0x60000015
60001390:	070b002f 	.word	0x070b002f

60001394 <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
60001394:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001396:	4a17      	ldr	r2, [pc, #92]	; (600013f4 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001398:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000139a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000139e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013a2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013a6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013aa:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013ae:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013b0:	f013 0f02 	tst.w	r3, #2
600013b4:	d006      	beq.n	600013c4 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013b6:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600013b8:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013ba:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013bc:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013be:	f013 0f02 	tst.w	r3, #2
600013c2:	d1f8      	bne.n	600013b6 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600013c4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600013c8:	d101      	bne.n	600013ce <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013ca:	6155      	str	r5, [r2, #20]
			continue;
600013cc:	e7ef      	b.n	600013ae <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600013ce:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600013d2:	d101      	bne.n	600013d8 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013d4:	6156      	str	r6, [r2, #20]
			continue;
600013d6:	e7ea      	b.n	600013ae <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013d8:	2b00      	cmp	r3, #0
600013da:	dae8      	bge.n	600013ae <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600013e0:	d001      	beq.n	600013e6 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013e2:	6191      	str	r1, [r2, #24]
			continue;
600013e4:	e7e3      	b.n	600013ae <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013e6:	065b      	lsls	r3, r3, #25
600013e8:	d401      	bmi.n	600013ee <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013ea:	6157      	str	r7, [r2, #20]
			continue;
600013ec:	e7df      	b.n	600013ae <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013ee:	bcf0      	pop	{r4, r5, r6, r7}
600013f0:	4770      	bx	lr
600013f2:	bf00      	nop
600013f4:	400d8000 	.word	0x400d8000

600013f8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600013f8:	4a36      	ldr	r2, [pc, #216]	; (600014d4 <tempmon_init+0xdc>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600013fa:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600013fc:	4936      	ldr	r1, [pc, #216]	; (600014d8 <tempmon_init+0xe0>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600013fe:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001402:	6813      	ldr	r3, [r2, #0]
60001404:	f023 0301 	bic.w	r3, r3, #1

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

FLASHMEM void tempmon_init(void)
{
60001408:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000140a:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000140c:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001410:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001414:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 600014ec <tempmon_init+0xf4>
60001418:	b2dc      	uxtb	r4, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000141a:	f3c3 200b 	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000141e:	4f2f      	ldr	r7, [pc, #188]	; (600014dc <tempmon_init+0xe4>)
60001420:	ebc0 5313 	rsb	r3, r0, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001424:	ee07 4a90 	vmov	s15, r4
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001428:	f1a4 0155 	sub.w	r1, r4, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000142c:	f8ce 4000 	str.w	r4, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001434:	eb03 0483 	add.w	r4, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001438:	ee07 0a90 	vmov	s15, r0
6000143c:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001440:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001442:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001446:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000144a:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000144e:	1b09      	subs	r1, r1, r4
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001450:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001454:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001458:	4d21      	ldr	r5, [pc, #132]	; (600014e0 <tempmon_init+0xe8>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000145a:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000145e:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001460:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001464:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001468:	4e1e      	ldr	r6, [pc, #120]	; (600014e4 <tempmon_init+0xec>)
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000146a:	eec7 5a26 	vdiv.f32	s11, s14, s13
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000146e:	491e      	ldr	r1, [pc, #120]	; (600014e8 <tempmon_init+0xf0>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001470:	6030      	str	r0, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001472:	6810      	ldr	r0, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001474:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001478:	ee07 3a90 	vmov	s15, r3
6000147c:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001480:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001484:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001488:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000148c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001490:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001494:	ee15 3a90 	vmov	r3, s11
60001498:	ea40 5303 	orr.w	r3, r0, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000149c:	ee16 0a90 	vmov	r0, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014a0:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014a4:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014a6:	ea01 4100 	and.w	r1, r1, r0, lsl #16
600014aa:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014b2:	430b      	orrs	r3, r1
600014b4:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014b8:	ee17 3a90 	vmov	r3, s15
600014bc:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
600014c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
600014c4:	430b      	orrs	r3, r1
600014c6:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600014ca:	6813      	ldr	r3, [r2, #0]
600014cc:	f043 0302 	orr.w	r3, r3, #2
600014d0:	6013      	str	r3, [r2, #0]
600014d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
600014d4:	400d8180 	.word	0x400d8180
600014d8:	401f4400 	.word	0x401f4400
600014dc:	20001a48 	.word	0x20001a48
600014e0:	20001a44 	.word	0x20001a44
600014e4:	20001a4c 	.word	0x20001a4c
600014e8:	0fff0000 	.word	0x0fff0000
600014ec:	20001a40 	.word	0x20001a40

600014f0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600014f0:	4b30      	ldr	r3, [pc, #192]	; (600015b4 <usb_init+0xc4>)
600014f2:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600014f6:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600014f8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600014fc:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001500:	f000 f8da 	bl	600016b8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001504:	492c      	ldr	r1, [pc, #176]	; (600015b8 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001506:	482d      	ldr	r0, [pc, #180]	; (600015bc <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001508:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000150c:	4c2c      	ldr	r4, [pc, #176]	; (600015c0 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000150e:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001512:	4b2c      	ldr	r3, [pc, #176]	; (600015c4 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001514:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001518:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000151c:	6822      	ldr	r2, [r4, #0]
6000151e:	4013      	ands	r3, r2
60001520:	b91b      	cbnz	r3, 6000152a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001522:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
60001526:	079a      	lsls	r2, r3, #30
60001528:	d01a      	beq.n	60001560 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000152a:	4b24      	ldr	r3, [pc, #144]	; (600015bc <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
6000152c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001530:	4a23      	ldr	r2, [pc, #140]	; (600015c0 <usb_init+0xd0>)
60001532:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001534:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001536:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
6000153a:	f041 0102 	orr.w	r1, r1, #2
6000153e:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001542:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001546:	079b      	lsls	r3, r3, #30
60001548:	d4fb      	bmi.n	60001542 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000154a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
6000154e:	491e      	ldr	r1, [pc, #120]	; (600015c8 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001550:	4b1b      	ldr	r3, [pc, #108]	; (600015c0 <usb_init+0xd0>)
60001552:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001556:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001558:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000155a:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000155c:	f000 f8c4 	bl	600016e8 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001560:	4d1a      	ldr	r5, [pc, #104]	; (600015cc <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001562:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001564:	4b16      	ldr	r3, [pc, #88]	; (600015c0 <usb_init+0xd0>)
60001566:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000156a:	4c14      	ldr	r4, [pc, #80]	; (600015bc <usb_init+0xcc>)
6000156c:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000156e:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001570:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001572:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001574:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001576:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000157a:	f44f 7220 	mov.w	r2, #640	; 0x280
6000157e:	f000 f8af 	bl	600016e0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001582:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001586:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000158a:	f240 1343 	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000158e:	4a10      	ldr	r2, [pc, #64]	; (600015d0 <usb_init+0xe0>)
60001590:	4910      	ldr	r1, [pc, #64]	; (600015d4 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001592:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001594:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001596:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
6000159a:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000159e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015a2:	4a0d      	ldr	r2, [pc, #52]	; (600015d8 <usb_init+0xe8>)
600015a4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015a8:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015aa:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015ac:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
600015b0:	bd70      	pop	{r4, r5, r6, pc}
600015b2:	bf00      	nop
600015b4:	400d8000 	.word	0x400d8000
600015b8:	400fc000 	.word	0x400fc000
600015bc:	402e0000 	.word	0x402e0000
600015c0:	400d9000 	.word	0x400d9000
600015c4:	001e1c00 	.word	0x001e1c00
600015c8:	e000e28c 	.word	0xe000e28c
600015cc:	20004000 	.word	0x20004000
600015d0:	20002000 	.word	0x20002000
600015d4:	00000f85 	.word	0x00000f85
600015d8:	e000e10c 	.word	0xe000e10c

600015dc <usb_string_product_name_default>:
600015dc:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
600015ec:	00610069 0000006c                       i.a.l...

600015f4 <usb_string_manufacturer_name_default>:
600015f4:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
60001604:	00690075 006f006e                       u.i.n.o.

6000160c <string0>:
6000160c:	04090304                                ....

60001610 <usb_config_descriptor_12>:
60001610:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001620:	24050001 05011000 01010124 06022404     ...$....$....$..
60001630:	00062405 82050701 10001003 00010409     .$..............
60001640:	00000a02 03050700 00004002 02840507     .........@......
60001650:	00000040                                @...

60001654 <usb_config_descriptor_480>:
60001654:	00430209 c0000102 00040932 02020100     ..C.....2.......
60001664:	24050001 05011000 01010124 06022404     ...$....$....$..
60001674:	00062405 82050701 10001003 00010409     .$..............
60001684:	00000a02 03050700 00020002 02840507     ................
60001694:	00000200                                ....

60001698 <qualifier_descriptor>:
60001698:	0200060a 40000002 ffff0001              .......@....

600016a4 <_init>:
600016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600016a6:	bf00      	nop
600016a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
600016aa:	bc08      	pop	{r3}
600016ac:	469e      	mov	lr, r3
600016ae:	4770      	bx	lr

600016b0 <__main_veneer>:
600016b0:	f85f f000 	ldr.w	pc, [pc]	; 600016b4 <__main_veneer+0x4>
600016b4:	0000287d 	.word	0x0000287d

600016b8 <__usb_init_serialnumber_veneer>:
600016b8:	f85f f000 	ldr.w	pc, [pc]	; 600016bc <__usb_init_serialnumber_veneer+0x4>
600016bc:	00001769 	.word	0x00001769

600016c0 <__pwm_init_veneer>:
600016c0:	f85f f000 	ldr.w	pc, [pc]	; 600016c4 <__pwm_init_veneer+0x4>
600016c4:	00002f25 	.word	0x00002f25

600016c8 <____libc_init_array_veneer>:
600016c8:	f85f f000 	ldr.w	pc, [pc]	; 600016cc <____libc_init_array_veneer+0x4>
600016cc:	00003201 	.word	0x00003201

600016d0 <__startup_early_hook_veneer>:
600016d0:	f85f f000 	ldr.w	pc, [pc]	; 600016d4 <__startup_early_hook_veneer+0x4>
600016d4:	00000d89 	.word	0x00000d89

600016d8 <__set_arm_clock_veneer>:
600016d8:	f85f f000 	ldr.w	pc, [pc]	; 600016dc <__set_arm_clock_veneer+0x4>
600016dc:	00002c11 	.word	0x00002c11

600016e0 <__memset_veneer>:
600016e0:	f85f f000 	ldr.w	pc, [pc]	; 600016e4 <__memset_veneer+0x4>
600016e4:	000037d1 	.word	0x000037d1

600016e8 <__delay_veneer>:
600016e8:	f85f f000 	ldr.w	pc, [pc]	; 600016ec <__delay_veneer+0x4>
600016ec:	00000b91 	.word	0x00000b91

600016f0 <__startup_late_hook_veneer>:
600016f0:	f85f f000 	ldr.w	pc, [pc]	; 600016f4 <__startup_late_hook_veneer+0x4>
600016f4:	00000d8d 	.word	0x00000d8d

600016f8 <__init_array_start>:
600016f8:	00000045 	.word	0x00000045
600016fc:	000003e9 	.word	0x000003e9

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	4c05b510 	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	7823      	ldrb	r3, [r4, #0]
      26:	b933      	.short	0xb933
	}
	__enable_irq();
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
      2a:	b113      	.short	0xb113
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af      	.short	0xf3af
      30:	8000      	strh	r0, [r0, #0]
      32:	2301      	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	7023      	strb	r3, [r4, #0]
      36:	bd10      	pop	{r4, pc}
      38:	0d90      	lsrs	r0, r2, #22
      3a:	2000      	movs	r0, #0
      3c:	00000000 	.word	0x00000000
}
      40:	3bb4      	subs	r3, #180	; 0xb4
	...

00000044 <frame_dummy>:
      44:	b5104b08 	.word	0xb5104b08
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	cbnz	r3, 5a <frame_dummy+0x16>
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	.short	0x4b07
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	2b00      	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	d0fb      	beq.n	58 <frame_dummy+0x14>
      60:	4010e8bd 	.word	0x4010e8bd
      mode |= ADC_CFG_AVGS(1);
      64:	4718      	bx	r3
      mode1 |= ADC_CFG_AVGS(1);
      66:	bf00      	.short	0xbf00
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	0d94      	lsrs	r4, r2, #22
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	2000      	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	3bb4      	subs	r3, #180	; 0xb4
  ADC2_CFG = mode1;
      72:	0000      	movs	r0, r0
  
  if(num >= 4){
      74:	0d90      	lsrs	r0, r2, #22
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	movs	r0, #0
      78:	0000      	movs	r0, r0
	...

0000007c <IntervalTimer::~IntervalTimer()>:
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
	}
	~IntervalTimer() {
      7c:	b510      	push	{r4, lr}
      7e:	4604      	.short	0x4604
		end();
      80:	f002 fbce 	bl	2820 <IntervalTimer::end()>
	}
      84:	bd104620 	.word	0xbd104620

00000088 <readAccSensorLoop()>:
//
//}
//

void readAccSensorLoop()
{
      88:	b508      	push	{r3, lr}
	xRead = analogRead(xPin);
      8a:	200e      	movs	r0, #14
      8c:	f000 fd4e 	bl	b2c <analogRead>
      90:	60184b08 	.word	0x60184b08
	yRead = analogRead(yPin);
      94:	200f      	movs	r0, #15
      96:	f000 fd49 	bl	b2c <analogRead>
      9a:	4b07      	ldr	r3, [pc, #28]	; (b8 <readAccSensorLoop()+0x30>)
      9c:	20106018 	.word	0x20106018
	zRead = analogRead(zPin);
      a0:	f000 fd44 	bl	b2c <analogRead>
      a4:	60184b05 	.word	0x60184b05

	LaserRead = analogRead(LaserPin);
      a8:	2013      	movs	r0, #19
      aa:	f000      	.short	0xf000
      ac:	fd3f 4b04 	ldc2	11, cr4, [pc, #-16]!	; a0 <readAccSensorLoop()+0x18>
      b0:	bd086018 	.word	0xbd086018
      b4:	0dac      	lsrs	r4, r5, #22
      b6:	2000      	.short	0x2000
      b8:	0db0      	lsrs	r0, r6, #22
      ba:	2000      	.short	0x2000
      bc:	0db4      	lsrs	r4, r6, #22
      be:	2000      	movs	r0, #0
      c0:	1a24      	subs	r4, r4, r0
      c2:	2000      	movs	r0, #0

000000c4 <mainControlLoop()>:

}

void mainControlLoop()
{
      c4:	b08fb5f0 	.word	0xb08fb5f0
	standardFrame = viper.getStandardFrame();
      c8:	4f4c      	ldr	r7, [pc, #304]	; (1fc <mainControlLoop()+0x138>)
      ca:	494d      	.short	0x494d
      cc:	466c      	mov	r4, sp
      ce:	4668      	mov	r0, sp
      d0:	f000 f9f2 	bl	4b8 <RS422::getStandardFrame()>
      d4:	463e      	mov	r6, r7
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
      d6:	4d4b      	ldr	r5, [pc, #300]	; (204 <mainControlLoop()+0x140>)
      d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      da:	c60f      	.short	0xc60f
      dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      de:	c60f      	.short	0xc60f
      e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
      e2:	6824      	.short	0x6824
      e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      e6:	210e      	movs	r1, #14
      e8:	60344847 	.word	0x60344847
      ec:	f001 fe86 	bl	1dfc <usb_serial_write>
      f0:	6879      	ldr	r1, [r7, #4]
      f2:	4628      	.short	0x4628
      f4:	f002 fc30 	bl	2958 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
      f8:	f0024628 	.word	0xf0024628
      fc:	fbdd 2105 			; <UNDEFINED> instruction: 0xfbdd2105
     100:	f0014842 	.word	0xf0014842
     104:	fe7b ed97 	mrc2	13, 3, lr, cr11, cr7, {4}
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     108:	21020a07 	.word	0x21020a07
     10c:	4628      	mov	r0, r5
     10e:	eeb7      	.short	0xeeb7
     110:	0ac0      	lsrs	r0, r0, #11
     112:	f002 fc2d 	bl	2970 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     116:	4628      	.short	0x4628
     118:	f002 fbce 	bl	28b8 <Print::println()>
     11c:	483c2105 	.word	0x483c2105
     120:	f001 fe6c 	bl	1dfc <usb_serial_write>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     124:	0a08ed97 	.word	0x0a08ed97
     128:	2102      	movs	r1, #2
     12a:	4628      	.short	0x4628
     12c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     130:	fc1ef002 	.word	0xfc1ef002
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     134:	4628      	mov	r0, r5
     136:	f002 fbbf 	bl	28b8 <Print::println()>
     13a:	2105      	.short	0x2105
     13c:	4835      	ldr	r0, [pc, #212]	; (214 <mainControlLoop()+0x150>)
     13e:	f001      	.short	0xf001
     140:	fe5d ed97 	mrc2	13, 2, lr, cr13, cr7, {4}
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     144:	21020a09 	.word	0x21020a09
     148:	4628      	mov	r0, r5
     14a:	eeb7      	.short	0xeeb7
     14c:	0ac0      	lsrs	r0, r0, #11
     14e:	f002      	.short	0xf002
     150:	fc0f 4628 	stc2	6, cr4, [pc], {40}	; 0x28
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     154:	f002 fbb0 	bl	28b8 <Print::println()>
     158:	482f2106 	.word	0x482f2106
     15c:	f001 fe4e 	bl	1dfc <usb_serial_write>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     160:	0a0aed97 	.word	0x0a0aed97
     164:	2102      	movs	r1, #2
     166:	4628      	mov	r0, r5
     168:	0ac0eeb7 	.word	0x0ac0eeb7
     16c:	f002 fc00 	bl	2970 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     170:	f0024628 	.word	0xf0024628
     174:	fba1 2106 	umull	r2, r1, r1, r6
     178:	4828      	ldr	r0, [pc, #160]	; (21c <mainControlLoop()+0x158>)
     17a:	f001      	.short	0xf001
     17c:	fe3f ed97 	mrc2	13, 1, lr, cr15, cr7, {4}
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     180:	21020a0b 	.word	0x21020a0b
     184:	4628      	mov	r0, r5
     186:	eeb7      	.short	0xeeb7
     188:	0ac0      	lsrs	r0, r0, #11
     18a:	f002 fbf1 	bl	2970 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     18e:	4628      	.short	0x4628
     190:	f002 fb92 	bl	28b8 <Print::println()>
     194:	48222106 	.word	0x48222106
     198:	f001 fe30 	bl	1dfc <usb_serial_write>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     19c:	0a0ced97 	.word	0x0a0ced97
     1a0:	2102      	movs	r1, #2
     1a2:	4628      	mov	r0, r5
     1a4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
     1a8:	f002 fbe2 	bl	2970 <Print::printFloat(double, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     1ac:	f0024628 	.word	0xf0024628
     1b0:	fb83 210c 	smull	r2, r1, r3, ip
     1b4:	481b      	ldr	r0, [pc, #108]	; (224 <mainControlLoop()+0x160>)
     1b6:	f001      	.short	0xf001
     1b8:	fe21 4a1b 	vselge.f32	s8, s2, s22

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     1bc:	46282300 	.word	0x46282300
     1c0:	6811      	ldr	r1, [r2, #0]
     1c2:	220a      	.short	0x220a
     1c4:	f002 fb88 	bl	28d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     1c8:	f0024628 	.word	0xf0024628
     1cc:	fb75 2108 	usada8	r1, r5, r8, r2
     1d0:	4816      	ldr	r0, [pc, #88]	; (22c <mainControlLoop()+0x168>)
     1d2:	f001      	.short	0xf001
     1d4:	fe13 4b16 	vselvs.f64	d4, d3, d6
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     1d8:	68194628 	.word	0x68194628
     1dc:	f002 fbbc 	bl	2958 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     1e0:	4628      	mov	r0, r5
     1e2:	f002      	.short	0xf002
     1e4:	fb69 2116 	smmlsr	r1, r9, r6, r2
     1e8:	f0014812 	.word	0xf0014812
     1ec:	fe07 4628 	cdp2	6, 0, cr4, cr7, cr8, {1}
	Serial.print("Laser = ");
	Serial.println(LaserRead);


	Serial.println("======================");
}
     1f0:	e8bdb00f 	.word	0xe8bdb00f
     1f4:	40f0      	lsrs	r0, r6
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     1f6:	f002 bb5f 	b.w	28b8 <Print::println()>
     1fa:	bf00      	nop
     1fc:	200019f0 	.word	0x200019f0
     200:	0db8      	lsrs	r0, r7, #22
     202:	2000      	.short	0x2000
     204:	0538      	lsls	r0, r7, #20
     206:	2000      	movs	r0, #0
     208:	20000000 	.word	0x20000000
     20c:	0010      	movs	r0, r2
     20e:	2000      	.short	0x2000
     210:	0018      	movs	r0, r3
     212:	2000      	.short	0x2000
     214:	0020      	movs	r0, r4
     216:	2000      	.short	0x2000
     218:	20000028 	.word	0x20000028
     21c:	20000030 	.word	0x20000030
     220:	20000038 	.word	0x20000038
     224:	20000040 	.word	0x20000040
     228:	20001a28 	.word	0x20001a28
     22c:	20000050 	.word	0x20000050
     230:	20001a24 	.word	0x20001a24
     234:	2000005c 	.word	0x2000005c

00000238 <setup>:

int LaserRead = 0;

// The setup() function runs once each time the micro-controller starts
void setup()
{
     238:	b538      	push	{r3, r4, r5, lr}

	viper.init();
     23a:	4818      	ldr	r0, [pc, #96]	; (29c <setup+0x64>)
     23c:	f000 f91a 	bl	474 <RS422::init()>
     240:	4d17      	ldr	r5, [pc, #92]	; (2a0 <setup+0x68>)
     242:	4a18      	ldr	r2, [pc, #96]	; (2a4 <setup+0x6c>)
     244:	4918      	ldr	r1, [pc, #96]	; (2a8 <setup+0x70>)
     246:	4c19      	ldr	r4, [pc, #100]	; (2ac <setup+0x74>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     248:	7813      	ldrb	r3, [r2, #0]
     24a:	2b00      	cmp	r3, #0
     24c:	d0fc      	beq.n	248 <setup+0x10>
     24e:	780b      	ldrb	r3, [r1, #0]
     250:	07db      	lsls	r3, r3, #31
     252:	d5f9      	bpl.n	248 <setup+0x10>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     254:	682b      	ldr	r3, [r5, #0]
     256:	6820      	ldr	r0, [r4, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     258:	1a1b      	subs	r3, r3, r0
     25a:	2b0e      	cmp	r3, #14
     25c:	d9f4      	bls.n	248 <setup+0x10>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     25e:	210f      	movs	r1, #15
     260:	4813      	ldr	r0, [pc, #76]	; (2b0 <setup+0x78>)
     262:	f001 fdcb 	bl	1dfc <usb_serial_write>
     266:	4813      	ldr	r0, [pc, #76]	; (2b4 <setup+0x7c>)
     268:	f002 fb26 	bl	28b8 <Print::println()>
//		Serial.println("Serial Connecting...");
	}

	Serial.println("Serial Connect!");

	pinMode(DE, OUTPUT);
     26c:	2101      	movs	r1, #1
     26e:	2003      	movs	r0, #3
     270:	f000 fd3e 	bl	cf0 <pinMode>
	digitalWrite(DE, HIGH);
     274:	2101      	movs	r1, #1
     276:	2003      	movs	r0, #3
     278:	f000 fd34 	bl	ce4 <digitalWrite>

	pinMode(RE, OUTPUT);
     27c:	2101      	movs	r1, #1
     27e:	2002      	movs	r0, #2
     280:	f000 fd36 	bl	cf0 <pinMode>
	digitalWrite(RE, LOW);
     284:	2100      	movs	r1, #0
     286:	2002      	movs	r0, #2
     288:	f000 fd2c 	bl	ce4 <digitalWrite>
	bool begin(void (*funct)(), unsigned int microseconds) {
		if (microseconds == 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (24000000 / 1000000) * microseconds - 1;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
     28c:	4a0a      	ldr	r2, [pc, #40]	; (2b8 <setup+0x80>)
     28e:	490b      	ldr	r1, [pc, #44]	; (2bc <setup+0x84>)
     290:	480b      	ldr	r0, [pc, #44]	; (2c0 <setup+0x88>)

	AccSensorTimer.begin(readAccSensorLoop, CONTROL_PERIOD);
}
     292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     296:	f002 ba63 	b.w	2760 <IntervalTimer::beginCycles(void (*)(), unsigned long)>
     29a:	bf00      	nop
     29c:	20000db8 	.word	0x20000db8
     2a0:	20001a3c 	.word	0x20001a3c
     2a4:	20001a88 	.word	0x20001a88
     2a8:	20001bc8 	.word	0x20001bc8
     2ac:	20004288 	.word	0x20004288
     2b0:	20000074 	.word	0x20000074
     2b4:	20000538 	.word	0x20000538
     2b8:	0003a97f 	.word	0x0003a97f
     2bc:	00000089 	.word	0x00000089
     2c0:	20000434 	.word	0x20000434

000002c4 <serialEvent()>:

void serialEvent()
{
     2c4:	b570      	push	{r4, r5, r6, lr}
	char dataIn = 0;
     2c6:	2300      	movs	r3, #0

	AccSensorTimer.begin(readAccSensorLoop, CONTROL_PERIOD);
}

void serialEvent()
{
     2c8:	b082      	sub	sp, #8
	char dataIn = 0;
     2ca:	f88d 3007 	strb.w	r3, [sp, #7]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     2ce:	f001 fd2f 	bl	1d30 <usb_serial_available>

	if (Serial.available())
     2d2:	b908      	cbnz	r0, 2d8 <serialEvent()+0x14>
			mainControlTimer.end();
		}

	}

}
     2d4:	b002      	add	sp, #8
     2d6:	bd70      	pop	{r4, r5, r6, pc}
     2d8:	4c30      	ldr	r4, [pc, #192]	; (39c <serialEvent()+0xd8>)
		size_t count=0;
		unsigned long startMillis = millis();
		do {
			count += usb_serial_read(buffer + count, length - count);
			if (count >= length) return count;
		} while(millis() - startMillis < _timeout);
     2da:	4e31      	ldr	r6, [pc, #196]	; (3a0 <serialEvent()+0xdc>)
     2dc:	6825      	ldr	r5, [r4, #0]
     2de:	e004      	b.n	2ea <serialEvent()+0x26>
     2e0:	6823      	ldr	r3, [r4, #0]
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
	}
	size_t readBytes(char *buffer, size_t length) {
		size_t count=0;
		unsigned long startMillis = millis();
		do {
     2e2:	68b2      	ldr	r2, [r6, #8]
     2e4:	1b5b      	subs	r3, r3, r5
     2e6:	4293      	cmp	r3, r2
     2e8:	d221      	bcs.n	32e <serialEvent()+0x6a>
			count += usb_serial_read(buffer + count, length - count);
     2ea:	2101      	movs	r1, #1
     2ec:	f10d 0007 	add.w	r0, sp, #7
     2f0:	f001 fc86 	bl	1c00 <usb_serial_read>
			if (count >= length) return count;
		} while(millis() - startMillis < _timeout);
     2f4:	492a      	ldr	r1, [pc, #168]	; (3a0 <serialEvent()+0xdc>)
	size_t readBytes(char *buffer, size_t length) {
		size_t count=0;
		unsigned long startMillis = millis();
		do {
			count += usb_serial_read(buffer + count, length - count);
			if (count >= length) return count;
     2f6:	2800      	cmp	r0, #0
     2f8:	d0f2      	beq.n	2e0 <serialEvent()+0x1c>
	if (Serial.available())
	{
		Serial.readBytes(&dataIn, 1);

		// Run P&O
		if (dataIn == 'R')
     2fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     2fe:	2b52      	cmp	r3, #82	; 0x52
     300:	d018      	beq.n	334 <serialEvent()+0x70>

			mainControlTimer.begin(mainControlLoop, CONTROL_PERIOD);
		}

		// Init P&O
		else if (dataIn == 'I')
     302:	2b49      	cmp	r3, #73	; 0x49
     304:	d026      	beq.n	354 <serialEvent()+0x90>
			viper.initContinuousPNO();

		}

		// Dual Output
		else if (dataIn == 'D')
     306:	2b44      	cmp	r3, #68	; 0x44
     308:	d02f      	beq.n	36a <serialEvent()+0xa6>
			viper.runDualoutput();

		}

		// Dual Output
		else if (dataIn == 'B')
     30a:	2b42      	cmp	r3, #66	; 0x42
     30c:	d038      	beq.n	380 <serialEvent()+0xbc>
			viper.changeViperBaudrate();
			viper.changeBaudrate();
		}

		// Stop P&O
		else if (dataIn == 'K')
     30e:	2b4b      	cmp	r3, #75	; 0x4b
     310:	d1e0      	bne.n	2d4 <serialEvent()+0x10>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     312:	2104      	movs	r1, #4
     314:	4823      	ldr	r0, [pc, #140]	; (3a4 <serialEvent()+0xe0>)
     316:	f001 fd71 	bl	1dfc <usb_serial_write>
     31a:	4821      	ldr	r0, [pc, #132]	; (3a0 <serialEvent()+0xdc>)
     31c:	f002 facc 	bl	28b8 <Print::println()>
		{
			Serial.println("Kill");

			viper.stopPNO();
     320:	4821      	ldr	r0, [pc, #132]	; (3a8 <serialEvent()+0xe4>)
     322:	f000 f9d3 	bl	6cc <RS422::stopPNO()>

			mainControlTimer.end();
     326:	4821      	ldr	r0, [pc, #132]	; (3ac <serialEvent()+0xe8>)
     328:	f002 fa7a 	bl	2820 <IntervalTimer::end()>
		}

	}

}
     32c:	e7d2      	b.n	2d4 <serialEvent()+0x10>
	String readString(size_t max = 120);
	String readStringUntil(char terminator, size_t max = 120);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
     32e:	2301      	movs	r3, #1
     330:	730b      	strb	r3, [r1, #12]
     332:	e7e2      	b.n	2fa <serialEvent()+0x36>
     334:	2103      	movs	r1, #3
     336:	481e      	ldr	r0, [pc, #120]	; (3b0 <serialEvent()+0xec>)
     338:	f001 fd60 	bl	1dfc <usb_serial_write>
     33c:	4818      	ldr	r0, [pc, #96]	; (3a0 <serialEvent()+0xdc>)
     33e:	f002 fabb 	bl	28b8 <Print::println()>
		// Run P&O
		if (dataIn == 'R')
		{
			Serial.println("Run");

			viper.startPNO();
     342:	4819      	ldr	r0, [pc, #100]	; (3a8 <serialEvent()+0xe4>)
     344:	f000 f946 	bl	5d4 <RS422::startPNO()>
     348:	4a1a      	ldr	r2, [pc, #104]	; (3b4 <serialEvent()+0xf0>)
     34a:	491b      	ldr	r1, [pc, #108]	; (3b8 <serialEvent()+0xf4>)
     34c:	4817      	ldr	r0, [pc, #92]	; (3ac <serialEvent()+0xe8>)
     34e:	f002 fa07 	bl	2760 <IntervalTimer::beginCycles(void (*)(), unsigned long)>
     352:	e7bf      	b.n	2d4 <serialEvent()+0x10>
     354:	2104      	movs	r1, #4
     356:	4819      	ldr	r0, [pc, #100]	; (3bc <serialEvent()+0xf8>)
     358:	f001 fd50 	bl	1dfc <usb_serial_write>
     35c:	4810      	ldr	r0, [pc, #64]	; (3a0 <serialEvent()+0xdc>)
     35e:	f002 faab 	bl	28b8 <Print::println()>
		// Init P&O
		else if (dataIn == 'I')
		{
			Serial.println("Init");

			viper.initContinuousPNO();
     362:	4811      	ldr	r0, [pc, #68]	; (3a8 <serialEvent()+0xe4>)
     364:	f000 fa28 	bl	7b8 <RS422::initContinuousPNO()>
     368:	e7b4      	b.n	2d4 <serialEvent()+0x10>
     36a:	210b      	movs	r1, #11
     36c:	4814      	ldr	r0, [pc, #80]	; (3c0 <serialEvent()+0xfc>)
     36e:	f001 fd45 	bl	1dfc <usb_serial_write>
     372:	480b      	ldr	r0, [pc, #44]	; (3a0 <serialEvent()+0xdc>)
     374:	f002 faa0 	bl	28b8 <Print::println()>
		// Dual Output
		else if (dataIn == 'D')
		{
			Serial.println("Dual Output");

			viper.runDualoutput();
     378:	480b      	ldr	r0, [pc, #44]	; (3a8 <serialEvent()+0xe4>)
     37a:	f000 f8ad 	bl	4d8 <RS422::runDualoutput()>
     37e:	e7a9      	b.n	2d4 <serialEvent()+0x10>
     380:	2109      	movs	r1, #9
     382:	4810      	ldr	r0, [pc, #64]	; (3c4 <serialEvent()+0x100>)
     384:	f001 fd3a 	bl	1dfc <usb_serial_write>
     388:	4805      	ldr	r0, [pc, #20]	; (3a0 <serialEvent()+0xdc>)
     38a:	f002 fa95 	bl	28b8 <Print::println()>
		// Dual Output
		else if (dataIn == 'B')
		{
			Serial.println("Baud Rate");

			viper.changeViperBaudrate();
     38e:	4806      	ldr	r0, [pc, #24]	; (3a8 <serialEvent()+0xe4>)
     390:	f000 fa14 	bl	7bc <RS422::changeViperBaudrate()>
			viper.changeBaudrate();
     394:	4804      	ldr	r0, [pc, #16]	; (3a8 <serialEvent()+0xe4>)
     396:	f000 f88d 	bl	4b4 <RS422::changeBaudrate()>
     39a:	e79b      	b.n	2d4 <serialEvent()+0x10>
     39c:	20001a3c 	.word	0x20001a3c
     3a0:	20000538 	.word	0x20000538
     3a4:	200000a8 	.word	0x200000a8
     3a8:	20000db8 	.word	0x20000db8
     3ac:	2000042c 	.word	0x2000042c
     3b0:	20000084 	.word	0x20000084
     3b4:	0003a97f 	.word	0x0003a97f
     3b8:	000000c5 	.word	0x000000c5
     3bc:	20000088 	.word	0x20000088
     3c0:	20000090 	.word	0x20000090
     3c4:	2000009c 	.word	0x2000009c

000003c8 <serialEvent3()>:
}


// Viper Packet
void serialEvent3()
{
     3c8:	b508      	push	{r3, lr}
	/////////////////////////////////////////////////////////////////////////////////////////////////

	time = micros();
     3ca:	f000 fc47 	bl	c5c <micros>
     3ce:	4b03      	ldr	r3, [pc, #12]	; (3dc <serialEvent3()+0x14>)
     3d0:	6018      	str	r0, [r3, #0]

	viper.readPacket();
     3d2:	4803      	ldr	r0, [pc, #12]	; (3e0 <serialEvent3()+0x18>)
//
//		for (int i = 0; i < dataSize; i++)
//			Serial.println(rxBuff[i]);
//	}

}
     3d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	/////////////////////////////////////////////////////////////////////////////////////////////////

	time = micros();

	viper.readPacket();
     3d8:	f000 ba6e 	b.w	8b8 <RS422::readPacket()>
     3dc:	20001a2c 	.word	0x20001a2c
     3e0:	20000db8 	.word	0x20000db8

000003e4 <loop>:
	Serial.println("======================");
}

// Add the main program code into the continuous loop() function
void loop()
{
     3e4:	4770      	bx	lr
     3e6:	bf00      	nop

000003e8 <_GLOBAL__sub_I_viper>:


}
     3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
, CMD_SNS_VIRTUAL		/**  32  set/get/reset,	sensor	VIRTUAL_SNS_CONFIG		p		cfg			sensornum						*/
, CMD_SRC_WHOAMI		/**  33     /get/     ,	source	WHOAMI_STRUCT    		p		read-only	sourcenum						*/
, CMD_MAX
} eViperCmds;

typedef struct STANDARD_FRAME_
     3ea:	4b1c      	ldr	r3, [pc, #112]	; (45c <_GLOBAL__sub_I_viper+0x74>)
     3ec:	2000      	movs	r0, #0
     3ee:	2400      	movs	r4, #0
#define CONTROL_PERIOD 10000	// 10ms

RS422 viper;
STANDARD_FRAME standardFrame;

IntervalTimer mainControlTimer;
     3f0:	4e1b      	ldr	r6, [pc, #108]	; (460 <_GLOBAL__sub_I_viper+0x78>)
     3f2:	f503 6e42 	add.w	lr, r3, #3104	; 0xc20
     3f6:	f603 4724 	addw	r7, r3, #3108	; 0xc24
     3fa:	f603 4228 	addw	r2, r3, #3112	; 0xc28
     3fe:	f603 412c 	addw	r1, r3, #3116	; 0xc2c
     402:	4d18      	ldr	r5, [pc, #96]	; (464 <_GLOBAL__sub_I_viper+0x7c>)
     404:	f8ce 0000 	str.w	r0, [lr]
     408:	f503 6e43 	add.w	lr, r3, #3120	; 0xc30
     40c:	6038      	str	r0, [r7, #0]
     40e:	f603 4734 	addw	r7, r3, #3124	; 0xc34
     412:	f8ce 0000 	str.w	r0, [lr]
     416:	6010      	str	r0, [r2, #0]
     418:	4632      	mov	r2, r6
     41a:	6008      	str	r0, [r1, #0]
     41c:	4629      	mov	r1, r5
     41e:	6038      	str	r0, [r7, #0]
     420:	f8c3 4c04 	str.w	r4, [r3, #3076]	; 0xc04
     424:	f8c3 4c08 	str.w	r4, [r3, #3080]	; 0xc08
     428:	f8c3 4c0c 	str.w	r4, [r3, #3084]	; 0xc0c
     42c:	f8c3 4c10 	str.w	r4, [r3, #3088]	; 0xc10
     430:	f8c3 4c14 	str.w	r4, [r3, #3092]	; 0xc14
     434:	f8c3 4c18 	str.w	r4, [r3, #3096]	; 0xc18
     438:	f8c3 4c1c 	str.w	r4, [r3, #3100]	; 0xc1c
     43c:	480a      	ldr	r0, [pc, #40]	; (468 <_GLOBAL__sub_I_viper+0x80>)
     43e:	f002 fecd 	bl	31dc <__aeabi_atexit>
IntervalTimer AccSensorTimer;
     442:	4632      	mov	r2, r6
     444:	4629      	mov	r1, r5
     446:	4809      	ldr	r0, [pc, #36]	; (46c <_GLOBAL__sub_I_viper+0x84>)
     448:	f002 fec8 	bl	31dc <__aeabi_atexit>

IntervalTimer streamTimer;
     44c:	4632      	mov	r2, r6
     44e:	4629      	mov	r1, r5
     450:	4807      	ldr	r0, [pc, #28]	; (470 <_GLOBAL__sub_I_viper+0x88>)
// Add the main program code into the continuous loop() function
void loop()
{


}
     452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
STANDARD_FRAME standardFrame;

IntervalTimer mainControlTimer;
IntervalTimer AccSensorTimer;

IntervalTimer streamTimer;
     456:	f002 bec1 	b.w	31dc <__aeabi_atexit>
     45a:	bf00      	nop
     45c:	20000db8 	.word	0x20000db8
     460:	20000428 	.word	0x20000428
     464:	0000007d 	.word	0x0000007d
     468:	2000042c 	.word	0x2000042c
     46c:	20000434 	.word	0x20000434
     470:	2000043c 	.word	0x2000043c

00000474 <RS422::init()>:
unsigned long time = 0;
unsigned long timeCheck = 0;


void RS422::init()
{
     474:	b538      	push	{r3, r4, r5, lr}
	memset(rxBuff, 0, BUFFER_SIZE);
     476:	f44f 6580 	mov.w	r5, #1024	; 0x400
unsigned long time = 0;
unsigned long timeCheck = 0;


void RS422::init()
{
     47a:	4604      	mov	r4, r0
	memset(rxBuff, 0, BUFFER_SIZE);
     47c:	2100      	movs	r1, #0
     47e:	462a      	mov	r2, r5
     480:	f003 f9a6 	bl	37d0 <memset>
	memset(txBuff, 0, BUFFER_SIZE);
     484:	462a      	mov	r2, r5
     486:	1960      	adds	r0, r4, r5
     488:	2100      	movs	r1, #0
     48a:	f003 f9a1 	bl	37d0 <memset>
	memset(packetBuff, 0, BUFFER_SIZE);
     48e:	462a      	mov	r2, r5
     490:	f504 6000 	add.w	r0, r4, #2048	; 0x800
     494:	2100      	movs	r1, #0
     496:	f003 f99b 	bl	37d0 <memset>

	decodePos = 0;
     49a:	2200      	movs	r2, #0

	RS422_Serial.begin(RS422_BAUD_RATE);
     49c:	f44f 2161 	mov.w	r1, #921600	; 0xe1000
     4a0:	4803      	ldr	r0, [pc, #12]	; (4b0 <RS422::init()+0x3c>)
{
	memset(rxBuff, 0, BUFFER_SIZE);
	memset(txBuff, 0, BUFFER_SIZE);
	memset(packetBuff, 0, BUFFER_SIZE);

	decodePos = 0;
     4a2:	f8c4 2c00 	str.w	r2, [r4, #3072]	; 0xc00

	RS422_Serial.begin(RS422_BAUD_RATE);


}
     4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(txBuff, 0, BUFFER_SIZE);
	memset(packetBuff, 0, BUFFER_SIZE);

	decodePos = 0;

	RS422_Serial.begin(RS422_BAUD_RATE);
     4aa:	f001 bec9 	b.w	2240 <HardwareSerial::begin(unsigned long, unsigned short)>
     4ae:	bf00      	nop
     4b0:	20000474 	.word	0x20000474

000004b4 <RS422::changeBaudrate()>:

	RS422_Serial.write(txBuff, 36);
}

void RS422::changeBaudrate()
{
     4b4:	4770      	bx	lr
     4b6:	bf00      	nop

000004b8 <RS422::getStandardFrame()>:
	}

}

STANDARD_FRAME RS422::getStandardFrame()
{
     4b8:	b470      	push	{r4, r5, r6}
	return standardFrame;
     4ba:	f601 4504 	addw	r5, r1, #3076	; 0xc04
	}

}

STANDARD_FRAME RS422::getStandardFrame()
{
     4be:	4606      	mov	r6, r0
	return standardFrame;
     4c0:	4604      	mov	r4, r0
     4c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     4c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     4c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     4c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     4ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     4cc:	682d      	ldr	r5, [r5, #0]
     4ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     4d0:	4630      	mov	r0, r6

}

STANDARD_FRAME RS422::getStandardFrame()
{
	return standardFrame;
     4d2:	6025      	str	r5, [r4, #0]
     4d4:	bc70      	pop	{r4, r5, r6}
     4d6:	4770      	bx	lr

000004d8 <RS422::runDualoutput()>:

	RS422_Serial.write(txBuff, 32);
}

void RS422::runDualoutput()
{
     4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	txBuff[1] = 0x50;
	txBuff[2] = 0x52;
	txBuff[3] = 0x43;

	txBuff[4] = 0x1C;	// Size
	txBuff[5] = 0x00;
     4da:	2200      	movs	r2, #0
}

void RS422::runDualoutput()
{
	// PREAMBLE
	txBuff[0] = 0x56;
     4dc:	2456      	movs	r4, #86	; 0x56
	txBuff[1] = 0x50;
     4de:	2150      	movs	r1, #80	; 0x50
	txBuff[2] = 0x52;
     4e0:	2552      	movs	r5, #82	; 0x52
	txBuff[3] = 0x43;

	txBuff[4] = 0x1C;	// Size
     4e2:	231c      	movs	r3, #28
	txBuff[8] = 0x00;
	txBuff[9] = 0x00;
	txBuff[10] = 0x00;
	txBuff[11] = 0x00;

	txBuff[12] = 0x0D;
     4e4:	260d      	movs	r6, #13
}

void RS422::runDualoutput()
{
	// PREAMBLE
	txBuff[0] = 0x56;
     4e6:	f880 4400 	strb.w	r4, [r0, #1024]	; 0x400
	txBuff[1] = 0x50;
	txBuff[2] = 0x52;
	txBuff[3] = 0x43;
     4ea:	2743      	movs	r7, #67	; 0x43

void RS422::runDualoutput()
{
	// PREAMBLE
	txBuff[0] = 0x56;
	txBuff[1] = 0x50;
     4ec:	f880 1401 	strb.w	r1, [r0, #1025]	; 0x401
	txBuff[26] = 0x00;
	txBuff[27] = 0x00;

	//////////////////////////////////////////////////
	// Payload struct
	txBuff[28] = 1;
     4f0:	2401      	movs	r4, #1
void RS422::runDualoutput()
{
	// PREAMBLE
	txBuff[0] = 0x56;
	txBuff[1] = 0x50;
	txBuff[2] = 0x52;
     4f2:	f880 5402 	strb.w	r5, [r0, #1026]	; 0x402
	txBuff[31] = 0;

	//////////////////////////////////////////////////

	uint32_t CRC_Data = 0;
	CRC_Data = Viper_CalcCRC_Bytes(txBuff, 32);
     4f6:	f500 6180 	add.w	r1, r0, #1024	; 0x400
	txBuff[0] = 0x56;
	txBuff[1] = 0x50;
	txBuff[2] = 0x52;
	txBuff[3] = 0x43;

	txBuff[4] = 0x1C;	// Size
     4fa:	f880 3404 	strb.w	r3, [r0, #1028]	; 0x404
     4fe:	f200 35ff 	addw	r5, r0, #1023	; 0x3ff
	txBuff[8] = 0x00;
	txBuff[9] = 0x00;
	txBuff[10] = 0x00;
	txBuff[11] = 0x00;

	txBuff[12] = 0x0D;
     502:	f880 640c 	strb.w	r6, [r0, #1036]	; 0x40c
     506:	f200 4c1f 	addw	ip, r0, #1055	; 0x41f
uint32_t RS422::Viper_CalcCRC_Bytes(uint8_t *data, uint32_t count)
{
	uint32_t crc;
	uint32_t n;

	crc = 0;
     50a:	4613      	mov	r3, r2
     50c:	4e2f      	ldr	r6, [pc, #188]	; (5cc <RS422::runDualoutput()+0xf4>)
{
	// PREAMBLE
	txBuff[0] = 0x56;
	txBuff[1] = 0x50;
	txBuff[2] = 0x52;
	txBuff[3] = 0x43;
     50e:	f880 7403 	strb.w	r7, [r0, #1027]	; 0x403
	txBuff[26] = 0x00;
	txBuff[27] = 0x00;

	//////////////////////////////////////////////////
	// Payload struct
	txBuff[28] = 1;
     512:	f880 441c 	strb.w	r4, [r0, #1052]	; 0x41c
	txBuff[1] = 0x50;
	txBuff[2] = 0x52;
	txBuff[3] = 0x43;

	txBuff[4] = 0x1C;	// Size
	txBuff[5] = 0x00;
     516:	f880 2405 	strb.w	r2, [r0, #1029]	; 0x405
	txBuff[6] = 0x00;
     51a:	f880 2406 	strb.w	r2, [r0, #1030]	; 0x406
	txBuff[7] = 0x00;
     51e:	f880 2407 	strb.w	r2, [r0, #1031]	; 0x407

	//////////////////////////////////////////////////

	txBuff[8] = 0x00;
     522:	f880 2408 	strb.w	r2, [r0, #1032]	; 0x408
	txBuff[9] = 0x00;
     526:	f880 2409 	strb.w	r2, [r0, #1033]	; 0x409
	txBuff[10] = 0x00;
     52a:	f880 240a 	strb.w	r2, [r0, #1034]	; 0x40a
	txBuff[11] = 0x00;
     52e:	f880 240b 	strb.w	r2, [r0, #1035]	; 0x40b

	txBuff[12] = 0x0D;
	txBuff[13] = 0x00;
     532:	f880 240d 	strb.w	r2, [r0, #1037]	; 0x40d
	txBuff[14] = 0x00;
     536:	f880 240e 	strb.w	r2, [r0, #1038]	; 0x40e
	txBuff[15] = 0x00;
     53a:	f880 240f 	strb.w	r2, [r0, #1039]	; 0x40f

	txBuff[16] = 0x00;
     53e:	f880 2410 	strb.w	r2, [r0, #1040]	; 0x410
	txBuff[17] = 0x00;
     542:	f880 2411 	strb.w	r2, [r0, #1041]	; 0x411
	txBuff[18] = 0x00;
     546:	f880 2412 	strb.w	r2, [r0, #1042]	; 0x412
	txBuff[19] = 0x00;
     54a:	f880 2413 	strb.w	r2, [r0, #1043]	; 0x413

	txBuff[20] = 0x00;
     54e:	f880 2414 	strb.w	r2, [r0, #1044]	; 0x414
	txBuff[21] = 0x00;
     552:	f880 2415 	strb.w	r2, [r0, #1045]	; 0x415
	txBuff[22] = 0x00;
     556:	f880 2416 	strb.w	r2, [r0, #1046]	; 0x416
	txBuff[23] = 0x00;
     55a:	f880 2417 	strb.w	r2, [r0, #1047]	; 0x417

	txBuff[24] = 0x00;
     55e:	f880 2418 	strb.w	r2, [r0, #1048]	; 0x418
	txBuff[25] = 0x00;
     562:	f880 2419 	strb.w	r2, [r0, #1049]	; 0x419
	txBuff[26] = 0x00;
     566:	f880 241a 	strb.w	r2, [r0, #1050]	; 0x41a
	txBuff[27] = 0x00;
     56a:	f880 241b 	strb.w	r2, [r0, #1051]	; 0x41b

	//////////////////////////////////////////////////
	// Payload struct
	txBuff[28] = 1;
	txBuff[29] = 0;
     56e:	f880 241d 	strb.w	r2, [r0, #1053]	; 0x41d
	txBuff[30] = 0;
     572:	f880 241e 	strb.w	r2, [r0, #1054]	; 0x41e
	txBuff[31] = 0;
     576:	f880 241f 	strb.w	r2, [r0, #1055]	; 0x41f
}

void RS422::crc16(uint32_t * crc, uint32_t data)
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
     57a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
	*crc >>= 8;
     57e:	0a1a      	lsrs	r2, r3, #8
}

void RS422::crc16(uint32_t * crc, uint32_t data)
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
     580:	4063      	eors	r3, r4
     582:	b2dc      	uxtb	r4, r3
	*crc >>= 8;

	if (op[data & 0xf] ^ op[data >> 4])
     584:	f003 030f 	and.w	r3, r3, #15
     588:	0927      	lsrs	r7, r4, #4
     58a:	f816 e003 	ldrb.w	lr, [r6, r3]
		*crc ^= 0xc001;

	data <<= 6;
	*crc ^= data;
	data <<= 1;
	*crc ^= data;
     58e:	01e3      	lsls	r3, r4, #7
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
	*crc >>= 8;

	if (op[data & 0xf] ^ op[data >> 4])
     590:	5df7      	ldrb	r7, [r6, r7]
		*crc ^= 0xc001;

	data <<= 6;
	*crc ^= data;
	data <<= 1;
	*crc ^= data;
     592:	ea83 1384 	eor.w	r3, r3, r4, lsl #6
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
	*crc >>= 8;

	if (op[data & 0xf] ^ op[data >> 4])
     596:	45be      	cmp	lr, r7
     598:	d003      	beq.n	5a2 <RS422::runDualoutput()+0xca>
		*crc ^= 0xc001;
     59a:	f482 4240 	eor.w	r2, r2, #49152	; 0xc000
     59e:	f082 0201 	eor.w	r2, r2, #1
{
	uint32_t crc;
	uint32_t n;

	crc = 0;
	for (n = 0; n < count; n++)
     5a2:	45ac      	cmp	ip, r5
		*crc ^= 0xc001;

	data <<= 6;
	*crc ^= data;
	data <<= 1;
	*crc ^= data;
     5a4:	ea83 0302 	eor.w	r3, r3, r2
{
	uint32_t crc;
	uint32_t n;

	crc = 0;
	for (n = 0; n < count; n++)
     5a8:	d1e7      	bne.n	57a <RS422::runDualoutput()+0xa2>
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	txBuff[32] = CRCDataCalc[0];
	txBuff[33] = CRCDataCalc[1];
	txBuff[34] = CRCDataCalc[2];
     5aa:	2400      	movs	r4, #0
	CRCDataCalc[1] = (CRC_Data & 0x0000FF00) >> 8;
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	txBuff[32] = CRCDataCalc[0];
	txBuff[33] = CRCDataCalc[1];
     5ac:	0a1a      	lsrs	r2, r3, #8
	CRCDataCalc[0] = (CRC_Data & 0x000000FF) >> 0;
	CRCDataCalc[1] = (CRC_Data & 0x0000FF00) >> 8;
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	txBuff[32] = CRCDataCalc[0];
     5ae:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
	txBuff[33] = CRCDataCalc[1];
     5b2:	f880 2421 	strb.w	r2, [r0, #1057]	; 0x421
	txBuff[34] = CRCDataCalc[2];
	txBuff[35] = CRCDataCalc[3];


	RS422_Serial.write(txBuff, 36);
     5b6:	2224      	movs	r2, #36	; 0x24
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	txBuff[32] = CRCDataCalc[0];
	txBuff[33] = CRCDataCalc[1];
	txBuff[34] = CRCDataCalc[2];
     5b8:	f880 4422 	strb.w	r4, [r0, #1058]	; 0x422
	txBuff[35] = CRCDataCalc[3];
     5bc:	f880 4423 	strb.w	r4, [r0, #1059]	; 0x423


	RS422_Serial.write(txBuff, 36);
     5c0:	4803      	ldr	r0, [pc, #12]	; (5d0 <RS422::runDualoutput()+0xf8>)
}
     5c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	txBuff[33] = CRCDataCalc[1];
	txBuff[34] = CRCDataCalc[2];
	txBuff[35] = CRCDataCalc[3];


	RS422_Serial.write(txBuff, 36);
     5c6:	f002 b961 	b.w	288c <Print::write(unsigned char const*, unsigned int)>
     5ca:	bf00      	nop
     5cc:	200000b0 	.word	0x200000b0
     5d0:	20000474 	.word	0x20000474

000005d4 <RS422::startPNO()>:
}


void RS422::startPNO()
{
     5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	txBuff[2] = HEADER_R;
	txBuff[3] = HEADER_C;

	// SIZE
	txBuff[4] = 0x1C;
	txBuff[5] = 0x00;
     5d6:	2200      	movs	r2, #0


void RS422::startPNO()
{
	// PREAMBLE
	txBuff[0] = HEADER_V;
     5d8:	2156      	movs	r1, #86	; 0x56
	txBuff[1] = HEADER_P;
     5da:	2550      	movs	r5, #80	; 0x50
	txBuff[2] = HEADER_R;
	txBuff[3] = HEADER_C;
     5dc:	2343      	movs	r3, #67	; 0x43

	// SIZE
	txBuff[4] = 0x1C;
     5de:	261c      	movs	r6, #28


void RS422::startPNO()
{
	// PREAMBLE
	txBuff[0] = HEADER_V;
     5e0:	f880 1400 	strb.w	r1, [r0, #1024]	; 0x400
	txBuff[1] = HEADER_P;
     5e4:	f880 5401 	strb.w	r5, [r0, #1025]	; 0x401
	txBuff[2] = HEADER_R;
     5e8:	2752      	movs	r7, #82	; 0x52
	txBuff[3] = HEADER_C;
     5ea:	f880 3403 	strb.w	r3, [r0, #1027]	; 0x403
	txBuff[9] = 0x00;
	txBuff[10] = 0x00;
	txBuff[11] = 0x00;

	// CMD
	txBuff[12] = CMD_CONTINUOUS_PNO;
     5ee:	2413      	movs	r4, #19
	txBuff[1] = HEADER_P;
	txBuff[2] = HEADER_R;
	txBuff[3] = HEADER_C;

	// SIZE
	txBuff[4] = 0x1C;
     5f0:	f880 6404 	strb.w	r6, [r0, #1028]	; 0x404
	txBuff[29] = 0x00;
	txBuff[30] = 0x00;
	txBuff[31] = 0x00;

	uint32_t CRC_Data = 0;
	CRC_Data = Viper_CalcCRC_Bytes(txBuff, 32);
     5f4:	f500 6180 	add.w	r1, r0, #1024	; 0x400
     5f8:	f200 35ff 	addw	r5, r0, #1023	; 0x3ff
     5fc:	f200 4c1f 	addw	ip, r0, #1055	; 0x41f
uint32_t RS422::Viper_CalcCRC_Bytes(uint8_t *data, uint32_t count)
{
	uint32_t crc;
	uint32_t n;

	crc = 0;
     600:	4613      	mov	r3, r2
     602:	4e30      	ldr	r6, [pc, #192]	; (6c4 <RS422::startPNO()+0xf0>)
void RS422::startPNO()
{
	// PREAMBLE
	txBuff[0] = HEADER_V;
	txBuff[1] = HEADER_P;
	txBuff[2] = HEADER_R;
     604:	f880 7402 	strb.w	r7, [r0, #1026]	; 0x402
	txBuff[9] = 0x00;
	txBuff[10] = 0x00;
	txBuff[11] = 0x00;

	// CMD
	txBuff[12] = CMD_CONTINUOUS_PNO;
     608:	f880 440c 	strb.w	r4, [r0, #1036]	; 0x40c
	txBuff[2] = HEADER_R;
	txBuff[3] = HEADER_C;

	// SIZE
	txBuff[4] = 0x1C;
	txBuff[5] = 0x00;
     60c:	f880 2405 	strb.w	r2, [r0, #1029]	; 0x405
	txBuff[6] = 0x00;
     610:	f880 2406 	strb.w	r2, [r0, #1030]	; 0x406
	txBuff[7] = 0x00;
     614:	f880 2407 	strb.w	r2, [r0, #1031]	; 0x407

	// SEUID
	txBuff[8] = 0x00;
     618:	f880 2408 	strb.w	r2, [r0, #1032]	; 0x408
	txBuff[9] = 0x00;
     61c:	f880 2409 	strb.w	r2, [r0, #1033]	; 0x409
	txBuff[10] = 0x00;
     620:	f880 240a 	strb.w	r2, [r0, #1034]	; 0x40a
	txBuff[11] = 0x00;
     624:	f880 240b 	strb.w	r2, [r0, #1035]	; 0x40b

	// CMD
	txBuff[12] = CMD_CONTINUOUS_PNO;
	txBuff[13] = 0x00;
     628:	f880 240d 	strb.w	r2, [r0, #1037]	; 0x40d
	txBuff[14] = 0x00;
     62c:	f880 240e 	strb.w	r2, [r0, #1038]	; 0x40e
	txBuff[15] = 0x00;
     630:	f880 240f 	strb.w	r2, [r0, #1039]	; 0x40f

	// ACTION
	txBuff[16] = CMD_ACTION_SET;
     634:	f880 2410 	strb.w	r2, [r0, #1040]	; 0x410
	txBuff[17] = 0x00;
     638:	f880 2411 	strb.w	r2, [r0, #1041]	; 0x411
	txBuff[18] = 0x00;
     63c:	f880 2412 	strb.w	r2, [r0, #1042]	; 0x412
	txBuff[19] = 0x00;
     640:	f880 2413 	strb.w	r2, [r0, #1043]	; 0x413

	// ARG1
	txBuff[20] = 0x00;
     644:	f880 2414 	strb.w	r2, [r0, #1044]	; 0x414
	txBuff[21] = 0x00;
     648:	f880 2415 	strb.w	r2, [r0, #1045]	; 0x415
	txBuff[22] = 0x00;
     64c:	f880 2416 	strb.w	r2, [r0, #1046]	; 0x416
	txBuff[23] = 0x00;
     650:	f880 2417 	strb.w	r2, [r0, #1047]	; 0x417

	// ARG2
	txBuff[24] = 0x00;
     654:	f880 2418 	strb.w	r2, [r0, #1048]	; 0x418
	txBuff[25] = 0x00;
     658:	f880 2419 	strb.w	r2, [r0, #1049]	; 0x419
	txBuff[26] = 0x00;
     65c:	f880 241a 	strb.w	r2, [r0, #1050]	; 0x41a
	txBuff[27] = 0x00;
     660:	f880 241b 	strb.w	r2, [r0, #1051]	; 0x41b

	// Command Payload
	txBuff[28] = 0x00;
     664:	f880 241c 	strb.w	r2, [r0, #1052]	; 0x41c
	txBuff[29] = 0x00;
     668:	f880 241d 	strb.w	r2, [r0, #1053]	; 0x41d
	txBuff[30] = 0x00;
     66c:	f880 241e 	strb.w	r2, [r0, #1054]	; 0x41e
	txBuff[31] = 0x00;
     670:	f880 241f 	strb.w	r2, [r0, #1055]	; 0x41f
}

void RS422::crc16(uint32_t * crc, uint32_t data)
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
     674:	f815 4f01 	ldrb.w	r4, [r5, #1]!
	*crc >>= 8;
     678:	0a1a      	lsrs	r2, r3, #8
}

void RS422::crc16(uint32_t * crc, uint32_t data)
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
     67a:	4063      	eors	r3, r4
     67c:	b2dc      	uxtb	r4, r3
	*crc >>= 8;

	if (op[data & 0xf] ^ op[data >> 4])
     67e:	f003 030f 	and.w	r3, r3, #15
     682:	0927      	lsrs	r7, r4, #4
     684:	f816 e003 	ldrb.w	lr, [r6, r3]
		*crc ^= 0xc001;

	data <<= 6;
	*crc ^= data;
	data <<= 1;
	*crc ^= data;
     688:	01e3      	lsls	r3, r4, #7
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
	*crc >>= 8;

	if (op[data & 0xf] ^ op[data >> 4])
     68a:	5df7      	ldrb	r7, [r6, r7]
		*crc ^= 0xc001;

	data <<= 6;
	*crc ^= data;
	data <<= 1;
	*crc ^= data;
     68c:	ea83 1384 	eor.w	r3, r3, r4, lsl #6
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
	*crc >>= 8;

	if (op[data & 0xf] ^ op[data >> 4])
     690:	45be      	cmp	lr, r7
     692:	d003      	beq.n	69c <RS422::startPNO()+0xc8>
		*crc ^= 0xc001;
     694:	f482 4240 	eor.w	r2, r2, #49152	; 0xc000
     698:	f082 0201 	eor.w	r2, r2, #1
{
	uint32_t crc;
	uint32_t n;

	crc = 0;
	for (n = 0; n < count; n++)
     69c:	45ac      	cmp	ip, r5
		*crc ^= 0xc001;

	data <<= 6;
	*crc ^= data;
	data <<= 1;
	*crc ^= data;
     69e:	ea83 0302 	eor.w	r3, r3, r2
{
	uint32_t crc;
	uint32_t n;

	crc = 0;
	for (n = 0; n < count; n++)
     6a2:	d1e7      	bne.n	674 <RS422::startPNO()+0xa0>
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	txBuff[32] = CRCDataCalc[0];
	txBuff[33] = CRCDataCalc[1];
	txBuff[34] = CRCDataCalc[2];
     6a4:	2400      	movs	r4, #0
	CRCDataCalc[1] = (CRC_Data & 0x0000FF00) >> 8;
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	txBuff[32] = CRCDataCalc[0];
	txBuff[33] = CRCDataCalc[1];
     6a6:	0a1a      	lsrs	r2, r3, #8
	CRCDataCalc[0] = (CRC_Data & 0x000000FF) >> 0;
	CRCDataCalc[1] = (CRC_Data & 0x0000FF00) >> 8;
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	txBuff[32] = CRCDataCalc[0];
     6a8:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
	txBuff[33] = CRCDataCalc[1];
     6ac:	f880 2421 	strb.w	r2, [r0, #1057]	; 0x421
	txBuff[34] = CRCDataCalc[2];
	txBuff[35] = CRCDataCalc[3];


	RS422_Serial.write(txBuff, 36);
     6b0:	2224      	movs	r2, #36	; 0x24
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	txBuff[32] = CRCDataCalc[0];
	txBuff[33] = CRCDataCalc[1];
	txBuff[34] = CRCDataCalc[2];
     6b2:	f880 4422 	strb.w	r4, [r0, #1058]	; 0x422
	txBuff[35] = CRCDataCalc[3];
     6b6:	f880 4423 	strb.w	r4, [r0, #1059]	; 0x423


	RS422_Serial.write(txBuff, 36);
     6ba:	4803      	ldr	r0, [pc, #12]	; (6c8 <RS422::startPNO()+0xf4>)
}
     6bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	txBuff[33] = CRCDataCalc[1];
	txBuff[34] = CRCDataCalc[2];
	txBuff[35] = CRCDataCalc[3];


	RS422_Serial.write(txBuff, 36);
     6c0:	f002 b8e4 	b.w	288c <Print::write(unsigned char const*, unsigned int)>
     6c4:	200000b0 	.word	0x200000b0
     6c8:	20000474 	.word	0x20000474

000006cc <RS422::stopPNO()>:
}

void RS422::stopPNO()
{
     6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	txBuff[2] = HEADER_R;
	txBuff[3] = HEADER_C;

	// SIZE
	txBuff[4] = 0x18;
	txBuff[5] = 0x00;
     6ce:	2200      	movs	r2, #0
}

void RS422::stopPNO()
{
	// PREAMBLE
	txBuff[0] = HEADER_V;
     6d0:	2456      	movs	r4, #86	; 0x56
	txBuff[1] = HEADER_P;
     6d2:	2150      	movs	r1, #80	; 0x50
	txBuff[2] = HEADER_R;
     6d4:	2552      	movs	r5, #82	; 0x52
	txBuff[3] = HEADER_C;

	// SIZE
	txBuff[4] = 0x18;
     6d6:	2318      	movs	r3, #24
	txBuff[9] = 0x00;
	txBuff[10] = 0x00;
	txBuff[11] = 0x00;

	// CMD
	txBuff[12] = CMD_CONTINUOUS_PNO;
     6d8:	2613      	movs	r6, #19
{
	// PREAMBLE
	txBuff[0] = HEADER_V;
	txBuff[1] = HEADER_P;
	txBuff[2] = HEADER_R;
	txBuff[3] = HEADER_C;
     6da:	2743      	movs	r7, #67	; 0x43
}

void RS422::stopPNO()
{
	// PREAMBLE
	txBuff[0] = HEADER_V;
     6dc:	f880 4400 	strb.w	r4, [r0, #1024]	; 0x400
	txBuff[1] = HEADER_P;
     6e0:	f880 1401 	strb.w	r1, [r0, #1025]	; 0x401
	txBuff[13] = 0x00;
	txBuff[14] = 0x00;
	txBuff[15] = 0x00;

	// ACTION
	txBuff[16] = CMD_ACTION_RESET;
     6e4:	2402      	movs	r4, #2
void RS422::stopPNO()
{
	// PREAMBLE
	txBuff[0] = HEADER_V;
	txBuff[1] = HEADER_P;
	txBuff[2] = HEADER_R;
     6e6:	f880 5402 	strb.w	r5, [r0, #1026]	; 0x402
	txBuff[25] = 0x00;
	txBuff[26] = 0x00;
	txBuff[27] = 0x00;

	uint32_t CRC_Data = 0;
	CRC_Data = Viper_CalcCRC_Bytes(txBuff, 28);
     6ea:	f500 6180 	add.w	r1, r0, #1024	; 0x400
	txBuff[1] = HEADER_P;
	txBuff[2] = HEADER_R;
	txBuff[3] = HEADER_C;

	// SIZE
	txBuff[4] = 0x18;
     6ee:	f880 3404 	strb.w	r3, [r0, #1028]	; 0x404
     6f2:	f200 35ff 	addw	r5, r0, #1023	; 0x3ff
	txBuff[9] = 0x00;
	txBuff[10] = 0x00;
	txBuff[11] = 0x00;

	// CMD
	txBuff[12] = CMD_CONTINUOUS_PNO;
     6f6:	f880 640c 	strb.w	r6, [r0, #1036]	; 0x40c
     6fa:	f200 4c1b 	addw	ip, r0, #1051	; 0x41b
uint32_t RS422::Viper_CalcCRC_Bytes(uint8_t *data, uint32_t count)
{
	uint32_t crc;
	uint32_t n;

	crc = 0;
     6fe:	4613      	mov	r3, r2
     700:	4e2b      	ldr	r6, [pc, #172]	; (7b0 <RS422::stopPNO()+0xe4>)
{
	// PREAMBLE
	txBuff[0] = HEADER_V;
	txBuff[1] = HEADER_P;
	txBuff[2] = HEADER_R;
	txBuff[3] = HEADER_C;
     702:	f880 7403 	strb.w	r7, [r0, #1027]	; 0x403
	txBuff[13] = 0x00;
	txBuff[14] = 0x00;
	txBuff[15] = 0x00;

	// ACTION
	txBuff[16] = CMD_ACTION_RESET;
     706:	f880 4410 	strb.w	r4, [r0, #1040]	; 0x410
	txBuff[2] = HEADER_R;
	txBuff[3] = HEADER_C;

	// SIZE
	txBuff[4] = 0x18;
	txBuff[5] = 0x00;
     70a:	f880 2405 	strb.w	r2, [r0, #1029]	; 0x405
	txBuff[6] = 0x00;
     70e:	f880 2406 	strb.w	r2, [r0, #1030]	; 0x406
	txBuff[7] = 0x00;
     712:	f880 2407 	strb.w	r2, [r0, #1031]	; 0x407

	// SEUID
	txBuff[8] = 0x00;
     716:	f880 2408 	strb.w	r2, [r0, #1032]	; 0x408
	txBuff[9] = 0x00;
     71a:	f880 2409 	strb.w	r2, [r0, #1033]	; 0x409
	txBuff[10] = 0x00;
     71e:	f880 240a 	strb.w	r2, [r0, #1034]	; 0x40a
	txBuff[11] = 0x00;
     722:	f880 240b 	strb.w	r2, [r0, #1035]	; 0x40b

	// CMD
	txBuff[12] = CMD_CONTINUOUS_PNO;
	txBuff[13] = 0x00;
     726:	f880 240d 	strb.w	r2, [r0, #1037]	; 0x40d
	txBuff[14] = 0x00;
     72a:	f880 240e 	strb.w	r2, [r0, #1038]	; 0x40e
	txBuff[15] = 0x00;
     72e:	f880 240f 	strb.w	r2, [r0, #1039]	; 0x40f

	// ACTION
	txBuff[16] = CMD_ACTION_RESET;
	txBuff[17] = 0x00;
     732:	f880 2411 	strb.w	r2, [r0, #1041]	; 0x411
	txBuff[18] = 0x00;
     736:	f880 2412 	strb.w	r2, [r0, #1042]	; 0x412
	txBuff[19] = 0x00;
     73a:	f880 2413 	strb.w	r2, [r0, #1043]	; 0x413

	// ARG1
	txBuff[20] = 0x00;
     73e:	f880 2414 	strb.w	r2, [r0, #1044]	; 0x414
	txBuff[21] = 0x00;
     742:	f880 2415 	strb.w	r2, [r0, #1045]	; 0x415
	txBuff[22] = 0x00;
     746:	f880 2416 	strb.w	r2, [r0, #1046]	; 0x416
	txBuff[23] = 0x00;
     74a:	f880 2417 	strb.w	r2, [r0, #1047]	; 0x417

	// ARG2
	txBuff[24] = 0x00;
     74e:	f880 2418 	strb.w	r2, [r0, #1048]	; 0x418
	txBuff[25] = 0x00;
     752:	f880 2419 	strb.w	r2, [r0, #1049]	; 0x419
	txBuff[26] = 0x00;
     756:	f880 241a 	strb.w	r2, [r0, #1050]	; 0x41a
	txBuff[27] = 0x00;
     75a:	f880 241b 	strb.w	r2, [r0, #1051]	; 0x41b
}

void RS422::crc16(uint32_t * crc, uint32_t data)
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
     75e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
	*crc >>= 8;
     762:	0a1a      	lsrs	r2, r3, #8
}

void RS422::crc16(uint32_t * crc, uint32_t data)
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
     764:	4063      	eors	r3, r4
     766:	b2dc      	uxtb	r4, r3
	*crc >>= 8;

	if (op[data & 0xf] ^ op[data >> 4])
     768:	f003 030f 	and.w	r3, r3, #15
     76c:	0927      	lsrs	r7, r4, #4
     76e:	f816 e003 	ldrb.w	lr, [r6, r3]
		*crc ^= 0xc001;

	data <<= 6;
	*crc ^= data;
	data <<= 1;
	*crc ^= data;
     772:	01e3      	lsls	r3, r4, #7
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
	*crc >>= 8;

	if (op[data & 0xf] ^ op[data >> 4])
     774:	5df7      	ldrb	r7, [r6, r7]
		*crc ^= 0xc001;

	data <<= 6;
	*crc ^= data;
	data <<= 1;
	*crc ^= data;
     776:	ea83 1384 	eor.w	r3, r3, r4, lsl #6
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
	*crc >>= 8;

	if (op[data & 0xf] ^ op[data >> 4])
     77a:	45be      	cmp	lr, r7
     77c:	d003      	beq.n	786 <RS422::stopPNO()+0xba>
		*crc ^= 0xc001;
     77e:	f482 4240 	eor.w	r2, r2, #49152	; 0xc000
     782:	f082 0201 	eor.w	r2, r2, #1
{
	uint32_t crc;
	uint32_t n;

	crc = 0;
	for (n = 0; n < count; n++)
     786:	45ac      	cmp	ip, r5
		*crc ^= 0xc001;

	data <<= 6;
	*crc ^= data;
	data <<= 1;
	*crc ^= data;
     788:	ea83 0302 	eor.w	r3, r3, r2
{
	uint32_t crc;
	uint32_t n;

	crc = 0;
	for (n = 0; n < count; n++)
     78c:	d1e7      	bne.n	75e <RS422::stopPNO()+0x92>
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	// CRC
	txBuff[28] = CRCDataCalc[0];
	txBuff[29] = CRCDataCalc[1];
	txBuff[30] = CRCDataCalc[2];
     78e:	2400      	movs	r4, #0
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	// CRC
	txBuff[28] = CRCDataCalc[0];
	txBuff[29] = CRCDataCalc[1];
     790:	0a1a      	lsrs	r2, r3, #8
	CRCDataCalc[1] = (CRC_Data & 0x0000FF00) >> 8;
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	// CRC
	txBuff[28] = CRCDataCalc[0];
     792:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
	txBuff[29] = CRCDataCalc[1];
     796:	f880 241d 	strb.w	r2, [r0, #1053]	; 0x41d
	txBuff[30] = CRCDataCalc[2];
	txBuff[31] = CRCDataCalc[3];


	RS422_Serial.write(txBuff, 32);
     79a:	2220      	movs	r2, #32
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	// CRC
	txBuff[28] = CRCDataCalc[0];
	txBuff[29] = CRCDataCalc[1];
	txBuff[30] = CRCDataCalc[2];
     79c:	f880 441e 	strb.w	r4, [r0, #1054]	; 0x41e
	txBuff[31] = CRCDataCalc[3];
     7a0:	f880 441f 	strb.w	r4, [r0, #1055]	; 0x41f


	RS422_Serial.write(txBuff, 32);
     7a4:	4803      	ldr	r0, [pc, #12]	; (7b4 <RS422::stopPNO()+0xe8>)
}
     7a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	txBuff[29] = CRCDataCalc[1];
	txBuff[30] = CRCDataCalc[2];
	txBuff[31] = CRCDataCalc[3];


	RS422_Serial.write(txBuff, 32);
     7aa:	f002 b86f 	b.w	288c <Print::write(unsigned char const*, unsigned int)>
     7ae:	bf00      	nop
     7b0:	200000b0 	.word	0x200000b0
     7b4:	20000474 	.word	0x20000474

000007b8 <RS422::initContinuousPNO()>:
     7b8:	f7ff bf88 	b.w	6cc <RS422::stopPNO()>

000007bc <RS422::changeViperBaudrate()>:
}

void RS422::changeViperBaudrate()
{
     7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	txBuff[1] = 0x50;
	txBuff[2] = 0x52;
	txBuff[3] = 0x43;

	txBuff[4] = 0x18;
	txBuff[5] = 0x00;
     7be:	2200      	movs	r2, #0
}

void RS422::changeViperBaudrate()
{
	// PREAMBLE
	txBuff[0] = 0x56;
     7c0:	2456      	movs	r4, #86	; 0x56
	txBuff[1] = 0x50;
     7c2:	2150      	movs	r1, #80	; 0x50
	txBuff[2] = 0x52;
     7c4:	2552      	movs	r5, #82	; 0x52
	txBuff[3] = 0x43;

	txBuff[4] = 0x18;
     7c6:	2318      	movs	r3, #24
	txBuff[8] = 0x00;
	txBuff[9] = 0x00;
	txBuff[10] = 0x00;
	txBuff[11] = 0x00;

	txBuff[12] = 0x0E;
     7c8:	260e      	movs	r6, #14
}

void RS422::changeViperBaudrate()
{
	// PREAMBLE
	txBuff[0] = 0x56;
     7ca:	f880 4400 	strb.w	r4, [r0, #1024]	; 0x400
	txBuff[1] = 0x50;
	txBuff[2] = 0x52;
	txBuff[3] = 0x43;
     7ce:	2743      	movs	r7, #67	; 0x43

void RS422::changeViperBaudrate()
{
	// PREAMBLE
	txBuff[0] = 0x56;
	txBuff[1] = 0x50;
     7d0:	f880 1401 	strb.w	r1, [r0, #1025]	; 0x401
	txBuff[27] = 0x00;

	//////////////////////////////////////////////////
	// Payload struct
	txBuff[28] = 0;
	txBuff[29] = 10;
     7d4:	240a      	movs	r4, #10
void RS422::changeViperBaudrate()
{
	// PREAMBLE
	txBuff[0] = 0x56;
	txBuff[1] = 0x50;
	txBuff[2] = 0x52;
     7d6:	f880 5402 	strb.w	r5, [r0, #1026]	; 0x402
	txBuff[31] = 0;

	//////////////////////////////////////////////////

	uint32_t CRC_Data = 0;
	CRC_Data = Viper_CalcCRC_Bytes(txBuff, 32);
     7da:	f500 6180 	add.w	r1, r0, #1024	; 0x400
	txBuff[0] = 0x56;
	txBuff[1] = 0x50;
	txBuff[2] = 0x52;
	txBuff[3] = 0x43;

	txBuff[4] = 0x18;
     7de:	f880 3404 	strb.w	r3, [r0, #1028]	; 0x404
     7e2:	f200 35ff 	addw	r5, r0, #1023	; 0x3ff
	txBuff[8] = 0x00;
	txBuff[9] = 0x00;
	txBuff[10] = 0x00;
	txBuff[11] = 0x00;

	txBuff[12] = 0x0E;
     7e6:	f880 640c 	strb.w	r6, [r0, #1036]	; 0x40c
     7ea:	f200 4c1f 	addw	ip, r0, #1055	; 0x41f
uint32_t RS422::Viper_CalcCRC_Bytes(uint8_t *data, uint32_t count)
{
	uint32_t crc;
	uint32_t n;

	crc = 0;
     7ee:	4613      	mov	r3, r2
     7f0:	4e2f      	ldr	r6, [pc, #188]	; (8b0 <RS422::changeViperBaudrate()+0xf4>)
{
	// PREAMBLE
	txBuff[0] = 0x56;
	txBuff[1] = 0x50;
	txBuff[2] = 0x52;
	txBuff[3] = 0x43;
     7f2:	f880 7403 	strb.w	r7, [r0, #1027]	; 0x403
	txBuff[27] = 0x00;

	//////////////////////////////////////////////////
	// Payload struct
	txBuff[28] = 0;
	txBuff[29] = 10;
     7f6:	f880 441d 	strb.w	r4, [r0, #1053]	; 0x41d
	txBuff[1] = 0x50;
	txBuff[2] = 0x52;
	txBuff[3] = 0x43;

	txBuff[4] = 0x18;
	txBuff[5] = 0x00;
     7fa:	f880 2405 	strb.w	r2, [r0, #1029]	; 0x405
	txBuff[6] = 0x00;
     7fe:	f880 2406 	strb.w	r2, [r0, #1030]	; 0x406
	txBuff[7] = 0x00;
     802:	f880 2407 	strb.w	r2, [r0, #1031]	; 0x407

	txBuff[8] = 0x00;
     806:	f880 2408 	strb.w	r2, [r0, #1032]	; 0x408
	txBuff[9] = 0x00;
     80a:	f880 2409 	strb.w	r2, [r0, #1033]	; 0x409
	txBuff[10] = 0x00;
     80e:	f880 240a 	strb.w	r2, [r0, #1034]	; 0x40a
	txBuff[11] = 0x00;
     812:	f880 240b 	strb.w	r2, [r0, #1035]	; 0x40b

	txBuff[12] = 0x0E;
	txBuff[13] = 0x00;
     816:	f880 240d 	strb.w	r2, [r0, #1037]	; 0x40d
	txBuff[14] = 0x00;
     81a:	f880 240e 	strb.w	r2, [r0, #1038]	; 0x40e
	txBuff[15] = 0x00;
     81e:	f880 240f 	strb.w	r2, [r0, #1039]	; 0x40f

	txBuff[16] = 0x00;
     822:	f880 2410 	strb.w	r2, [r0, #1040]	; 0x410
	txBuff[17] = 0x00;
     826:	f880 2411 	strb.w	r2, [r0, #1041]	; 0x411
	txBuff[18] = 0x00;
     82a:	f880 2412 	strb.w	r2, [r0, #1042]	; 0x412
	txBuff[19] = 0x00;
     82e:	f880 2413 	strb.w	r2, [r0, #1043]	; 0x413

	txBuff[20] = 0x00;
     832:	f880 2414 	strb.w	r2, [r0, #1044]	; 0x414
	txBuff[21] = 0x00;
     836:	f880 2415 	strb.w	r2, [r0, #1045]	; 0x415
	txBuff[22] = 0x00;
     83a:	f880 2416 	strb.w	r2, [r0, #1046]	; 0x416
	txBuff[23] = 0x00;
     83e:	f880 2417 	strb.w	r2, [r0, #1047]	; 0x417

	txBuff[24] = 0x00;
     842:	f880 2418 	strb.w	r2, [r0, #1048]	; 0x418
	txBuff[25] = 0x00;
     846:	f880 2419 	strb.w	r2, [r0, #1049]	; 0x419
	txBuff[26] = 0x00;
     84a:	f880 241a 	strb.w	r2, [r0, #1050]	; 0x41a
	txBuff[27] = 0x00;
     84e:	f880 241b 	strb.w	r2, [r0, #1051]	; 0x41b

	//////////////////////////////////////////////////
	// Payload struct
	txBuff[28] = 0;
     852:	f880 241c 	strb.w	r2, [r0, #1052]	; 0x41c
	txBuff[29] = 10;
	txBuff[30] = 0;
     856:	f880 241e 	strb.w	r2, [r0, #1054]	; 0x41e
	txBuff[31] = 0;
     85a:	f880 241f 	strb.w	r2, [r0, #1055]	; 0x41f
}

void RS422::crc16(uint32_t * crc, uint32_t data)
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
     85e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
	*crc >>= 8;
     862:	0a1a      	lsrs	r2, r3, #8
}

void RS422::crc16(uint32_t * crc, uint32_t data)
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
     864:	4063      	eors	r3, r4
     866:	b2dc      	uxtb	r4, r3
	*crc >>= 8;

	if (op[data & 0xf] ^ op[data >> 4])
     868:	f003 030f 	and.w	r3, r3, #15
     86c:	0927      	lsrs	r7, r4, #4
     86e:	f816 e003 	ldrb.w	lr, [r6, r3]
		*crc ^= 0xc001;

	data <<= 6;
	*crc ^= data;
	data <<= 1;
	*crc ^= data;
     872:	01e3      	lsls	r3, r4, #7
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
	*crc >>= 8;

	if (op[data & 0xf] ^ op[data >> 4])
     874:	5df7      	ldrb	r7, [r6, r7]
		*crc ^= 0xc001;

	data <<= 6;
	*crc ^= data;
	data <<= 1;
	*crc ^= data;
     876:	ea83 1384 	eor.w	r3, r3, r4, lsl #6
{
	static const char op[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
	data = (data ^ (*crc)) & 0xff;
	*crc >>= 8;

	if (op[data & 0xf] ^ op[data >> 4])
     87a:	45be      	cmp	lr, r7
     87c:	d003      	beq.n	886 <RS422::changeViperBaudrate()+0xca>
		*crc ^= 0xc001;
     87e:	f482 4240 	eor.w	r2, r2, #49152	; 0xc000
     882:	f082 0201 	eor.w	r2, r2, #1
{
	uint32_t crc;
	uint32_t n;

	crc = 0;
	for (n = 0; n < count; n++)
     886:	45ac      	cmp	ip, r5
		*crc ^= 0xc001;

	data <<= 6;
	*crc ^= data;
	data <<= 1;
	*crc ^= data;
     888:	ea83 0302 	eor.w	r3, r3, r2
{
	uint32_t crc;
	uint32_t n;

	crc = 0;
	for (n = 0; n < count; n++)
     88c:	d1e7      	bne.n	85e <RS422::changeViperBaudrate()+0xa2>
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	txBuff[32] = CRCDataCalc[0];
	txBuff[33] = CRCDataCalc[1];
	txBuff[34] = CRCDataCalc[2];
     88e:	2400      	movs	r4, #0
	CRCDataCalc[1] = (CRC_Data & 0x0000FF00) >> 8;
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	txBuff[32] = CRCDataCalc[0];
	txBuff[33] = CRCDataCalc[1];
     890:	0a1a      	lsrs	r2, r3, #8
	CRCDataCalc[0] = (CRC_Data & 0x000000FF) >> 0;
	CRCDataCalc[1] = (CRC_Data & 0x0000FF00) >> 8;
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	txBuff[32] = CRCDataCalc[0];
     892:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
	txBuff[33] = CRCDataCalc[1];
     896:	f880 2421 	strb.w	r2, [r0, #1057]	; 0x421
	txBuff[34] = CRCDataCalc[2];
	txBuff[35] = CRCDataCalc[3];


	RS422_Serial.write(txBuff, 36);
     89a:	2224      	movs	r2, #36	; 0x24
	CRCDataCalc[2] = (CRC_Data & 0x00FF0000) >> 16;
	CRCDataCalc[3] = (CRC_Data & 0xFF000000) >> 24;

	txBuff[32] = CRCDataCalc[0];
	txBuff[33] = CRCDataCalc[1];
	txBuff[34] = CRCDataCalc[2];
     89c:	f880 4422 	strb.w	r4, [r0, #1058]	; 0x422
	txBuff[35] = CRCDataCalc[3];
     8a0:	f880 4423 	strb.w	r4, [r0, #1059]	; 0x423


	RS422_Serial.write(txBuff, 36);
     8a4:	4803      	ldr	r0, [pc, #12]	; (8b4 <RS422::changeViperBaudrate()+0xf8>)
}
     8a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	txBuff[33] = CRCDataCalc[1];
	txBuff[34] = CRCDataCalc[2];
	txBuff[35] = CRCDataCalc[3];


	RS422_Serial.write(txBuff, 36);
     8aa:	f001 bfef 	b.w	288c <Print::write(unsigned char const*, unsigned int)>
     8ae:	bf00      	nop
     8b0:	200000b0 	.word	0x200000b0
     8b4:	20000474 	.word	0x20000474

000008b8 <RS422::readPacket()>:
{
//	RS422_Serial.begin(RS422_BAUD_RATE2);
}

void RS422::readPacket()
{
     8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8bc:	4607      	mov	r7, r0
     8be:	b090      	sub	sp, #64	; 0x40
	int dataSize = RS422_Serial.available();
     8c0:	484a      	ldr	r0, [pc, #296]	; (9ec <RS422::readPacket()+0x134>)
     8c2:	f001 fc2f 	bl	2124 <HardwareSerial::available()>

	if (dataSize > 0)
     8c6:	f1b0 0800 	subs.w	r8, r0, #0
     8ca:	f340 8087 	ble.w	9dc <RS422::readPacket()+0x124>
	{
		time = micros();
     8ce:	4d48      	ldr	r5, [pc, #288]	; (9f0 <RS422::readPacket()+0x138>)
     8d0:	f000 f9c4 	bl	c5c <micros>
	long parseInt();
	long parseInt(char skipChar);
	float parseFloat();
	float parseFloat(char skipChar);
	size_t readBytes(char *buffer, size_t length);
	size_t readBytes(uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }
     8d4:	4642      	mov	r2, r8
     8d6:	4639      	mov	r1, r7
     8d8:	6028      	str	r0, [r5, #0]
     8da:	4844      	ldr	r0, [pc, #272]	; (9ec <RS422::readPacket()+0x134>)
     8dc:	f002 f91a 	bl	2b14 <Stream::readBytes(char*, unsigned int)>

		RS422_Serial.readBytes(rxBuff, dataSize);

		// Exception...
		if (decodePos >= BUFFER_SIZE)
     8e0:	f8d7 3c00 	ldr.w	r3, [r7, #3072]	; 0xc00
     8e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     8e8:	da7b      	bge.n	9e2 <RS422::readPacket()+0x12a>
		{
			decodePos = 0;
		}

		memcpy(&packetBuff[decodePos], rxBuff, dataSize);
     8ea:	f503 6000 	add.w	r0, r3, #2048	; 0x800
     8ee:	4642      	mov	r2, r8
     8f0:	4639      	mov	r1, r7
     8f2:	f507 6600 	add.w	r6, r7, #2048	; 0x800
     8f6:	4438      	add	r0, r7

		decodePos = decodePos + dataSize;
     8f8:	2400      	movs	r4, #0
		if (decodePos >= BUFFER_SIZE)
		{
			decodePos = 0;
		}

		memcpy(&packetBuff[decodePos], rxBuff, dataSize);
     8fa:	f000 f87d 	bl	9f8 <memcpy>

		decodePos = decodePos + dataSize;
     8fe:	f8d7 2c00 	ldr.w	r2, [r7, #3072]	; 0xc00
     902:	4633      	mov	r3, r6
     904:	4442      	add	r2, r8
     906:	f8c7 2c00 	str.w	r2, [r7, #3072]	; 0xc00
     90a:	e003      	b.n	914 <RS422::readPacket()+0x5c>

		///////////////////////////////////////////////////


		for (int i = 0; i < BUFFER_SIZE; i++)
     90c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
     910:	4614      	mov	r4, r2
     912:	d063      	beq.n	9dc <RS422::readPacket()+0x124>
		{
			if (packetBuff[i] == HEADER_V && packetBuff[i + 1] == HEADER_P && packetBuff[i + 2] == HEADER_R && packetBuff[i + 3] == HEADER_P &&
     914:	f813 1b01 	ldrb.w	r1, [r3], #1
     918:	1c62      	adds	r2, r4, #1
     91a:	2956      	cmp	r1, #86	; 0x56
     91c:	d1f6      	bne.n	90c <RS422::readPacket()+0x54>
     91e:	7819      	ldrb	r1, [r3, #0]
     920:	2950      	cmp	r1, #80	; 0x50
     922:	d1f3      	bne.n	90c <RS422::readPacket()+0x54>
     924:	7859      	ldrb	r1, [r3, #1]
     926:	2952      	cmp	r1, #82	; 0x52
     928:	d1f0      	bne.n	90c <RS422::readPacket()+0x54>
     92a:	7899      	ldrb	r1, [r3, #2]
     92c:	2950      	cmp	r1, #80	; 0x50
     92e:	d1ed      	bne.n	90c <RS422::readPacket()+0x54>
     930:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
     934:	f104 083c 	add.w	r8, r4, #60	; 0x3c
     938:	2956      	cmp	r1, #86	; 0x56
     93a:	d1e7      	bne.n	90c <RS422::readPacket()+0x54>
				packetBuff[i + 60] == HEADER_V && packetBuff[i + 61] == HEADER_P && packetBuff[i + 62] == HEADER_R && packetBuff[i + 63] == HEADER_P)	// Header			
     93c:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
     940:	2950      	cmp	r1, #80	; 0x50
     942:	d1e3      	bne.n	90c <RS422::readPacket()+0x54>
     944:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
     948:	2952      	cmp	r1, #82	; 0x52
     94a:	d1df      	bne.n	90c <RS422::readPacket()+0x54>
     94c:	f893 103e 	ldrb.w	r1, [r3, #62]	; 0x3e
     950:	2950      	cmp	r1, #80	; 0x50
     952:	d1db      	bne.n	90c <RS422::readPacket()+0x54>
			{

				uint8_t dataPacket[PNO_FRAME_BYTE_SIZE] = { 0, };
     954:	223c      	movs	r2, #60	; 0x3c
     956:	2100      	movs	r1, #0
     958:	a801      	add	r0, sp, #4
     95a:	f002 ff39 	bl	37d0 <memset>
     95e:	f204 73ff 	addw	r3, r4, #2047	; 0x7ff
     962:	f10d 0203 	add.w	r2, sp, #3
     966:	f10d 013f 	add.w	r1, sp, #63	; 0x3f
     96a:	443b      	add	r3, r7

				for (int j = 0; j < PNO_FRAME_BYTE_SIZE; j++)
				{
					dataPacket[j] = packetBuff[i + j];
     96c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     970:	f802 0f01 	strb.w	r0, [r2, #1]!
				packetBuff[i + 60] == HEADER_V && packetBuff[i + 61] == HEADER_P && packetBuff[i + 62] == HEADER_R && packetBuff[i + 63] == HEADER_P)	// Header			
			{

				uint8_t dataPacket[PNO_FRAME_BYTE_SIZE] = { 0, };

				for (int j = 0; j < PNO_FRAME_BYTE_SIZE; j++)
     974:	428a      	cmp	r2, r1
     976:	d1f9      	bne.n	96c <RS422::readPacket()+0xb4>
				{
					dataPacket[j] = packetBuff[i + j];
				}

				memcpy(&standardFrame.frameNumber, &dataPacket[12], 4);
     978:	9804      	ldr	r0, [sp, #16]
				memcpy(&standardFrame.ro, &dataPacket[48], 4);

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////

				memset(&packetBuff[i], 0, 60);
     97a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
     97e:	223c      	movs	r2, #60	; 0x3c
     980:	2100      	movs	r1, #0
				for (int j = 0; j < PNO_FRAME_BYTE_SIZE; j++)
				{
					dataPacket[j] = packetBuff[i + j];
				}

				memcpy(&standardFrame.frameNumber, &dataPacket[12], 4);
     982:	f8c7 0c08 	str.w	r0, [r7, #3080]	; 0xc08
				memcpy(&standardFrame.ro, &dataPacket[48], 4);

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////

				memset(&packetBuff[i], 0, 60);
     986:	443c      	add	r4, r7
					dataPacket[j] = packetBuff[i + j];
				}

				memcpy(&standardFrame.frameNumber, &dataPacket[12], 4);

				memcpy(&standardFrame.x, &dataPacket[28], 4);
     988:	9808      	ldr	r0, [sp, #32]
     98a:	f8c7 0c20 	str.w	r0, [r7, #3104]	; 0xc20
				memcpy(&standardFrame.y, &dataPacket[32], 4);
     98e:	9809      	ldr	r0, [sp, #36]	; 0x24
     990:	f8c7 0c24 	str.w	r0, [r7, #3108]	; 0xc24
				memcpy(&standardFrame.z, &dataPacket[36], 4);
     994:	980a      	ldr	r0, [sp, #40]	; 0x28
     996:	f8c7 0c28 	str.w	r0, [r7, #3112]	; 0xc28
				memcpy(&standardFrame.az, &dataPacket[40], 4);
     99a:	980b      	ldr	r0, [sp, #44]	; 0x2c
     99c:	f8c7 0c2c 	str.w	r0, [r7, #3116]	; 0xc2c
				memcpy(&standardFrame.el, &dataPacket[44], 4);
     9a0:	980c      	ldr	r0, [sp, #48]	; 0x30
     9a2:	f8c7 0c30 	str.w	r0, [r7, #3120]	; 0xc30
				memcpy(&standardFrame.ro, &dataPacket[48], 4);
     9a6:	980d      	ldr	r0, [sp, #52]	; 0x34
     9a8:	f8c7 0c34 	str.w	r0, [r7, #3124]	; 0xc34

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////

				memset(&packetBuff[i], 0, 60);
     9ac:	4620      	mov	r0, r4
     9ae:	f002 ff0f 	bl	37d0 <memset>
				memcpy(&packetBuff[i], &packetBuff[i + 60], 100);
     9b2:	f508 6100 	add.w	r1, r8, #2048	; 0x800
     9b6:	2264      	movs	r2, #100	; 0x64
     9b8:	4620      	mov	r0, r4
     9ba:	4439      	add	r1, r7
     9bc:	f000 f81c 	bl	9f8 <memcpy>
				memcpy(&packetBuff[0], &packetBuff[i], 100);
     9c0:	2264      	movs	r2, #100	; 0x64
     9c2:	4621      	mov	r1, r4
     9c4:	4630      	mov	r0, r6
     9c6:	f000 f817 	bl	9f8 <memcpy>

				decodePos = 6;
     9ca:	2306      	movs	r3, #6
     9cc:	f8c7 3c00 	str.w	r3, [r7, #3072]	; 0xc00

				timeCheck = micros() - time;
     9d0:	f000 f944 	bl	c5c <micros>
     9d4:	682b      	ldr	r3, [r5, #0]
     9d6:	4a07      	ldr	r2, [pc, #28]	; (9f4 <RS422::readPacket()+0x13c>)
     9d8:	1ac0      	subs	r0, r0, r3
     9da:	6010      	str	r0, [r2, #0]
			}
		}

	}

}
     9dc:	b010      	add	sp, #64	; 0x40
     9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		RS422_Serial.readBytes(rxBuff, dataSize);

		// Exception...
		if (decodePos >= BUFFER_SIZE)
		{
			decodePos = 0;
     9e2:	2200      	movs	r2, #0
     9e4:	4613      	mov	r3, r2
     9e6:	f8c7 2c00 	str.w	r2, [r7, #3072]	; 0xc00
     9ea:	e77e      	b.n	8ea <RS422::readPacket()+0x32>
     9ec:	20000474 	.word	0x20000474
     9f0:	20001a2c 	.word	0x20001a2c
     9f4:	20001a28 	.word	0x20001a28

000009f8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
     9f8:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
     9fa:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
     9fe:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
     a02:	d16d      	bne.n	ae0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
     a04:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
     a06:	d341      	bcc.n	a8c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
     a08:	f851 3b04 	ldr.w	r3, [r1], #4
     a0c:	f840 3b04 	str.w	r3, [r0], #4
     a10:	f851 3b04 	ldr.w	r3, [r1], #4
     a14:	f840 3b04 	str.w	r3, [r0], #4
     a18:	f851 3b04 	ldr.w	r3, [r1], #4
     a1c:	f840 3b04 	str.w	r3, [r0], #4
     a20:	f851 3b04 	ldr.w	r3, [r1], #4
     a24:	f840 3b04 	str.w	r3, [r0], #4
     a28:	f851 3b04 	ldr.w	r3, [r1], #4
     a2c:	f840 3b04 	str.w	r3, [r0], #4
     a30:	f851 3b04 	ldr.w	r3, [r1], #4
     a34:	f840 3b04 	str.w	r3, [r0], #4
     a38:	f851 3b04 	ldr.w	r3, [r1], #4
     a3c:	f840 3b04 	str.w	r3, [r0], #4
     a40:	f851 3b04 	ldr.w	r3, [r1], #4
     a44:	f840 3b04 	str.w	r3, [r0], #4
     a48:	f851 3b04 	ldr.w	r3, [r1], #4
     a4c:	f840 3b04 	str.w	r3, [r0], #4
     a50:	f851 3b04 	ldr.w	r3, [r1], #4
     a54:	f840 3b04 	str.w	r3, [r0], #4
     a58:	f851 3b04 	ldr.w	r3, [r1], #4
     a5c:	f840 3b04 	str.w	r3, [r0], #4
     a60:	f851 3b04 	ldr.w	r3, [r1], #4
     a64:	f840 3b04 	str.w	r3, [r0], #4
     a68:	f851 3b04 	ldr.w	r3, [r1], #4
     a6c:	f840 3b04 	str.w	r3, [r0], #4
     a70:	f851 3b04 	ldr.w	r3, [r1], #4
     a74:	f840 3b04 	str.w	r3, [r0], #4
     a78:	f851 3b04 	ldr.w	r3, [r1], #4
     a7c:	f840 3b04 	str.w	r3, [r0], #4
     a80:	f851 3b04 	ldr.w	r3, [r1], #4
     a84:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
     a88:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
     a8a:	d2bd      	bcs.n	a08 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
     a8c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
     a8e:	d311      	bcc.n	ab4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
     a90:	f851 3b04 	ldr.w	r3, [r1], #4
     a94:	f840 3b04 	str.w	r3, [r0], #4
     a98:	f851 3b04 	ldr.w	r3, [r1], #4
     a9c:	f840 3b04 	str.w	r3, [r0], #4
     aa0:	f851 3b04 	ldr.w	r3, [r1], #4
     aa4:	f840 3b04 	str.w	r3, [r0], #4
     aa8:	f851 3b04 	ldr.w	r3, [r1], #4
     aac:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
     ab0:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
     ab2:	d2ed      	bcs.n	a90 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
     ab4:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
     ab6:	d305      	bcc.n	ac4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
     ab8:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
     abc:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
     ac0:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
     ac2:	d2f9      	bcs.n	ab8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
     ac4:	3204      	adds	r2, #4
	beq	.Ldone
     ac6:	d008      	beq.n	ada <memcpy+0xe2>

	lsls	r2, r2, #31
     ac8:	07d2      	lsls	r2, r2, #31
	itt ne
     aca:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
     acc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
     ad0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
     ad4:	d301      	bcc.n	ada <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
     ad6:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
     ad8:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
     ada:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
     adc:	4770      	bx	lr
     ade:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
     ae0:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
     ae2:	d313      	bcc.n	b0c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
     ae4:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
     ae6:	d08d      	beq.n	a04 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
     ae8:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
     aec:	d08a      	beq.n	a04 <memcpy+0xc>

	rsb	r3, #4
     aee:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
     af2:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
     af4:	07db      	lsls	r3, r3, #31
	itt ne
     af6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
     af8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
     afc:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
     b00:	d380      	bcc.n	a04 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
     b02:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
     b06:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
     b0a:	e77b      	b.n	a04 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
     b0c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
     b0e:	d3d9      	bcc.n	ac4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
     b10:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
     b12:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
     b16:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
     b1a:	d2f9      	bcs.n	b10 <memcpy+0x118>

	ldrb	r3, [r1]
     b1c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
     b1e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
     b20:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
     b22:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
     b24:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
     b26:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
     b28:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
     b2a:	4770      	bx	lr

00000b2c <analogRead>:
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
     b2c:	281c      	cmp	r0, #28
     b2e:	d819      	bhi.n	b64 <analogRead+0x38>
	if (calibrating) wait_for_cal();
     b30:	4913      	ldr	r1, [pc, #76]	; (b80 <analogRead+0x54>)
     b32:	780b      	ldrb	r3, [r1, #0]
     b34:	b14b      	cbz	r3, b4a <analogRead+0x1e>


static void wait_for_cal(void)
{
	//printf("wait_for_cal\n");
	while (ADC1_GC & ADC_GC_CAL) ;
     b36:	4a13      	ldr	r2, [pc, #76]	; (b84 <analogRead+0x58>)
     b38:	6c93      	ldr	r3, [r2, #72]	; 0x48
     b3a:	061b      	lsls	r3, r3, #24
     b3c:	d4fc      	bmi.n	b38 <analogRead+0xc>
	while (ADC2_GC & ADC_GC_CAL) ;
     b3e:	4a12      	ldr	r2, [pc, #72]	; (b88 <analogRead+0x5c>)
     b40:	6c93      	ldr	r3, [r2, #72]	; 0x48
     b42:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     b46:	d1fb      	bne.n	b40 <analogRead+0x14>
	// TODO: check CALF, but what do to about CAL failure?
	calibrating = 0;
     b48:	700b      	strb	r3, [r1, #0]

int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
     b4a:	4b10      	ldr	r3, [pc, #64]	; (b8c <analogRead+0x60>)
     b4c:	5c1b      	ldrb	r3, [r3, r0]
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
     b4e:	061a      	lsls	r2, r3, #24
     b50:	d40a      	bmi.n	b68 <analogRead+0x3c>
		ADC1_HC0 = ch;
     b52:	4a0c      	ldr	r2, [pc, #48]	; (b84 <analogRead+0x58>)
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
     b54:	4611      	mov	r1, r2
	if (calibrating) wait_for_cal();
	uint8_t ch = pin_to_channel[pin];
//	printf("%d\n", ch);
//	if (ch > 15) return 0;
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
     b56:	6013      	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
     b58:	6a0b      	ldr	r3, [r1, #32]
     b5a:	4a0a      	ldr	r2, [pc, #40]	; (b84 <analogRead+0x58>)
     b5c:	07d8      	lsls	r0, r3, #31
     b5e:	d5fb      	bpl.n	b58 <analogRead+0x2c>
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
     b60:	6a50      	ldr	r0, [r2, #36]	; 0x24
     b62:	4770      	bx	lr
}


int analogRead(uint8_t pin)
{
	if (pin > sizeof(pin_to_channel)) return 0;
     b64:	2000      	movs	r0, #0
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
		return ADC2_R0;
	}
}
     b66:	4770      	bx	lr
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
     b68:	4a07      	ldr	r2, [pc, #28]	; (b88 <analogRead+0x5c>)
     b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
     b6e:	4611      	mov	r1, r2
	if(!(ch & 0x80)) {
		ADC1_HC0 = ch;
		while (!(ADC1_HS & ADC_HS_COCO0)) ; // wait
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
     b70:	6013      	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) ; // wait
     b72:	6a0b      	ldr	r3, [r1, #32]
     b74:	4a04      	ldr	r2, [pc, #16]	; (b88 <analogRead+0x5c>)
     b76:	07db      	lsls	r3, r3, #31
     b78:	d5fb      	bpl.n	b72 <analogRead+0x46>
		return ADC2_R0;
     b7a:	6a50      	ldr	r0, [r2, #36]	; 0x24
     b7c:	4770      	bx	lr
     b7e:	bf00      	nop
     b80:	20001a30 	.word	0x20001a30
     b84:	400c4000 	.word	0x400c4000
     b88:	400c8000 	.word	0x400c8000
     b8c:	200000c0 	.word	0x200000c0

00000b90 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     b90:	2800      	cmp	r0, #0
     b92:	d057      	beq.n	c44 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     b94:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
     b96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b9a:	b085      	sub	sp, #20
     b9c:	4683      	mov	fp, r0
     b9e:	4c2a      	ldr	r4, [pc, #168]	; (c48 <delay+0xb8>)
     ba0:	4d2a      	ldr	r5, [pc, #168]	; (c4c <delay+0xbc>)
     ba2:	4e2b      	ldr	r6, [pc, #172]	; (c50 <delay+0xc0>)
     ba4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     ba8:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     bac:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     bae:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     bb0:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     bb4:	2900      	cmp	r1, #0
     bb6:	d1f7      	bne.n	ba8 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     bb8:	4f26      	ldr	r7, [pc, #152]	; (c54 <delay+0xc4>)
     bba:	e9cd 8902 	strd	r8, r9, [sp, #8]
     bbe:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     bc0:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     bc2:	4a25      	ldr	r2, [pc, #148]	; (c58 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     bc4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     bc8:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     bca:	6812      	ldr	r2, [r2, #0]
     bcc:	2701      	movs	r7, #1
     bce:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
     bd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     bd6:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
     bd8:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     bda:	428b      	cmp	r3, r1
     bdc:	bf08      	it	eq
     bde:	4542      	cmpeq	r2, r8
     be0:	bf2c      	ite	cs
     be2:	46c2      	movcs	sl, r8
     be4:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     be6:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     bea:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     bee:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     bf0:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     bf2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     bf6:	2b00      	cmp	r3, #0
     bf8:	d1f7      	bne.n	bea <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     bfa:	9801      	ldr	r0, [sp, #4]
     bfc:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     bfe:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c00:	4815      	ldr	r0, [pc, #84]	; (c58 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     c02:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c06:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     c08:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c0c:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
     c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     c14:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c18:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
     c1a:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c1c:	4299      	cmp	r1, r3
     c1e:	bf08      	it	eq
     c20:	4540      	cmpeq	r0, r8
     c22:	bf2c      	ite	cs
     c24:	4643      	movcs	r3, r8
     c26:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
     c28:	441a      	add	r2, r3
     c2a:	4572      	cmp	r2, lr
     c2c:	d307      	bcc.n	c3e <delay+0xae>
			if (--msec == 0) return;
     c2e:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
     c32:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
     c36:	d1d8      	bne.n	bea <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
     c38:	b005      	add	sp, #20
     c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
     c3e:	f001 ff97 	bl	2b70 <yield>
	}
     c42:	e7d2      	b.n	bea <delay+0x5a>
     c44:	4770      	bx	lr
     c46:	bf00      	nop
     c48:	20001d68 	.word	0x20001d68
     c4c:	20001a3c 	.word	0x20001a3c
     c50:	20001a34 	.word	0x20001a34
     c54:	e0001004 	.word	0xe0001004
     c58:	20001a38 	.word	0x20001a38

00000c5c <micros>:
	// TODO...
}

uint32_t micros(void)
{
     c5c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
     c60:	4a12      	ldr	r2, [pc, #72]	; (cac <micros+0x50>)
     c62:	2601      	movs	r6, #1
     c64:	4d12      	ldr	r5, [pc, #72]	; (cb0 <micros+0x54>)
     c66:	4c13      	ldr	r4, [pc, #76]	; (cb4 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     c68:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     c6c:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
     c6e:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     c70:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
     c74:	2b00      	cmp	r3, #0
     c76:	d1f7      	bne.n	c68 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     c78:	4a0f      	ldr	r2, [pc, #60]	; (cb8 <micros+0x5c>)
     c7a:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c7c:	4f0f      	ldr	r7, [pc, #60]	; (cbc <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
     c7e:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
     c80:	f04f 0900 	mov.w	r9, #0
     c84:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c88:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
     c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     c8e:	4599      	cmp	r9, r3
     c90:	fba2 6706 	umull	r6, r7, r2, r6
     c94:	bf08      	it	eq
     c96:	45b8      	cmpeq	r8, r7
     c98:	463c      	mov	r4, r7
     c9a:	bf2c      	ite	cs
     c9c:	463c      	movcs	r4, r7
     c9e:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
     ca0:	fb00 4001 	mla	r0, r0, r1, r4
     ca4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
     ca8:	4770      	bx	lr
     caa:	bf00      	nop
     cac:	20001d68 	.word	0x20001d68
     cb0:	20001a3c 	.word	0x20001a3c
     cb4:	20001a34 	.word	0x20001a34
     cb8:	e0001004 	.word	0xe0001004
     cbc:	20001a38 	.word	0x20001a38

00000cc0 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     cc0:	0100      	lsls	r0, r0, #4
     cc2:	4b07      	ldr	r3, [pc, #28]	; (ce0 <digitalWrite.part.0+0x20>)
     cc4:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
     cc6:	581b      	ldr	r3, [r3, r0]
	mask = p->mask;
     cc8:	68d2      	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     cca:	6858      	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
     ccc:	4210      	tst	r0, r2
     cce:	d002      	beq.n	cd6 <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
     cd0:	b911      	cbnz	r1, cd8 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
     cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     cd6:	4770      	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
     cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     cdc:	4770      	bx	lr
     cde:	bf00      	nop
     ce0:	200000dc 	.word	0x200000dc

00000ce4 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     ce4:	2827      	cmp	r0, #39	; 0x27
     ce6:	d801      	bhi.n	cec <digitalWrite+0x8>
     ce8:	f7ff bfea 	b.w	cc0 <digitalWrite.part.0>
     cec:	4770      	bx	lr
     cee:	bf00      	nop

00000cf0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     cf0:	2827      	cmp	r0, #39	; 0x27
     cf2:	d81c      	bhi.n	d2e <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
     cf4:	0100      	lsls	r0, r0, #4
     cf6:	4a1a      	ldr	r2, [pc, #104]	; (d60 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     cf8:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
     cfa:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     cfe:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
     d00:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     d02:	d015      	beq.n	d30 <pinMode+0x40>
     d04:	2904      	cmp	r1, #4
     d06:	d013      	beq.n	d30 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     d08:	68dc      	ldr	r4, [r3, #12]
     d0a:	6842      	ldr	r2, [r0, #4]
     d0c:	ea22 0204 	bic.w	r2, r2, r4
     d10:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     d12:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
     d14:	b1e9      	cbz	r1, d52 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
     d16:	2902      	cmp	r1, #2
     d18:	d01e      	beq.n	d58 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     d1a:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     d1c:	685b      	ldr	r3, [r3, #4]
}
     d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     d22:	bf0c      	ite	eq
     d24:	490f      	ldreq	r1, [pc, #60]	; (d64 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     d26:	4910      	ldrne	r1, [pc, #64]	; (d68 <pinMode+0x78>)
     d28:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     d2a:	2215      	movs	r2, #21
     d2c:	601a      	str	r2, [r3, #0]
}
     d2e:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     d30:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
     d32:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
     d34:	6844      	ldr	r4, [r0, #4]
     d36:	ea42 0204 	orr.w	r2, r2, r4
     d3a:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     d3c:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
     d3e:	d008      	beq.n	d52 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     d40:	f640 0138 	movw	r1, #2104	; 0x838
     d44:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     d46:	685b      	ldr	r3, [r3, #4]
     d48:	2215      	movs	r2, #21
}
     d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
     d4e:	601a      	str	r2, [r3, #0]
}
     d50:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     d52:	2138      	movs	r1, #56	; 0x38
     d54:	6011      	str	r1, [r2, #0]
     d56:	e7f6      	b.n	d46 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     d58:	4904      	ldr	r1, [pc, #16]	; (d6c <pinMode+0x7c>)
     d5a:	6011      	str	r1, [r2, #0]
     d5c:	e7f3      	b.n	d46 <pinMode+0x56>
     d5e:	bf00      	nop
     d60:	200000dc 	.word	0x200000dc
     d64:	00013038 	.word	0x00013038
     d68:	00010038 	.word	0x00010038
     d6c:	0001f038 	.word	0x0001f038

00000d70 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
     d70:	2004      	movs	r0, #4
     d72:	4671      	mov	r1, lr
     d74:	4208      	tst	r0, r1
     d76:	d003      	beq.n	d80 <_MSP>
     d78:	f3ef 8009 	mrs	r0, PSP
     d7c:	f000 b808 	b.w	d90 <HardFault_HandlerC>

00000d80 <_MSP>:
     d80:	f3ef 8008 	mrs	r0, MSP
     d84:	f000 b804 	b.w	d90 <HardFault_HandlerC>

00000d88 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
     d88:	4770      	bx	lr
     d8a:	bf00      	nop

00000d8c <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
     d8c:	4770      	bx	lr
     d8e:	bf00      	nop

00000d90 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     d90:	4b1b      	ldr	r3, [pc, #108]	; (e00 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     d92:	2105      	movs	r1, #5
     d94:	4a1b      	ldr	r2, [pc, #108]	; (e04 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     d96:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     d98:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
     d9a:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
     d9e:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
     da0:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
     da4:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     da6:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     da8:	4c17      	ldr	r4, [pc, #92]	; (e08 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     daa:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
     dac:	4817      	ldr	r0, [pc, #92]	; (e0c <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
     dae:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
     db0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     db4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
     db8:	6823      	ldr	r3, [r4, #0]
     dba:	4283      	cmp	r3, r0
     dbc:	d902      	bls.n	dc4 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
     dbe:	4814      	ldr	r0, [pc, #80]	; (e10 <HardFault_HandlerC+0x80>)
     dc0:	f001 ff26 	bl	2c10 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     dc4:	4d0e      	ldr	r5, [pc, #56]	; (e00 <HardFault_HandlerC+0x70>)
     dc6:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     dc8:	2000      	movs	r0, #0
     dca:	4a12      	ldr	r2, [pc, #72]	; (e14 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     dcc:	4912      	ldr	r1, [pc, #72]	; (e18 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
     dce:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
     dd2:	9001      	str	r0, [sp, #4]
     dd4:	9b01      	ldr	r3, [sp, #4]
     dd6:	4293      	cmp	r3, r2
     dd8:	d805      	bhi.n	de6 <HardFault_HandlerC+0x56>
     dda:	9b01      	ldr	r3, [sp, #4]
     ddc:	3301      	adds	r3, #1
     dde:	9301      	str	r3, [sp, #4]
     de0:	9b01      	ldr	r3, [sp, #4]
     de2:	4293      	cmp	r3, r2
     de4:	d9f9      	bls.n	dda <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
     de6:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
     dea:	9001      	str	r0, [sp, #4]
     dec:	9b01      	ldr	r3, [sp, #4]
     dee:	428b      	cmp	r3, r1
     df0:	d8ed      	bhi.n	dce <HardFault_HandlerC+0x3e>
     df2:	9b01      	ldr	r3, [sp, #4]
     df4:	3301      	adds	r3, #1
     df6:	9301      	str	r3, [sp, #4]
     df8:	9b01      	ldr	r3, [sp, #4]
     dfa:	428b      	cmp	r3, r1
     dfc:	d9f9      	bls.n	df2 <HardFault_HandlerC+0x62>
     dfe:	e7e6      	b.n	dce <HardFault_HandlerC+0x3e>
     e00:	401bc000 	.word	0x401bc000
     e04:	401f8000 	.word	0x401f8000
     e08:	2000054c 	.word	0x2000054c
     e0c:	23c345ff 	.word	0x23c345ff
     e10:	11e1a300 	.word	0x11e1a300
     e14:	000f423f 	.word	0x000f423f
     e18:	0089543f 	.word	0x0089543f

00000e1c <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
     e1c:	4a09      	ldr	r2, [pc, #36]	; (e44 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
     e1e:	b508      	push	{r3, lr}
        char *prev = __brkval;
     e20:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
     e22:	b120      	cbz	r0, e2e <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
     e24:	4418      	add	r0, r3
     e26:	4908      	ldr	r1, [pc, #32]	; (e48 <_sbrk+0x2c>)
     e28:	4288      	cmp	r0, r1
     e2a:	d802      	bhi.n	e32 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
     e2c:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
     e2e:	4618      	mov	r0, r3
     e30:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     e32:	f002 f9df 	bl	31f4 <__errno>
     e36:	220c      	movs	r2, #12
                        return (void *)-1;
     e38:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
     e3c:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
     e3e:	4618      	mov	r0, r3
     e40:	bd08      	pop	{r3, pc}
     e42:	bf00      	nop
     e44:	20000444 	.word	0x20000444
     e48:	20280000 	.word	0x20280000

00000e4c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     e4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
     e4e:	b430      	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
     e50:	b11b      	cbz	r3, e5a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
     e52:	6853      	ldr	r3, [r2, #4]
     e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     e58:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
     e5a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
     e5c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
     e5e:	b19c      	cbz	r4, e88 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
     e60:	4b10      	ldr	r3, [pc, #64]	; (ea4 <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
     e62:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
     e64:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
     e68:	420c      	tst	r4, r1
     e6a:	d117      	bne.n	e9c <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
     e6c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     e70:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
     e74:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
     e78:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
     e7c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
     e80:	0464      	lsls	r4, r4, #17
     e82:	d5f3      	bpl.n	e6c <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
     e84:	4229      	tst	r1, r5
     e86:	d109      	bne.n	e9c <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
     e88:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
     e8a:	4c06      	ldr	r4, [pc, #24]	; (ea4 <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
     e8c:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
     e8e:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
     e90:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
     e94:	4319      	orrs	r1, r3
     e96:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
     e9a:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
     e9c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
     e9e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
     ea0:	bc30      	pop	{r4, r5}
     ea2:	4770      	bx	lr
     ea4:	402e0000 	.word	0x402e0000

00000ea8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
     ea8:	b570      	push	{r4, r5, r6, lr}
     eaa:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
     eac:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
     eae:	b190      	cbz	r0, ed6 <run_callbacks+0x2e>
     eb0:	4602      	mov	r2, r0
     eb2:	2400      	movs	r4, #0
     eb4:	e003      	b.n	ebe <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
     eb6:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
     eb8:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
     eba:	2a01      	cmp	r2, #1
     ebc:	d00c      	beq.n	ed8 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
     ebe:	6853      	ldr	r3, [r2, #4]
     ec0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
     ec4:	d0f7      	beq.n	eb6 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
     ec6:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     ec8:	b12c      	cbz	r4, ed6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
     eca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
     ecc:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
     ece:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     ed0:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
     ed2:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
     ed4:	d1f9      	bne.n	eca <run_callbacks+0x22>
     ed6:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
     ed8:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
     eda:	6373      	str	r3, [r6, #52]	; 0x34
			break;
     edc:	e7f4      	b.n	ec8 <run_callbacks+0x20>
     ede:	bf00      	nop

00000ee0 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
     ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
     ee2:	b9f1      	cbnz	r1, f22 <endpoint0_transmit.constprop.1+0x42>
     ee4:	4c22      	ldr	r4, [pc, #136]	; (f70 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     ee6:	4923      	ldr	r1, [pc, #140]	; (f74 <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     ee8:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     eea:	4b23      	ldr	r3, [pc, #140]	; (f78 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     eec:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     eee:	2580      	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
     ef0:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
     ef2:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
     ef4:	461a      	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
     ef6:	604d      	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
     ef8:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     efa:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
     efe:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     f00:	f044 1401 	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     f04:	4d1d      	ldr	r5, [pc, #116]	; (f7c <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
     f06:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
     f0a:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
     f0e:	f041 0101 	orr.w	r1, r1, #1
     f12:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
     f16:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
     f18:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     f1c:	2b00      	cmp	r3, #0
     f1e:	d1fb      	bne.n	f18 <endpoint0_transmit.constprop.1+0x38>
}
     f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     f22:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     f24:	4b16      	ldr	r3, [pc, #88]	; (f80 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     f26:	4d14      	ldr	r5, [pc, #80]	; (f78 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     f28:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     f2a:	4c11      	ldr	r4, [pc, #68]	; (f70 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     f2c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     f30:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
     f32:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
     f34:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     f36:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
     f3a:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
     f3c:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
     f40:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
     f42:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     f46:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
     f4a:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
     f4e:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
     f50:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     f52:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
     f56:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
     f5a:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
     f5e:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
     f60:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
     f62:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
     f66:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
     f6a:	2b00      	cmp	r3, #0
     f6c:	d1fb      	bne.n	f66 <endpoint0_transmit.constprop.1+0x86>
     f6e:	e7ba      	b.n	ee6 <endpoint0_transmit.constprop.1+0x6>
     f70:	20004000 	.word	0x20004000
     f74:	20003020 	.word	0x20003020
     f78:	402e0000 	.word	0x402e0000
     f7c:	20001a64 	.word	0x20001a64
     f80:	20003000 	.word	0x20003000

00000f84 <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
     f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     f88:	4cbc      	ldr	r4, [pc, #752]	; (127c <isr+0x2f8>)
	//transfer_log_count = 0;
}


static void isr(void)
{
     f8a:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
     f8c:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     f90:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
     f94:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
     f98:	d05e      	beq.n	1058 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
     f9a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
     f9e:	2b00      	cmp	r3, #0
     fa0:	d055      	beq.n	104e <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     fa2:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
     fa6:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 12a4 <isr+0x320>
     faa:	4eb5      	ldr	r6, [pc, #724]	; (1280 <isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     fac:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     fae:	46da      	mov	sl, fp
     fb0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     fb2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
     fb4:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
     fb8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     fbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     fc0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
     fc4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
     fc8:	049f      	lsls	r7, r3, #18
     fca:	d5f5      	bpl.n	fb8 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
     fcc:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
     fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
     fd4:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
     fd8:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
     fdc:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
     fe0:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
     fe4:	d1fa      	bne.n	fdc <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     fe6:	b281      	uxth	r1, r0
     fe8:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
     fec:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
     ff0:	42b9      	cmp	r1, r7
     ff2:	f200 80a5 	bhi.w	1140 <isr+0x1bc>
     ff6:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
     ffa:	f080 81eb 	bcs.w	13d4 <isr+0x450>
     ffe:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    1002:	f000 816a 	beq.w	12da <isr+0x356>
    1006:	f200 80e4 	bhi.w	11d2 <isr+0x24e>
    100a:	2980      	cmp	r1, #128	; 0x80
    100c:	f000 8158 	beq.w	12c0 <isr+0x33c>
    1010:	2982      	cmp	r1, #130	; 0x82
    1012:	f040 80d6 	bne.w	11c2 <isr+0x23e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1016:	b292      	uxth	r2, r2
    1018:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    101c:	2907      	cmp	r1, #7
    101e:	f200 80d0 	bhi.w	11c2 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1022:	0089      	lsls	r1, r1, #2
    1024:	4897      	ldr	r0, [pc, #604]	; (1284 <isr+0x300>)
		reply_buffer[0] = 0;
    1026:	4f98      	ldr	r7, [pc, #608]	; (1288 <isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1028:	4408      	add	r0, r1
    102a:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    102c:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    102e:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    1030:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1032:	f140 820e 	bpl.w	1452 <isr+0x4ce>
    1036:	03ca      	lsls	r2, r1, #15
    1038:	d501      	bpl.n	103e <isr+0xba>
			reply_buffer[0] = 1;
    103a:	2301      	movs	r3, #1
    103c:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    103e:	2102      	movs	r1, #2
    1040:	4891      	ldr	r0, [pc, #580]	; (1288 <isr+0x304>)
    1042:	f7ff ff4d 	bl	ee0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1046:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    104a:	2b00      	cmp	r3, #0
    104c:	d1b0      	bne.n	fb0 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    104e:	4a8b      	ldr	r2, [pc, #556]	; (127c <isr+0x2f8>)
    1050:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    1054:	2b00      	cmp	r3, #0
    1056:	d150      	bne.n	10fa <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    1058:	f018 0f40 	tst.w	r8, #64	; 0x40
    105c:	d018      	beq.n	1090 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    105e:	4b87      	ldr	r3, [pc, #540]	; (127c <isr+0x2f8>)
    1060:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1064:	461a      	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1066:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    106a:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    106e:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1072:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    1076:	4b81      	ldr	r3, [pc, #516]	; (127c <isr+0x2f8>)
    1078:	2c00      	cmp	r4, #0
    107a:	d1fa      	bne.n	1072 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    107c:	f04f 32ff 	mov.w	r2, #4294967295
    1080:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1084:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    1088:	f000 fd34 	bl	1af4 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    108c:	4b7f      	ldr	r3, [pc, #508]	; (128c <isr+0x308>)
    108e:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    1090:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    1094:	d003      	beq.n	109e <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1096:	4b7e      	ldr	r3, [pc, #504]	; (1290 <isr+0x30c>)
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	b103      	cbz	r3, 109e <isr+0x11a>
    109c:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    109e:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    10a2:	d003      	beq.n	10ac <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    10a4:	4b7b      	ldr	r3, [pc, #492]	; (1294 <isr+0x310>)
    10a6:	681b      	ldr	r3, [r3, #0]
    10a8:	b103      	cbz	r3, 10ac <isr+0x128>
    10aa:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    10ac:	f018 0f04 	tst.w	r8, #4
    10b0:	d008      	beq.n	10c4 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    10b2:	4b72      	ldr	r3, [pc, #456]	; (127c <isr+0x2f8>)
    10b4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    10b8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    10bc:	d03d      	beq.n	113a <isr+0x1b6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    10be:	4b76      	ldr	r3, [pc, #472]	; (1298 <isr+0x314>)
    10c0:	2201      	movs	r2, #1
    10c2:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    10c4:	4b6d      	ldr	r3, [pc, #436]	; (127c <isr+0x2f8>)
    10c6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    10ca:	0612      	lsls	r2, r2, #24
    10cc:	d512      	bpl.n	10f4 <isr+0x170>
    10ce:	f018 0f80 	tst.w	r8, #128	; 0x80
    10d2:	d00f      	beq.n	10f4 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    10d4:	4971      	ldr	r1, [pc, #452]	; (129c <isr+0x318>)
    10d6:	780a      	ldrb	r2, [r1, #0]
    10d8:	b162      	cbz	r2, 10f4 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    10da:	3a01      	subs	r2, #1
    10dc:	b2d2      	uxtb	r2, r2
    10de:	700a      	strb	r2, [r1, #0]
    10e0:	b942      	cbnz	r2, 10f4 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    10e2:	496f      	ldr	r1, [pc, #444]	; (12a0 <isr+0x31c>)
    10e4:	780a      	ldrb	r2, [r1, #0]
    10e6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    10ea:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    10ec:	2a00      	cmp	r2, #0
    10ee:	f000 8232 	beq.w	1556 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    10f2:	befb      	bkpt	0x00fb
		#endif
		#ifdef MULTITOUCH_INTERFACE
		usb_touchscreen_update_callback();
		#endif
	}
}
    10f4:	b003      	add	sp, #12
    10f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    10fa:	496a      	ldr	r1, [pc, #424]	; (12a4 <isr+0x320>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    10fc:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    1100:	6808      	ldr	r0, [r1, #0]
    1102:	4203      	tst	r3, r0
    1104:	f040 81eb 	bne.w	14de <isr+0x55a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    1108:	4a60      	ldr	r2, [pc, #384]	; (128c <isr+0x308>)
    110a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    110c:	401c      	ands	r4, r3
    110e:	d0a3      	beq.n	1058 <isr+0xd4>
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1110:	0763      	lsls	r3, r4, #29
    1112:	f100 822f 	bmi.w	1574 <isr+0x5f0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    1116:	0367      	lsls	r7, r4, #13
    1118:	f100 8228 	bmi.w	156c <isr+0x5e8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    111c:	0726      	lsls	r6, r4, #28
    111e:	f100 8231 	bmi.w	1584 <isr+0x600>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    1122:	0325      	lsls	r5, r4, #12
    1124:	f100 822a 	bmi.w	157c <isr+0x5f8>
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    1128:	06e0      	lsls	r0, r4, #27
    112a:	f100 821b 	bmi.w	1564 <isr+0x5e0>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    112e:	02e1      	lsls	r1, r4, #11
    1130:	d592      	bpl.n	1058 <isr+0xd4>
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    1132:	485d      	ldr	r0, [pc, #372]	; (12a8 <isr+0x324>)
    1134:	f7ff feb8 	bl	ea8 <run_callbacks>
    1138:	e78e      	b.n	1058 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    113a:	4a57      	ldr	r2, [pc, #348]	; (1298 <isr+0x314>)
    113c:	7013      	strb	r3, [r2, #0]
    113e:	e7c1      	b.n	10c4 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    1140:	f242 0721 	movw	r7, #8225	; 0x2021
    1144:	42b9      	cmp	r1, r7
    1146:	d038      	beq.n	11ba <isr+0x236>
    1148:	d86f      	bhi.n	122a <isr+0x2a6>
    114a:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    114e:	f000 8133 	beq.w	13b8 <isr+0x434>
    1152:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    1156:	d134      	bne.n	11c2 <isr+0x23e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1158:	f3c0 4007 	ubfx	r0, r0, #16, #8
    115c:	4a53      	ldr	r2, [pc, #332]	; (12ac <isr+0x328>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    115e:	4954      	ldr	r1, [pc, #336]	; (12b0 <isr+0x32c>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    1160:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1162:	4f54      	ldr	r7, [pc, #336]	; (12b4 <isr+0x330>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1164:	4a54      	ldr	r2, [pc, #336]	; (12b8 <isr+0x334>)
    1166:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    1168:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    116c:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    1170:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    1174:	f000 fcc0 	bl	1af8 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1178:	4a50      	ldr	r2, [pc, #320]	; (12bc <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    117a:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    117c:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    117e:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1180:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1182:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1184:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1186:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    118a:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    118c:	f041 1101 	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1190:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1192:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1196:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
    119a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    119e:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    11a2:	4a40      	ldr	r2, [pc, #256]	; (12a4 <isr+0x320>)
    11a4:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    11a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    11aa:	2b00      	cmp	r3, #0
    11ac:	d1fb      	bne.n	11a6 <isr+0x222>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    11ae:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    11b2:	2b00      	cmp	r3, #0
    11b4:	f47f aefc 	bne.w	fb0 <isr+0x2c>
    11b8:	e749      	b.n	104e <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    11ba:	0c11      	lsrs	r1, r2, #16
    11bc:	2907      	cmp	r1, #7
    11be:	f000 814c 	beq.w	145a <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    11c2:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    11c6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    11ca:	2b00      	cmp	r3, #0
    11cc:	f47f aef0 	bne.w	fb0 <isr+0x2c>
    11d0:	e73d      	b.n	104e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    11d2:	f240 3702 	movw	r7, #770	; 0x302
    11d6:	42b9      	cmp	r1, r7
    11d8:	f000 80bb 	beq.w	1352 <isr+0x3ce>
    11dc:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    11e0:	d1ef      	bne.n	11c2 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    11e2:	4a36      	ldr	r2, [pc, #216]	; (12bc <isr+0x338>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    11e4:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    11e6:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    11e8:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    11ea:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    11ec:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    11ee:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    11f2:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    11f4:	f041 1301 	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    11f8:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    11fa:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    11fe:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    1202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1206:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    120a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    120e:	2b00      	cmp	r3, #0
    1210:	d1fb      	bne.n	120a <isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    1212:	0c03      	lsrs	r3, r0, #16
    1214:	065b      	lsls	r3, r3, #25
    1216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    121a:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    121e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1222:	2b00      	cmp	r3, #0
    1224:	f47f aec4 	bne.w	fb0 <isr+0x2c>
    1228:	e711      	b.n	104e <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    122a:	f242 2321 	movw	r3, #8737	; 0x2221
    122e:	4299      	cmp	r1, r3
    1230:	f000 8086 	beq.w	1340 <isr+0x3bc>
    1234:	f242 3321 	movw	r3, #8993	; 0x2321
    1238:	4299      	cmp	r1, r3
    123a:	d1c2      	bne.n	11c2 <isr+0x23e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    123c:	4b1f      	ldr	r3, [pc, #124]	; (12bc <isr+0x338>)
    123e:	2101      	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1240:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1242:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1244:	2100      	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1246:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1248:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    124c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    124e:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1252:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1254:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1256:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    125a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    125e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1262:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    1266:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    126a:	2b00      	cmp	r3, #0
    126c:	d1fb      	bne.n	1266 <isr+0x2e2>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    126e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1272:	2b00      	cmp	r3, #0
    1274:	f47f ae9c 	bne.w	fb0 <isr+0x2c>
    1278:	e6e9      	b.n	104e <isr+0xca>
    127a:	bf00      	nop
    127c:	402e0000 	.word	0x402e0000
    1280:	20004000 	.word	0x20004000
    1284:	402e01c0 	.word	0x402e01c0
    1288:	20001a78 	.word	0x20001a78
    128c:	20001a54 	.word	0x20001a54
    1290:	20001a50 	.word	0x20001a50
    1294:	20001a5c 	.word	0x20001a5c
    1298:	20001a60 	.word	0x20001a60
    129c:	20001a68 	.word	0x20001a68
    12a0:	20001a58 	.word	0x20001a58
    12a4:	20001a64 	.word	0x20001a64
    12a8:	20004240 	.word	0x20004240
    12ac:	20001a88 	.word	0x20001a88
    12b0:	000200c8 	.word	0x000200c8
    12b4:	00cc0002 	.word	0x00cc0002
    12b8:	00c80002 	.word	0x00c80002
    12bc:	20003020 	.word	0x20003020
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    12c0:	4aba      	ldr	r2, [pc, #744]	; (15ac <isr+0x628>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    12c2:	2102      	movs	r1, #2
    12c4:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    12c6:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    12c8:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    12ca:	f7ff fe09 	bl	ee0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    12ce:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    12d2:	2b00      	cmp	r3, #0
    12d4:	f47f ae6c 	bne.w	fb0 <isr+0x2c>
    12d8:	e6b9      	b.n	104e <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    12da:	b292      	uxth	r2, r2
    12dc:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    12e0:	2b07      	cmp	r3, #7
    12e2:	f63f af6e 	bhi.w	11c2 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    12e6:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    12ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    12ee:	4ab0      	ldr	r2, [pc, #704]	; (15b0 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    12f0:	f04f 0101 	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    12f4:	441a      	add	r2, r3
    12f6:	6813      	ldr	r3, [r2, #0]
    12f8:	bf14      	ite	ne
    12fa:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    12fe:	f023 0301 	biceq.w	r3, r3, #1
    1302:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1304:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1306:	4bab      	ldr	r3, [pc, #684]	; (15b4 <isr+0x630>)
    1308:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    130a:	2100      	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    130c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    130e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1312:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1314:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1318:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    131a:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    131c:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1320:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1328:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    132c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1330:	2b00      	cmp	r3, #0
    1332:	d1fb      	bne.n	132c <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    1334:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    1338:	2b00      	cmp	r3, #0
    133a:	f47f ae39 	bne.w	fb0 <isr+0x2c>
    133e:	e686      	b.n	104e <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1340:	4b9d      	ldr	r3, [pc, #628]	; (15b8 <isr+0x634>)
		usb_cdc_line_rtsdtr = setup.wValue;
    1342:	f3c0 4007 	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1346:	4a9d      	ldr	r2, [pc, #628]	; (15bc <isr+0x638>)
    1348:	6819      	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    134a:	4b9d      	ldr	r3, [pc, #628]	; (15c0 <isr+0x63c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    134c:	6011      	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    134e:	7018      	strb	r0, [r3, #0]
    1350:	e774      	b.n	123c <isr+0x2b8>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    1352:	b292      	uxth	r2, r2
    1354:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    1358:	2b07      	cmp	r3, #7
    135a:	f63f af32 	bhi.w	11c2 <isr+0x23e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    135e:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    1362:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1366:	4a92      	ldr	r2, [pc, #584]	; (15b0 <isr+0x62c>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    1368:	f04f 0101 	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    136c:	441a      	add	r2, r3
    136e:	6813      	ldr	r3, [r2, #0]
    1370:	bf14      	ite	ne
    1372:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    1376:	f043 0301 	orreq.w	r3, r3, #1
    137a:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    137c:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    137e:	4b8d      	ldr	r3, [pc, #564]	; (15b4 <isr+0x630>)
    1380:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1382:	2100      	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1384:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1386:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    138a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    138c:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    1390:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    1392:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    1394:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1398:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    139c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    13a0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    13a4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    13a8:	2b00      	cmp	r3, #0
    13aa:	d1fb      	bne.n	13a4 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    13ac:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    13b0:	2b00      	cmp	r3, #0
    13b2:	f47f adfd 	bne.w	fb0 <isr+0x2c>
    13b6:	e64a      	b.n	104e <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    13b8:	4a82      	ldr	r2, [pc, #520]	; (15c4 <isr+0x640>)
		endpoint0_transmit(reply_buffer, 1, 0);
    13ba:	2101      	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    13bc:	4b7b      	ldr	r3, [pc, #492]	; (15ac <isr+0x628>)
    13be:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    13c0:	4618      	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    13c2:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    13c4:	f7ff fd8c 	bl	ee0 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    13c8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    13cc:	2b00      	cmp	r3, #0
    13ce:	f47f adef 	bne.w	fb0 <isr+0x2c>
    13d2:	e63c      	b.n	104e <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    13d4:	4b7c      	ldr	r3, [pc, #496]	; (15c8 <isr+0x644>)
    13d6:	6859      	ldr	r1, [r3, #4]
    13d8:	2900      	cmp	r1, #0
    13da:	f43f aef2 	beq.w	11c2 <isr+0x23e>
    13de:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    13e0:	fa1f fe82 	uxth.w	lr, r2
    13e4:	e004      	b.n	13f0 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    13e6:	330c      	adds	r3, #12
    13e8:	6859      	ldr	r1, [r3, #4]
    13ea:	2900      	cmp	r1, #0
    13ec:	f43f aee9 	beq.w	11c2 <isr+0x23e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    13f0:	881f      	ldrh	r7, [r3, #0]
    13f2:	4287      	cmp	r7, r0
    13f4:	d1f7      	bne.n	13e6 <isr+0x462>
    13f6:	885f      	ldrh	r7, [r3, #2]
    13f8:	4577      	cmp	r7, lr
    13fa:	d1f4      	bne.n	13e6 <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    13fc:	0a07      	lsrs	r7, r0, #8
    13fe:	2f03      	cmp	r7, #3
    1400:	f000 8106 	beq.w	1610 <isr+0x68c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    1404:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1406:	0c12      	lsrs	r2, r2, #16
    1408:	4293      	cmp	r3, r2
    140a:	bf28      	it	cs
    140c:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    140e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1412:	f000 80bb 	beq.w	158c <isr+0x608>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    1416:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    141a:	f000 8089 	beq.w	1530 <isr+0x5ac>
    141e:	4f6b      	ldr	r7, [pc, #428]	; (15cc <isr+0x648>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    1420:	461a      	mov	r2, r3
    1422:	9301      	str	r3, [sp, #4]
    1424:	4638      	mov	r0, r7
    1426:	f7ff fae7 	bl	9f8 <memcpy>
    142a:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    142c:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1430:	441f      	add	r7, r3
	asm("dsb");
    1432:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1436:	4966      	ldr	r1, [pc, #408]	; (15d0 <isr+0x64c>)
    1438:	600a      	str	r2, [r1, #0]
		location += 32;
    143a:	3220      	adds	r2, #32
	} while (location < end_addr);
    143c:	4297      	cmp	r7, r2
    143e:	d8fa      	bhi.n	1436 <isr+0x4b2>
	asm("dsb");
    1440:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1444:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    1448:	4860      	ldr	r0, [pc, #384]	; (15cc <isr+0x648>)
    144a:	4619      	mov	r1, r3
    144c:	f7ff fd48 	bl	ee0 <endpoint0_transmit.constprop.1>
    1450:	e5f9      	b.n	1046 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    1452:	07cb      	lsls	r3, r1, #31
    1454:	f57f adf3 	bpl.w	103e <isr+0xba>
    1458:	e5ef      	b.n	103a <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    145a:	4f5e      	ldr	r7, [pc, #376]	; (15d4 <isr+0x650>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    145c:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    1460:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1462:	495d      	ldr	r1, [pc, #372]	; (15d8 <isr+0x654>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1464:	4b5d      	ldr	r3, [pc, #372]	; (15dc <isr+0x658>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1466:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    1468:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    146c:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    146e:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    1472:	495b      	ldr	r1, [pc, #364]	; (15e0 <isr+0x65c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    1474:	607a      	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1476:	ea40 020e 	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    147a:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    147e:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    1482:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1484:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    1488:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    148c:	f501 4280 	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    1490:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1492:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    1494:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1498:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    149a:	619a      	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    149c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    14a0:	2b00      	cmp	r3, #0
    14a2:	d1fb      	bne.n	149c <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    14a4:	4a43      	ldr	r2, [pc, #268]	; (15b4 <isr+0x630>)
    14a6:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14a8:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    14ac:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    14ae:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    14b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    14b4:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    14b6:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    14ba:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    14bc:	f041 1301 	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    14c0:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    14c2:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    14c6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    14ca:	4303      	orrs	r3, r0
    14cc:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    14d0:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    14d4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    14d8:	2b00      	cmp	r3, #0
    14da:	d1fb      	bne.n	14d4 <isr+0x550>
    14dc:	e5b3      	b.n	1046 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    14de:	4c3d      	ldr	r4, [pc, #244]	; (15d4 <isr+0x650>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    14e0:	f242 0021 	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    14e4:	2500      	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    14e6:	8824      	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    14e8:	600d      	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    14ea:	4284      	cmp	r4, r0
    14ec:	f47f ae0c 	bne.w	1108 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    14f0:	493b      	ldr	r1, [pc, #236]	; (15e0 <isr+0x65c>)
    14f2:	4c3c      	ldr	r4, [pc, #240]	; (15e4 <isr+0x660>)
    14f4:	c903      	ldmia	r1, {r0, r1}
    14f6:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    14f8:	2886      	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    14fa:	6020      	str	r0, [r4, #0]
    14fc:	80a1      	strh	r1, [r4, #4]
    14fe:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    1500:	f47f ae02 	bne.w	1108 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    1504:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    1506:	4838      	ldr	r0, [pc, #224]	; (15e8 <isr+0x664>)
    1508:	7801      	ldrb	r1, [r0, #0]
    150a:	f041 0104 	orr.w	r1, r1, #4
    150e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1510:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1514:	0608      	lsls	r0, r1, #24
    1516:	d406      	bmi.n	1526 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1518:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    151c:	2080      	movs	r0, #128	; 0x80
    151e:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    1522:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    1526:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    1528:	4a30      	ldr	r2, [pc, #192]	; (15ec <isr+0x668>)
    152a:	2150      	movs	r1, #80	; 0x50
    152c:	7011      	strb	r1, [r2, #0]
    152e:	e5eb      	b.n	1108 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1530:	482f      	ldr	r0, [pc, #188]	; (15f0 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1532:	461a      	mov	r2, r3
    1534:	4f25      	ldr	r7, [pc, #148]	; (15cc <isr+0x648>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    1536:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    153a:	492e      	ldr	r1, [pc, #184]	; (15f4 <isr+0x670>)
    153c:	482e      	ldr	r0, [pc, #184]	; (15f8 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    153e:	9301      	str	r3, [sp, #4]
    1540:	f1be 0f00 	cmp.w	lr, #0
    1544:	bf08      	it	eq
    1546:	4601      	moveq	r1, r0
    1548:	4638      	mov	r0, r7
    154a:	f7ff fa55 	bl	9f8 <memcpy>
					usb_descriptor_buffer[1] = 7;
    154e:	2207      	movs	r2, #7
    1550:	9b01      	ldr	r3, [sp, #4]
    1552:	707a      	strb	r2, [r7, #1]
    1554:	e76a      	b.n	142c <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    1556:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    155a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    155e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    1562:	e5c6      	b.n	10f2 <isr+0x16e>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1564:	4825      	ldr	r0, [pc, #148]	; (15fc <isr+0x678>)
    1566:	f7ff fc9f 	bl	ea8 <run_callbacks>
    156a:	e5e0      	b.n	112e <isr+0x1aa>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    156c:	4824      	ldr	r0, [pc, #144]	; (1600 <isr+0x67c>)
    156e:	f7ff fc9b 	bl	ea8 <run_callbacks>
    1572:	e5d3      	b.n	111c <isr+0x198>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1574:	4823      	ldr	r0, [pc, #140]	; (1604 <isr+0x680>)
    1576:	f7ff fc97 	bl	ea8 <run_callbacks>
    157a:	e5cc      	b.n	1116 <isr+0x192>
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    157c:	4822      	ldr	r0, [pc, #136]	; (1608 <isr+0x684>)
    157e:	f7ff fc93 	bl	ea8 <run_callbacks>
    1582:	e5d1      	b.n	1128 <isr+0x1a4>
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
    1584:	4821      	ldr	r0, [pc, #132]	; (160c <isr+0x688>)
    1586:	f7ff fc8f 	bl	ea8 <run_callbacks>
    158a:	e5ca      	b.n	1122 <isr+0x19e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    158c:	4818      	ldr	r0, [pc, #96]	; (15f0 <isr+0x66c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    158e:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1590:	4919      	ldr	r1, [pc, #100]	; (15f8 <isr+0x674>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    1592:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    1594:	4817      	ldr	r0, [pc, #92]	; (15f4 <isr+0x670>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    1596:	9301      	str	r3, [sp, #4]
    1598:	2f00      	cmp	r7, #0
    159a:	bf08      	it	eq
    159c:	4601      	moveq	r1, r0
    159e:	480b      	ldr	r0, [pc, #44]	; (15cc <isr+0x648>)
    15a0:	f7ff fa2a 	bl	9f8 <memcpy>
    15a4:	4f09      	ldr	r7, [pc, #36]	; (15cc <isr+0x648>)
    15a6:	9b01      	ldr	r3, [sp, #4]
    15a8:	e740      	b.n	142c <isr+0x4a8>
    15aa:	bf00      	nop
    15ac:	20001a78 	.word	0x20001a78
    15b0:	402e01c0 	.word	0x402e01c0
    15b4:	20003020 	.word	0x20003020
    15b8:	20001a3c 	.word	0x20001a3c
    15bc:	20004288 	.word	0x20004288
    15c0:	20001bc8 	.word	0x20001bc8
    15c4:	20001a88 	.word	0x20001a88
    15c8:	2000035c 	.word	0x2000035c
    15cc:	20200000 	.word	0x20200000
    15d0:	e000ef70 	.word	0xe000ef70
    15d4:	20001a70 	.word	0x20001a70
    15d8:	00070080 	.word	0x00070080
    15dc:	20003000 	.word	0x20003000
    15e0:	20001a80 	.word	0x20001a80
    15e4:	20004280 	.word	0x20004280
    15e8:	20001a58 	.word	0x20001a58
    15ec:	20001a68 	.word	0x20001a68
    15f0:	20001a60 	.word	0x20001a60
    15f4:	60001610 	.word	0x60001610
    15f8:	60001654 	.word	0x60001654
    15fc:	20004200 	.word	0x20004200
    1600:	20004140 	.word	0x20004140
    1604:	20004100 	.word	0x20004100
    1608:	200041c0 	.word	0x200041c0
    160c:	20004180 	.word	0x20004180
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    1610:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    1612:	780b      	ldrb	r3, [r1, #0]
    1614:	4293      	cmp	r3, r2
    1616:	bf28      	it	cs
    1618:	4613      	movcs	r3, r2
    161a:	e6fc      	b.n	1416 <isr+0x492>

0000161c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    161c:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    161e:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1626:	bf14      	ite	ne
    1628:	2700      	movne	r7, #0
    162a:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    162e:	2a02      	cmp	r2, #2
    1630:	d901      	bls.n	1636 <usb_config_rx+0x1a>
    1632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    1636:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    163a:	f8df 9040 	ldr.w	r9, [pc, #64]	; 167c <usb_config_rx+0x60>
    163e:	460d      	mov	r5, r1
    1640:	4604      	mov	r4, r0
    1642:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    1646:	2100      	movs	r1, #0
    1648:	2240      	movs	r2, #64	; 0x40
    164a:	4698      	mov	r8, r3
    164c:	4630      	mov	r0, r6
    164e:	f002 f8bf 	bl	37d0 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1652:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    1654:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    1658:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    165c:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    1660:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    1662:	f1b8 0f00 	cmp.w	r8, #0
    1666:	d0e4      	beq.n	1632 <usb_config_rx+0x16>
    1668:	4b03      	ldr	r3, [pc, #12]	; (1678 <usb_config_rx+0x5c>)
    166a:	40a0      	lsls	r0, r4
    166c:	681c      	ldr	r4, [r3, #0]
    166e:	4320      	orrs	r0, r4
    1670:	6018      	str	r0, [r3, #0]
    1672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1676:	bf00      	nop
    1678:	20001a54 	.word	0x20001a54
    167c:	20004000 	.word	0x20004000

00001680 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1680:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1682:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    1686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    168a:	bf14      	ite	ne
    168c:	2700      	movne	r7, #0
    168e:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    1692:	2a02      	cmp	r2, #2
    1694:	d901      	bls.n	169a <usb_config_tx+0x1a>
    1696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    169a:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    169c:	01c5      	lsls	r5, r0, #7
    169e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 16e4 <usb_config_tx+0x64>
    16a2:	4688      	mov	r8, r1
    16a4:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    16a6:	2100      	movs	r1, #0
    16a8:	4604      	mov	r4, r0
    16aa:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    16ac:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    16b0:	4650      	mov	r0, sl
    16b2:	f002 f88d 	bl	37d0 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    16b6:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    16b8:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    16bc:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    16c0:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    16c4:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    16c8:	2e00      	cmp	r6, #0
    16ca:	d0e4      	beq.n	1696 <usb_config_tx+0x16>
    16cc:	f104 0010 	add.w	r0, r4, #16
    16d0:	4b03      	ldr	r3, [pc, #12]	; (16e0 <usb_config_tx+0x60>)
    16d2:	4082      	lsls	r2, r0
    16d4:	6818      	ldr	r0, [r3, #0]
    16d6:	4302      	orrs	r2, r0
    16d8:	601a      	str	r2, [r3, #0]
    16da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    16de:	bf00      	nop
    16e0:	20001a54 	.word	0x20001a54
    16e4:	20004000 	.word	0x20004000

000016e8 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    16e8:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    16ea:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    16ec:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    16ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    16f2:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    16f4:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    16f6:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    16f8:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    16fc:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    1700:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    1704:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    1708:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    170a:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    170c:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    170e:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    1710:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    1712:	bcf0      	pop	{r4, r5, r6, r7}
    1714:	4770      	bx	lr
    1716:	bf00      	nop

00001718 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1718:	1e83      	subs	r3, r0, #2
    171a:	2b02      	cmp	r3, #2
    171c:	d900      	bls.n	1720 <usb_transmit+0x8>
    171e:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    1720:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1722:	4b06      	ldr	r3, [pc, #24]	; (173c <usb_transmit+0x24>)
    1724:	f100 0410 	add.w	r4, r0, #16
    1728:	2501      	movs	r5, #1
    172a:	460a      	mov	r2, r1
    172c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    1730:	fa05 f104 	lsl.w	r1, r5, r4
}
    1734:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    1736:	f7ff bb89 	b.w	e4c <schedule_transfer>
    173a:	bf00      	nop
    173c:	20004040 	.word	0x20004040

00001740 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1740:	1e83      	subs	r3, r0, #2
    1742:	2b02      	cmp	r3, #2
    1744:	d900      	bls.n	1748 <usb_receive+0x8>
    1746:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    1748:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    174a:	4b05      	ldr	r3, [pc, #20]	; (1760 <usb_receive+0x20>)
    174c:	2401      	movs	r4, #1
    174e:	460a      	mov	r2, r1
    1750:	fa04 f100 	lsl.w	r1, r4, r0
    1754:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    1758:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    175c:	f7ff bb76 	b.w	e4c <schedule_transfer>
    1760:	20004000 	.word	0x20004000

00001764 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    1764:	6840      	ldr	r0, [r0, #4]
#endif
}
    1766:	4770      	bx	lr

00001768 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1768:	4a12      	ldr	r2, [pc, #72]	; (17b4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    176a:	4b13      	ldr	r3, [pc, #76]	; (17b8 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    176c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    1770:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1774:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1776:	b510      	push	{r4, lr}
    1778:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    177a:	d802      	bhi.n	1782 <usb_init_serialnumber+0x1a>
    177c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1780:	0040      	lsls	r0, r0, #1
    1782:	4c0e      	ldr	r4, [pc, #56]	; (17bc <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    1784:	a901      	add	r1, sp, #4
    1786:	220a      	movs	r2, #10
    1788:	f001 fba4 	bl	2ed4 <ultoa>
    178c:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    178e:	2300      	movs	r3, #0
    1790:	4620      	mov	r0, r4
		char c = buf[i];
    1792:	f811 2b01 	ldrb.w	r2, [r1], #1
    1796:	3301      	adds	r3, #1
		if (!c) break;
    1798:	b13a      	cbz	r2, 17aa <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    179a:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    179c:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    17a0:	d1f7      	bne.n	1792 <usb_init_serialnumber+0x2a>
    17a2:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    17a4:	7023      	strb	r3, [r4, #0]
}
    17a6:	b004      	add	sp, #16
    17a8:	bd10      	pop	{r4, pc}
    17aa:	005b      	lsls	r3, r3, #1
    17ac:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    17ae:	7023      	strb	r3, [r4, #0]
}
    17b0:	b004      	add	sp, #16
    17b2:	bd10      	pop	{r4, pc}
    17b4:	401f4400 	.word	0x401f4400
    17b8:	0098967f 	.word	0x0098967f
    17bc:	2000045c 	.word	0x2000045c

000017c0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    17c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    17c2:	4914      	ldr	r1, [pc, #80]	; (1814 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    17c4:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    17c8:	4d13      	ldr	r5, [pc, #76]	; (1818 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    17ca:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    17cc:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    17d0:	4e12      	ldr	r6, [pc, #72]	; (181c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    17d2:	4a13      	ldr	r2, [pc, #76]	; (1820 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    17d4:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    17d8:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    17da:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    17dc:	4628      	mov	r0, r5
    17de:	8832      	ldrh	r2, [r6, #0]
    17e0:	f7ff ff82 	bl	16e8 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    17e4:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    17e6:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    17ea:	4421      	add	r1, r4
	asm("dsb");
    17ec:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    17f0:	4a0c      	ldr	r2, [pc, #48]	; (1824 <rx_queue_transfer+0x64>)
    17f2:	6013      	str	r3, [r2, #0]
		location += 32;
    17f4:	3320      	adds	r3, #32
	} while (location < end_addr);
    17f6:	4299      	cmp	r1, r3
    17f8:	d8fb      	bhi.n	17f2 <rx_queue_transfer+0x32>
	asm("dsb");
    17fa:	f3bf 8f4f 	dsb	sy
	asm("isb");
    17fe:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    1802:	2003      	movs	r0, #3
    1804:	4629      	mov	r1, r5
    1806:	f7ff ff9b 	bl	1740 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    180a:	4b07      	ldr	r3, [pc, #28]	; (1828 <rx_queue_transfer+0x68>)
    180c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1810:	601a      	str	r2, [r3, #0]
    1812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1814:	20200060 	.word	0x20200060
    1818:	20001aa0 	.word	0x20001aa0
    181c:	20001bae 	.word	0x20001bae
    1820:	e000e18c 	.word	0xe000e18c
    1824:	e000ef5c 	.word	0xe000ef5c
    1828:	e000e10c 	.word	0xe000e10c

0000182c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    182c:	4a24      	ldr	r2, [pc, #144]	; (18c0 <rx_event+0x94>)
    182e:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    1830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1834:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1838:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    183a:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    183c:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    183e:	2c00      	cmp	r4, #0
    1840:	dd38      	ble.n	18b4 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    1842:	4920      	ldr	r1, [pc, #128]	; (18c4 <rx_event+0x98>)
		if (head != rx_tail) {
    1844:	4a20      	ldr	r2, [pc, #128]	; (18c8 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    1846:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    1848:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    184a:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    184c:	481f      	ldr	r0, [pc, #124]	; (18cc <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    184e:	4e20      	ldr	r6, [pc, #128]	; (18d0 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    1850:	4293      	cmp	r3, r2
    1852:	d007      	beq.n	1864 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    1854:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    1858:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    185c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    1860:	4294      	cmp	r4, r2
    1862:	d912      	bls.n	188a <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1864:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    1866:	2200      	movs	r2, #0
    1868:	4f1a      	ldr	r7, [pc, #104]	; (18d4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    186a:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    186c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    1870:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    1874:	4e18      	ldr	r6, [pc, #96]	; (18d8 <rx_event+0xac>)
    1876:	bf94      	ite	ls
    1878:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    187a:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    187c:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    187e:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    1880:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    1882:	4414      	add	r4, r2
    1884:	6034      	str	r4, [r6, #0]
    1886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    188a:	4b14      	ldr	r3, [pc, #80]	; (18dc <rx_event+0xb0>)
    188c:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    1890:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    1892:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1894:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    1898:	4418      	add	r0, r3
    189a:	f7ff f8ad 	bl	9f8 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    189e:	4a0e      	ldr	r2, [pc, #56]	; (18d8 <rx_event+0xac>)
				rx_queue_transfer(i);
    18a0:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    18a2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    18a6:	6813      	ldr	r3, [r2, #0]
    18a8:	441c      	add	r4, r3
    18aa:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    18ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    18b0:	f7ff bf86 	b.w	17c0 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    18b4:	4628      	mov	r0, r5
	}
}
    18b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    18ba:	f7ff bf81 	b.w	17c0 <rx_queue_transfer>
    18be:	bf00      	nop
    18c0:	20001bae 	.word	0x20001bae
    18c4:	20001bc4 	.word	0x20001bc4
    18c8:	20001ba0 	.word	0x20001ba0
    18cc:	20001ba4 	.word	0x20001ba4
    18d0:	20001bb0 	.word	0x20001bb0
    18d4:	20001a8c 	.word	0x20001a8c
    18d8:	20001bc0 	.word	0x20001bc0
    18dc:	20200060 	.word	0x20200060

000018e0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    18e0:	4b1e      	ldr	r3, [pc, #120]	; (195c <usb_serial_flush_callback+0x7c>)
    18e2:	781a      	ldrb	r2, [r3, #0]
    18e4:	b95a      	cbnz	r2, 18fe <usb_serial_flush_callback+0x1e>
    18e6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    18ea:	4a1d      	ldr	r2, [pc, #116]	; (1960 <usb_serial_flush_callback+0x80>)
    18ec:	7812      	ldrb	r2, [r2, #0]
    18ee:	b132      	cbz	r2, 18fe <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    18f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    18f4:	4d1b      	ldr	r5, [pc, #108]	; (1964 <usb_serial_flush_callback+0x84>)
    18f6:	882a      	ldrh	r2, [r5, #0]
    18f8:	b912      	cbnz	r2, 1900 <usb_serial_flush_callback+0x20>
    18fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18fe:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1900:	4e19      	ldr	r6, [pc, #100]	; (1968 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1902:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1906:	4f19      	ldr	r7, [pc, #100]	; (196c <usb_serial_flush_callback+0x8c>)
    1908:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    190a:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    190c:	4c18      	ldr	r4, [pc, #96]	; (1970 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    190e:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1912:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1916:	4638      	mov	r0, r7
    1918:	4621      	mov	r1, r4
    191a:	f7ff fee5 	bl	16e8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    191e:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1922:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    1926:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    192a:	4b12      	ldr	r3, [pc, #72]	; (1974 <usb_serial_flush_callback+0x94>)
    192c:	6019      	str	r1, [r3, #0]
		location += 32;
    192e:	3120      	adds	r1, #32
	} while (location < end_addr);
    1930:	428a      	cmp	r2, r1
    1932:	d8fb      	bhi.n	192c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    1934:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1938:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    193c:	2004      	movs	r0, #4
    193e:	4639      	mov	r1, r7
    1940:	f7ff feea 	bl	1718 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1944:	7833      	ldrb	r3, [r6, #0]
    1946:	4a08      	ldr	r2, [pc, #32]	; (1968 <usb_serial_flush_callback+0x88>)
    1948:	3301      	adds	r3, #1
    194a:	b2db      	uxtb	r3, r3
    194c:	2b03      	cmp	r3, #3
    194e:	bf88      	it	hi
    1950:	2300      	movhi	r3, #0
    1952:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    1954:	2300      	movs	r3, #0
    1956:	802b      	strh	r3, [r5, #0]
    1958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    195c:	20001a9e 	.word	0x20001a9e
    1960:	20001a88 	.word	0x20001a88
    1964:	20001bc6 	.word	0x20001bc6
    1968:	20001a9f 	.word	0x20001a9f
    196c:	20001be0 	.word	0x20001be0
    1970:	20201060 	.word	0x20201060
    1974:	e000ef70 	.word	0xe000ef70

00001978 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    1978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    197c:	b085      	sub	sp, #20
    197e:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1980:	9101      	str	r1, [sp, #4]
    1982:	2900      	cmp	r1, #0
    1984:	f000 80a2 	beq.w	1acc <usb_serial_write.part.1+0x154>
    1988:	2300      	movs	r3, #0
    198a:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1ae8 <usb_serial_write.part.1+0x170>
    198e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 1adc <usb_serial_write.part.1+0x164>
    1992:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    1994:	4e4e      	ldr	r6, [pc, #312]	; (1ad0 <usb_serial_write.part.1+0x158>)
    1996:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    199a:	f8df a150 	ldr.w	sl, [pc, #336]	; 1aec <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    199e:	f8df b150 	ldr.w	fp, [pc, #336]	; 1af0 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    19a2:	4a4c      	ldr	r2, [pc, #304]	; (1ad4 <usb_serial_write.part.1+0x15c>)
    19a4:	7814      	ldrb	r4, [r2, #0]
    19a6:	4a4c      	ldr	r2, [pc, #304]	; (1ad8 <usb_serial_write.part.1+0x160>)
    19a8:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    19ac:	2b00      	cmp	r3, #0
    19ae:	d16e      	bne.n	1a8e <usb_serial_write.part.1+0x116>
    19b0:	461d      	mov	r5, r3
    19b2:	461c      	mov	r4, r3
    19b4:	e014      	b.n	19e0 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    19b6:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    19ba:	b904      	cbnz	r4, 19be <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    19bc:	6835      	ldr	r5, [r6, #0]
    19be:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    19c0:	2b00      	cmp	r3, #0
    19c2:	d15e      	bne.n	1a82 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    19c4:	6833      	ldr	r3, [r6, #0]
    19c6:	1b5b      	subs	r3, r3, r5
    19c8:	2b78      	cmp	r3, #120	; 0x78
    19ca:	d879      	bhi.n	1ac0 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    19cc:	f89a 3000 	ldrb.w	r3, [sl]
    19d0:	2b00      	cmp	r3, #0
    19d2:	d056      	beq.n	1a82 <usb_serial_write.part.1+0x10a>
			yield();
    19d4:	f001 f8cc 	bl	2b70 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    19d8:	f8b8 3000 	ldrh.w	r3, [r8]
    19dc:	2b00      	cmp	r3, #0
    19de:	d154      	bne.n	1a8a <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    19e0:	4638      	mov	r0, r7
    19e2:	f7ff febf 	bl	1764 <usb_transfer_status>
			if (!(status & 0x80)) {
    19e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    19ea:	4a3c      	ldr	r2, [pc, #240]	; (1adc <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    19ec:	d1e3      	bne.n	19b6 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    19ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
    19f2:	4a38      	ldr	r2, [pc, #224]	; (1ad4 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    19f4:	f889 0000 	strb.w	r0, [r9]
    19f8:	7814      	ldrb	r4, [r2, #0]
    19fa:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    19fc:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1a00:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    1a02:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1a04:	4936      	ldr	r1, [pc, #216]	; (1ae0 <usb_serial_write.part.1+0x168>)
    1a06:	4420      	add	r0, r4
		if (size >= tx_available) {
    1a08:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    1a0a:	4408      	add	r0, r1
		if (size >= tx_available) {
    1a0c:	d343      	bcc.n	1a96 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1a0e:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    1a10:	9902      	ldr	r1, [sp, #8]
    1a12:	f7fe fff1 	bl	9f8 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    1a16:	2300      	movs	r3, #0
    1a18:	4621      	mov	r1, r4
    1a1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1a1e:	4638      	mov	r0, r7
    1a20:	f7ff fe62 	bl	16e8 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1a24:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    1a28:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
    1a2c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1a30:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    1a34:	3320      	adds	r3, #32
	} while (location < end_addr);
    1a36:	429c      	cmp	r4, r3
    1a38:	d8fa      	bhi.n	1a30 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    1a3a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1a3e:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    1a42:	2004      	movs	r0, #4
    1a44:	4639      	mov	r1, r7
    1a46:	f7ff fe67 	bl	1718 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    1a4a:	4b22      	ldr	r3, [pc, #136]	; (1ad4 <usb_serial_write.part.1+0x15c>)
    1a4c:	4a21      	ldr	r2, [pc, #132]	; (1ad4 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    1a4e:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    1a50:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1a52:	4824      	ldr	r0, [pc, #144]	; (1ae4 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    1a54:	3301      	adds	r3, #1
    1a56:	b2db      	uxtb	r3, r3
    1a58:	2b03      	cmp	r3, #3
    1a5a:	bf88      	it	hi
    1a5c:	2300      	movhi	r3, #0
    1a5e:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    1a60:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    1a64:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    1a66:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    1a6a:	4413      	add	r3, r2
    1a6c:	9300      	str	r3, [sp, #0]
			data += tx_available;
    1a6e:	9b02      	ldr	r3, [sp, #8]
    1a70:	4413      	add	r3, r2
    1a72:	9302      	str	r3, [sp, #8]
    1a74:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    1a76:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1a7a:	9901      	ldr	r1, [sp, #4]
    1a7c:	1a8a      	subs	r2, r1, r2
    1a7e:	9201      	str	r2, [sp, #4]
    1a80:	d18f      	bne.n	19a2 <usb_serial_write.part.1+0x2a>
    1a82:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1a84:	b005      	add	sp, #20
    1a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a8a:	4a12      	ldr	r2, [pc, #72]	; (1ad4 <usb_serial_write.part.1+0x15c>)
    1a8c:	7814      	ldrb	r4, [r2, #0]
    1a8e:	461a      	mov	r2, r3
    1a90:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    1a94:	e7b4      	b.n	1a00 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    1a96:	9c01      	ldr	r4, [sp, #4]
    1a98:	9902      	ldr	r1, [sp, #8]
    1a9a:	4622      	mov	r2, r4
    1a9c:	9303      	str	r3, [sp, #12]
    1a9e:	f7fe ffab 	bl	9f8 <memcpy>
			tx_available -= size;
    1aa2:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1aa4:	4a0f      	ldr	r2, [pc, #60]	; (1ae4 <usb_serial_write.part.1+0x16c>)
    1aa6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    1aaa:	1b1b      	subs	r3, r3, r4
    1aac:	f8a8 3000 	strh.w	r3, [r8]
    1ab0:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    1ab2:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    1ab6:	4618      	mov	r0, r3
    1ab8:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1aba:	b005      	add	sp, #20
    1abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    1ac0:	2301      	movs	r3, #1
				return sent;
    1ac2:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    1ac4:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1ac6:	b005      	add	sp, #20
    1ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    1acc:	9801      	ldr	r0, [sp, #4]
    1ace:	e7d9      	b.n	1a84 <usb_serial_write.part.1+0x10c>
    1ad0:	20001a3c 	.word	0x20001a3c
    1ad4:	20001a9f 	.word	0x20001a9f
    1ad8:	20001be0 	.word	0x20001be0
    1adc:	20001bc5 	.word	0x20001bc5
    1ae0:	20201060 	.word	0x20201060
    1ae4:	402e0000 	.word	0x402e0000
    1ae8:	20001bc6 	.word	0x20001bc6
    1aec:	20001a88 	.word	0x20001a88
    1af0:	e000ef70 	.word	0xe000ef70

00001af4 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    1af4:	4770      	bx	lr
    1af6:	bf00      	nop

00001af8 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1af8:	4b31      	ldr	r3, [pc, #196]	; (1bc0 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    1afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1afe:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    1b00:	4f30      	ldr	r7, [pc, #192]	; (1bc4 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    1b02:	2b00      	cmp	r3, #0
    1b04:	d054      	beq.n	1bb0 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    1b06:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    1b0a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1bf8 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    1b0e:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    1b10:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1b14:	2100      	movs	r1, #0
    1b16:	2280      	movs	r2, #128	; 0x80
    1b18:	482b      	ldr	r0, [pc, #172]	; (1bc8 <usb_serial_configure+0xd0>)
	tx_head = 0;
    1b1a:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1b1c:	4e2b      	ldr	r6, [pc, #172]	; (1bcc <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1b1e:	f001 fe57 	bl	37d0 <memset>
	tx_head = 0;
    1b22:	4c2b      	ldr	r4, [pc, #172]	; (1bd0 <usb_serial_configure+0xd8>)
	tx_available = 0;
    1b24:	4b2b      	ldr	r3, [pc, #172]	; (1bd4 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1b26:	4629      	mov	r1, r5
    1b28:	f44f 7280 	mov.w	r2, #256	; 0x100
    1b2c:	482a      	ldr	r0, [pc, #168]	; (1bd8 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    1b2e:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1b30:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    1b32:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1b34:	f001 fe4c 	bl	37d0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1b38:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b3a:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1b3c:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b3e:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    1b40:	60b5      	str	r5, [r6, #8]
    1b42:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1b44:	4925      	ldr	r1, [pc, #148]	; (1bdc <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1b46:	4e26      	ldr	r6, [pc, #152]	; (1be0 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    1b48:	4826      	ldr	r0, [pc, #152]	; (1be4 <usb_serial_configure+0xec>)
	rx_available = 0;
    1b4a:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 1bfc <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    1b4e:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b50:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    1b52:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b54:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    1b56:	6035      	str	r5, [r6, #0]
    1b58:	6075      	str	r5, [r6, #4]
    1b5a:	60b5      	str	r5, [r6, #8]
    1b5c:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    1b5e:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1b62:	f7ff fd8d 	bl	1680 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1b66:	f8b8 1000 	ldrh.w	r1, [r8]
    1b6a:	462a      	mov	r2, r5
    1b6c:	4b1e      	ldr	r3, [pc, #120]	; (1be8 <usb_serial_configure+0xf0>)
    1b6e:	2003      	movs	r0, #3
    1b70:	f7ff fd54 	bl	161c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1b74:	462b      	mov	r3, r5
    1b76:	8839      	ldrh	r1, [r7, #0]
    1b78:	2201      	movs	r2, #1
    1b7a:	2004      	movs	r0, #4
    1b7c:	f7ff fd80 	bl	1680 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1b80:	4620      	mov	r0, r4
    1b82:	3401      	adds	r4, #1
    1b84:	f7ff fe1c 	bl	17c0 <rx_queue_transfer>
    1b88:	2c08      	cmp	r4, #8
    1b8a:	d1f9      	bne.n	1b80 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    1b8c:	4b17      	ldr	r3, [pc, #92]	; (1bec <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    1b8e:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1b90:	4817      	ldr	r0, [pc, #92]	; (1bf0 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    1b92:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    1b94:	4c17      	ldr	r4, [pc, #92]	; (1bf4 <usb_serial_configure+0xfc>)
    1b96:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1b98:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1ba0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    1ba4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1ba8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    1bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    1bb0:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    1bb2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1bf8 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    1bb6:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    1bb8:	f8a8 3000 	strh.w	r3, [r8]
    1bbc:	e7aa      	b.n	1b14 <usb_serial_configure+0x1c>
    1bbe:	bf00      	nop
    1bc0:	20001a60 	.word	0x20001a60
    1bc4:	20001a9c 	.word	0x20001a9c
    1bc8:	20001be0 	.word	0x20001be0
    1bcc:	20001bb0 	.word	0x20001bb0
    1bd0:	20001a9f 	.word	0x20001a9f
    1bd4:	20001bc6 	.word	0x20001bc6
    1bd8:	20001aa0 	.word	0x20001aa0
    1bdc:	20001bc4 	.word	0x20001bc4
    1be0:	20001a8c 	.word	0x20001a8c
    1be4:	20001ba0 	.word	0x20001ba0
    1be8:	0000182d 	.word	0x0000182d
    1bec:	402e0000 	.word	0x402e0000
    1bf0:	20001a50 	.word	0x20001a50
    1bf4:	000018e1 	.word	0x000018e1
    1bf8:	20001bae 	.word	0x20001bae
    1bfc:	20001bc0 	.word	0x20001bc0

00001c00 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1c00:	4b31      	ldr	r3, [pc, #196]	; (1cc8 <usb_serial_read+0xc8>)
    1c02:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1c06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    1c0a:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    1c0c:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    1c0e:	4b2f      	ldr	r3, [pc, #188]	; (1ccc <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1c10:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    1c12:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1c14:	2900      	cmp	r1, #0
    1c16:	d053      	beq.n	1cc0 <usb_serial_read+0xc0>
    1c18:	4b2d      	ldr	r3, [pc, #180]	; (1cd0 <usb_serial_read+0xd0>)
    1c1a:	b2e4      	uxtb	r4, r4
    1c1c:	781b      	ldrb	r3, [r3, #0]
    1c1e:	429c      	cmp	r4, r3
    1c20:	d050      	beq.n	1cc4 <usb_serial_read+0xc4>
    1c22:	4682      	mov	sl, r0
    1c24:	2700      	movs	r7, #0
    1c26:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 1ce8 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    1c2a:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1c2c:	4b29      	ldr	r3, [pc, #164]	; (1cd4 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    1c2e:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c32:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1c34:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1c36:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    1c38:	4b27      	ldr	r3, [pc, #156]	; (1cd8 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    1c3a:	bf28      	it	cs
    1c3c:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    1c3e:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1c40:	4b24      	ldr	r3, [pc, #144]	; (1cd4 <usb_serial_read+0xd4>)
    1c42:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    1c46:	4b25      	ldr	r3, [pc, #148]	; (1cdc <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c48:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1c4c:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c50:	4b23      	ldr	r3, [pc, #140]	; (1ce0 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    1c52:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c56:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    1c58:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c5a:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    1c5c:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    1c5e:	d219      	bcs.n	1c94 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    1c60:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    1c64:	4642      	mov	r2, r8
    1c66:	4419      	add	r1, r3
    1c68:	f7fe fec6 	bl	9f8 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    1c6c:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1c6e:	f8db 1000 	ldr.w	r1, [fp]
    1c72:	4648      	mov	r0, r9
			rx_index[i] += len;
    1c74:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1c78:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    1c7c:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    1c7e:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    1c82:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1c86:	4b17      	ldr	r3, [pc, #92]	; (1ce4 <usb_serial_read+0xe4>)
    1c88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1c8c:	601a      	str	r2, [r3, #0]
	return count;
}
    1c8e:	b003      	add	sp, #12
    1c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    1c94:	f7fe feb0 	bl	9f8 <memcpy>
			p += avail;
			rx_available -= avail;
    1c98:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1c9c:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    1c9e:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    1ca0:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    1ca2:	44b2      	add	sl, r6
			rx_available -= avail;
    1ca4:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    1ca8:	4a08      	ldr	r2, [pc, #32]	; (1ccc <usb_serial_read+0xcc>)
    1caa:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    1cac:	f7ff fd88 	bl	17c0 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    1cb0:	45b9      	cmp	r9, r7
    1cb2:	d903      	bls.n	1cbc <usb_serial_read+0xbc>
    1cb4:	4b06      	ldr	r3, [pc, #24]	; (1cd0 <usb_serial_read+0xd0>)
    1cb6:	781b      	ldrb	r3, [r3, #0]
    1cb8:	429c      	cmp	r4, r3
    1cba:	d1b6      	bne.n	1c2a <usb_serial_read+0x2a>
    1cbc:	4638      	mov	r0, r7
    1cbe:	e7e2      	b.n	1c86 <usb_serial_read+0x86>
    1cc0:	4608      	mov	r0, r1
    1cc2:	e7e0      	b.n	1c86 <usb_serial_read+0x86>
    1cc4:	2000      	movs	r0, #0
    1cc6:	e7de      	b.n	1c86 <usb_serial_read+0x86>
    1cc8:	e000e18c 	.word	0xe000e18c
    1ccc:	20001ba0 	.word	0x20001ba0
    1cd0:	20001bc4 	.word	0x20001bc4
    1cd4:	20001a8c 	.word	0x20001a8c
    1cd8:	20001ba4 	.word	0x20001ba4
    1cdc:	20001bb0 	.word	0x20001bb0
    1ce0:	20200060 	.word	0x20200060
    1ce4:	e000e10c 	.word	0xe000e10c
    1ce8:	20001bc0 	.word	0x20001bc0

00001cec <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1cec:	4b0b      	ldr	r3, [pc, #44]	; (1d1c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    1cee:	4a0c      	ldr	r2, [pc, #48]	; (1d20 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1cf0:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    1cf2:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    1cf4:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    1cf6:	4293      	cmp	r3, r2
    1cf8:	d00d      	beq.n	1d16 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    1cfa:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    1cfc:	4809      	ldr	r0, [pc, #36]	; (1d24 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1cfe:	4a0a      	ldr	r2, [pc, #40]	; (1d28 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1d00:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1d02:	490a      	ldr	r1, [pc, #40]	; (1d2c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    1d04:	bf28      	it	cs
    1d06:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    1d08:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    1d0a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    1d0e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    1d12:	5c58      	ldrb	r0, [r3, r1]
    1d14:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    1d16:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    1d1a:	4770      	bx	lr
    1d1c:	20001ba0 	.word	0x20001ba0
    1d20:	20001bc4 	.word	0x20001bc4
    1d24:	20001ba4 	.word	0x20001ba4
    1d28:	20200060 	.word	0x20200060
    1d2c:	20001a8c 	.word	0x20001a8c

00001d30 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    1d30:	4b01      	ldr	r3, [pc, #4]	; (1d38 <usb_serial_available+0x8>)
    1d32:	6818      	ldr	r0, [r3, #0]
}
    1d34:	4770      	bx	lr
    1d36:	bf00      	nop
    1d38:	20001bc0 	.word	0x20001bc0

00001d3c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    1d3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    1d40:	4e15      	ldr	r6, [pc, #84]	; (1d98 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    1d42:	4d16      	ldr	r5, [pc, #88]	; (1d9c <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    1d44:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    1d46:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    1d48:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    1d4a:	429c      	cmp	r4, r3
    1d4c:	d021      	beq.n	1d92 <usb_serial_flush_input+0x56>
    1d4e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 1da4 <usb_serial_flush_input+0x68>
    1d52:	f8df b054 	ldr.w	fp, [pc, #84]	; 1da8 <usb_serial_flush_input+0x6c>
    1d56:	f8df 8054 	ldr.w	r8, [pc, #84]	; 1dac <usb_serial_flush_input+0x70>
    1d5a:	4f11      	ldr	r7, [pc, #68]	; (1da0 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    1d5c:	3401      	adds	r4, #1
    1d5e:	2c08      	cmp	r4, #8
    1d60:	fa5f fa84 	uxtb.w	sl, r4
    1d64:	d901      	bls.n	1d6a <usb_serial_flush_input+0x2e>
    1d66:	2400      	movs	r4, #0
    1d68:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    1d6a:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    1d6e:	f8db 2000 	ldr.w	r2, [fp]
    1d72:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    1d76:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    1d78:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    1d7c:	1a5b      	subs	r3, r3, r1
    1d7e:	1ad3      	subs	r3, r2, r3
    1d80:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    1d84:	f7ff fd1c 	bl	17c0 <rx_queue_transfer>
		rx_tail = tail;
    1d88:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    1d8c:	782b      	ldrb	r3, [r5, #0]
    1d8e:	429c      	cmp	r4, r3
    1d90:	d1e4      	bne.n	1d5c <usb_serial_flush_input+0x20>
    1d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d96:	bf00      	nop
    1d98:	20001ba0 	.word	0x20001ba0
    1d9c:	20001bc4 	.word	0x20001bc4
    1da0:	20001a8c 	.word	0x20001a8c
    1da4:	20001ba4 	.word	0x20001ba4
    1da8:	20001bc0 	.word	0x20001bc0
    1dac:	20001bb0 	.word	0x20001bb0

00001db0 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    1db0:	b500      	push	{lr}
    1db2:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    1db4:	2101      	movs	r1, #1
    1db6:	f10d 0007 	add.w	r0, sp, #7
    1dba:	f7ff ff21 	bl	1c00 <usb_serial_read>
    1dbe:	b120      	cbz	r0, 1dca <usb_serial_getchar+0x1a>
    1dc0:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    1dc4:	b003      	add	sp, #12
    1dc6:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    1dca:	f04f 30ff 	mov.w	r0, #4294967295
    1dce:	e7f9      	b.n	1dc4 <usb_serial_getchar+0x14>

00001dd0 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1dd0:	4b09      	ldr	r3, [pc, #36]	; (1df8 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1dd2:	b500      	push	{lr}
    1dd4:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1dd6:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    1dd8:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1ddc:	b923      	cbnz	r3, 1de8 <usb_serial_putchar+0x18>
    1dde:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    1de2:	b003      	add	sp, #12
    1de4:	f85d fb04 	ldr.w	pc, [sp], #4
    1de8:	2101      	movs	r1, #1
    1dea:	f10d 0007 	add.w	r0, sp, #7
    1dee:	f7ff fdc3 	bl	1978 <usb_serial_write.part.1>
    1df2:	b003      	add	sp, #12
    1df4:	f85d fb04 	ldr.w	pc, [sp], #4
    1df8:	20001a88 	.word	0x20001a88

00001dfc <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    1dfc:	4b04      	ldr	r3, [pc, #16]	; (1e10 <usb_serial_write+0x14>)
    1dfe:	781b      	ldrb	r3, [r3, #0]
    1e00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    1e04:	b10b      	cbz	r3, 1e0a <usb_serial_write+0xe>
    1e06:	f7ff bdb7 	b.w	1978 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    1e0a:	4610      	mov	r0, r2
    1e0c:	4770      	bx	lr
    1e0e:	bf00      	nop
    1e10:	20001a88 	.word	0x20001a88

00001e14 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    1e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1e18:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    1e1a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1e5c <usb_serial_write_buffer_free+0x48>
    1e1e:	2301      	movs	r3, #1
    1e20:	4d0c      	ldr	r5, [pc, #48]	; (1e54 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    1e22:	4627      	mov	r7, r4
    1e24:	4e0c      	ldr	r6, [pc, #48]	; (1e58 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    1e26:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1e2a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1e2c:	4628      	mov	r0, r5
    1e2e:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    1e30:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1e32:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    1e36:	d005      	beq.n	1e44 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    1e38:	f7ff fc94 	bl	1764 <usb_transfer_status>
    1e3c:	0603      	lsls	r3, r0, #24
    1e3e:	bf58      	it	pl
    1e40:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    1e44:	2c04      	cmp	r4, #4
    1e46:	d1f0      	bne.n	1e2a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    1e48:	2300      	movs	r3, #0
	return sum;
}
    1e4a:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    1e4c:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    1e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e54:	20001be0 	.word	0x20001be0
    1e58:	20001a9f 	.word	0x20001a9f
    1e5c:	20001a9e 	.word	0x20001a9e

00001e60 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    1e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    1e64:	4b1f      	ldr	r3, [pc, #124]	; (1ee4 <usb_serial_flush_output+0x84>)
    1e66:	781b      	ldrb	r3, [r3, #0]
    1e68:	b113      	cbz	r3, 1e70 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    1e6a:	4d1f      	ldr	r5, [pc, #124]	; (1ee8 <usb_serial_flush_output+0x88>)
    1e6c:	882a      	ldrh	r2, [r5, #0]
    1e6e:	b90a      	cbnz	r2, 1e74 <usb_serial_flush_output+0x14>
    1e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1e74:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1efc <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1e78:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1e7c:	4e1b      	ldr	r6, [pc, #108]	; (1eec <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1e7e:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    1e82:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1e86:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1e88:	4c19      	ldr	r4, [pc, #100]	; (1ef0 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1e8a:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    1e8c:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1e90:	4f18      	ldr	r7, [pc, #96]	; (1ef4 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1e92:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1e96:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    1e98:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1e9c:	4621      	mov	r1, r4
    1e9e:	f7ff fc23 	bl	16e8 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    1ea2:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    1ea6:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    1eaa:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    1eae:	4b12      	ldr	r3, [pc, #72]	; (1ef8 <usb_serial_flush_output+0x98>)
    1eb0:	6019      	str	r1, [r3, #0]
		location += 32;
    1eb2:	3120      	adds	r1, #32
	} while (location < end_addr);
    1eb4:	428a      	cmp	r2, r1
    1eb6:	d8fb      	bhi.n	1eb0 <usb_serial_flush_output+0x50>
	asm("dsb");
    1eb8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1ebc:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1ec0:	2004      	movs	r0, #4
    1ec2:	4631      	mov	r1, r6
    1ec4:	f7ff fc28 	bl	1718 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1ec8:	f898 3000 	ldrb.w	r3, [r8]
    1ecc:	4a0b      	ldr	r2, [pc, #44]	; (1efc <usb_serial_flush_output+0x9c>)
    1ece:	3301      	adds	r3, #1
    1ed0:	b2db      	uxtb	r3, r3
    1ed2:	2b03      	cmp	r3, #3
    1ed4:	bf88      	it	hi
    1ed6:	2300      	movhi	r3, #0
    1ed8:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    1eda:	2300      	movs	r3, #0
    1edc:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    1ede:	703b      	strb	r3, [r7, #0]
    1ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1ee4:	20001a88 	.word	0x20001a88
    1ee8:	20001bc6 	.word	0x20001bc6
    1eec:	20001be0 	.word	0x20001be0
    1ef0:	20201060 	.word	0x20201060
    1ef4:	20001a9e 	.word	0x20001a9e
    1ef8:	e000ef70 	.word	0xe000ef70
    1efc:	20001a9f 	.word	0x20001a9f

00001f00 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    1f00:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1f02:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1f06:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    1f08:	7f43      	ldrb	r3, [r0, #29]
    1f0a:	b933      	cbnz	r3, 1f1a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    1f0c:	7f01      	ldrb	r1, [r0, #28]
    1f0e:	2901      	cmp	r1, #1
    1f10:	d008      	beq.n	1f24 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    1f12:	2903      	cmp	r1, #3
    1f14:	d010      	beq.n	1f38 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    1f16:	2301      	movs	r3, #1
    1f18:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1f1a:	b902      	cbnz	r2, 1f1e <EventResponder::triggerEventNotImmediate()+0x1e>
    1f1c:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    1f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f22:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    1f24:	4c11      	ldr	r4, [pc, #68]	; (1f6c <EventResponder::triggerEventNotImmediate()+0x6c>)
    1f26:	6821      	ldr	r1, [r4, #0]
    1f28:	b1a1      	cbz	r1, 1f54 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    1f2a:	4911      	ldr	r1, [pc, #68]	; (1f70 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    1f2c:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    1f2e:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    1f30:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    1f32:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    1f34:	6158      	str	r0, [r3, #20]
    1f36:	e7ee      	b.n	1f16 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    1f38:	4c0e      	ldr	r4, [pc, #56]	; (1f74 <EventResponder::triggerEventNotImmediate()+0x74>)
    1f3a:	6821      	ldr	r1, [r4, #0]
    1f3c:	b181      	cbz	r1, 1f60 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    1f3e:	490e      	ldr	r1, [pc, #56]	; (1f78 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    1f40:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    1f42:	680b      	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    1f44:	6008      	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    1f46:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    1f48:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    1f4a:	4b0c      	ldr	r3, [pc, #48]	; (1f7c <EventResponder::triggerEventNotImmediate()+0x7c>)
    1f4c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    1f50:	6019      	str	r1, [r3, #0]
    1f52:	e7e0      	b.n	1f16 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    1f54:	4b06      	ldr	r3, [pc, #24]	; (1f70 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    1f56:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    1f58:	6181      	str	r1, [r0, #24]
				firstYield = this;
    1f5a:	6020      	str	r0, [r4, #0]
				lastYield = this;
    1f5c:	6018      	str	r0, [r3, #0]
    1f5e:	e7da      	b.n	1f16 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    1f60:	4b05      	ldr	r3, [pc, #20]	; (1f78 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    1f62:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    1f64:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    1f66:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    1f68:	6018      	str	r0, [r3, #0]
    1f6a:	e7ee      	b.n	1f4a <EventResponder::triggerEventNotImmediate()+0x4a>
    1f6c:	20001c70 	.word	0x20001c70
    1f70:	20001c6c 	.word	0x20001c6c
    1f74:	20001c60 	.word	0x20001c60
    1f78:	20001c64 	.word	0x20001c64
    1f7c:	e000ed04 	.word	0xe000ed04

00001f80 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1f80:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1f82:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1f84:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1f86:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1f88:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1f8a:	d003      	beq.n	1f94 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1f90:	f7ff bfb6 	b.w	1f00 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1f94:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    1f96:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1f9a:	4718      	bx	r3

00001f9c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1f9c:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1f9e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    1fa2:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1fa4:	4c0c      	ldr	r4, [pc, #48]	; (1fd8 <EventResponder::runFromInterrupt()+0x3c>)
    1fa6:	6823      	ldr	r3, [r4, #0]
		if (first) {
    1fa8:	b18b      	cbz	r3, 1fce <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1faa:	4e0c      	ldr	r6, [pc, #48]	; (1fdc <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    1fac:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    1fae:	695a      	ldr	r2, [r3, #20]
    1fb0:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    1fb2:	b17a      	cbz	r2, 1fd4 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    1fb4:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1fb6:	b901      	cbnz	r1, 1fba <EventResponder::runFromInterrupt()+0x1e>
    1fb8:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    1fba:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    1fbc:	4618      	mov	r0, r3
    1fbe:	689b      	ldr	r3, [r3, #8]
    1fc0:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1fc2:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    1fc6:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1fc8:	6823      	ldr	r3, [r4, #0]
		if (first) {
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d1ef      	bne.n	1fae <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1fce:	b901      	cbnz	r1, 1fd2 <EventResponder::runFromInterrupt()+0x36>
    1fd0:	b662      	cpsie	i
    1fd2:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1fd4:	6032      	str	r2, [r6, #0]
    1fd6:	e7ee      	b.n	1fb6 <EventResponder::runFromInterrupt()+0x1a>
    1fd8:	20001c60 	.word	0x20001c60
    1fdc:	20001c64 	.word	0x20001c64

00001fe0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    1fe0:	f7ff bfdc 	b.w	1f9c <EventResponder::runFromInterrupt()>

00001fe4 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    1fe4:	4a18      	ldr	r2, [pc, #96]	; (2048 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    1fe6:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    1fe8:	6814      	ldr	r4, [r2, #0]
    1fea:	2c00      	cmp	r4, #0
    1fec:	d028      	beq.n	2040 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    1fee:	6803      	ldr	r3, [r0, #0]
    1ff0:	6821      	ldr	r1, [r4, #0]
    1ff2:	428b      	cmp	r3, r1
    1ff4:	d20f      	bcs.n	2016 <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    1ff6:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    1ff8:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    1ffa:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    1ffc:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    1ffe:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    2000:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    2002:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    2004:	2302      	movs	r3, #2
}
    2006:	bc30      	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    2008:	7503      	strb	r3, [r0, #20]
}
    200a:	4770      	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    200c:	6003      	str	r3, [r0, #0]
    200e:	4614      	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    2010:	6811      	ldr	r1, [r2, #0]
    2012:	428b      	cmp	r3, r1
    2014:	d308      	bcc.n	2028 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    2016:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    2018:	1a5b      	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    201a:	2a00      	cmp	r2, #0
    201c:	d1f6      	bne.n	200c <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    201e:	6082      	str	r2, [r0, #8]
		_prev = timer;
    2020:	60c4      	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    2022:	6003      	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    2024:	60a0      	str	r0, [r4, #8]
    2026:	e7ed      	b.n	2004 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    2028:	68d5      	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    202a:	1acb      	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    202c:	6082      	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    202e:	2202      	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    2030:	60c5      	str	r5, [r0, #12]
				timer->_prev = this;
    2032:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    2034:	68c1      	ldr	r1, [r0, #12]
    2036:	6088      	str	r0, [r1, #8]
				timer->_ms -= _ms;
    2038:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    203a:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    203c:	bc30      	pop	{r4, r5}
    203e:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    2040:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    2042:	60c4      	str	r4, [r0, #12]
		listActive = this;
    2044:	6010      	str	r0, [r2, #0]
    2046:	e7dd      	b.n	2004 <MillisTimer::addToActiveList()+0x20>
    2048:	20001c68 	.word	0x20001c68

0000204c <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    204e:	4e22      	ldr	r6, [pc, #136]	; (20d8 <MillisTimer::runFromTimer()+0x8c>)
    2050:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    2052:	b32c      	cbz	r4, 20a0 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    2054:	6823      	ldr	r3, [r4, #0]
    2056:	2b00      	cmp	r3, #0
    2058:	d13a      	bne.n	20d0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    205a:	461d      	mov	r5, r3
    205c:	4f1f      	ldr	r7, [pc, #124]	; (20dc <MillisTimer::runFromTimer()+0x90>)
    205e:	e004      	b.n	206a <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    2060:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    2062:	b1ec      	cbz	r4, 20a0 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    2064:	6823      	ldr	r3, [r4, #0]
    2066:	2b00      	cmp	r3, #0
    2068:	d132      	bne.n	20d0 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    206a:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    206c:	b103      	cbz	r3, 2070 <MillisTimer::runFromTimer()+0x24>
    206e:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    2070:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    2072:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    2074:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    2076:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    2078:	681b      	ldr	r3, [r3, #0]
    207a:	42bb      	cmp	r3, r7
    207c:	d121      	bne.n	20c2 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    207e:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2080:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2082:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2084:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    2086:	d020      	beq.n	20ca <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    2088:	f7ff ff3a 	bl	1f00 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    208c:	6863      	ldr	r3, [r4, #4]
    208e:	2b00      	cmp	r3, #0
    2090:	d0e6      	beq.n	2060 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    2092:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    2094:	4620      	mov	r0, r4
    2096:	f7ff ffa5 	bl	1fe4 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    209a:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    209c:	2c00      	cmp	r4, #0
    209e:	d1e1      	bne.n	2064 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    20a0:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    20a4:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    20a6:	4a0e      	ldr	r2, [pc, #56]	; (20e0 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    20a8:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    20aa:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    20ac:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    20ae:	b903      	cbnz	r3, 20b2 <MillisTimer::runFromTimer()+0x66>
    20b0:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    20b2:	b128      	cbz	r0, 20c0 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    20b4:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    20b6:	f7ff ff95 	bl	1fe4 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    20ba:	4620      	mov	r0, r4
    20bc:	2800      	cmp	r0, #0
    20be:	d1f9      	bne.n	20b4 <MillisTimer::runFromTimer()+0x68>
    20c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    20c2:	4622      	mov	r2, r4
    20c4:	2100      	movs	r1, #0
    20c6:	4798      	blx	r3
    20c8:	e7e0      	b.n	208c <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    20ca:	6883      	ldr	r3, [r0, #8]
    20cc:	4798      	blx	r3
    20ce:	e7dd      	b.n	208c <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    20d0:	3b01      	subs	r3, #1
    20d2:	6023      	str	r3, [r4, #0]
			break;
    20d4:	e7e4      	b.n	20a0 <MillisTimer::runFromTimer()+0x54>
    20d6:	bf00      	nop
    20d8:	20001c68 	.word	0x20001c68
    20dc:	00001f81 	.word	0x00001f81
    20e0:	20001c78 	.word	0x20001c78

000020e4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    20e4:	4a04      	ldr	r2, [pc, #16]	; (20f8 <systick_isr+0x14>)
    20e6:	4b05      	ldr	r3, [pc, #20]	; (20fc <systick_isr+0x18>)
    20e8:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    20ea:	4a05      	ldr	r2, [pc, #20]	; (2100 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    20ec:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    20ee:	6813      	ldr	r3, [r2, #0]
    20f0:	3301      	adds	r3, #1
    20f2:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    20f4:	f7ff bfaa 	b.w	204c <MillisTimer::runFromTimer()>
    20f8:	e0001004 	.word	0xe0001004
    20fc:	20001a34 	.word	0x20001a34
    2100:	20001a3c 	.word	0x20001a3c

00002104 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    2104:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    2108:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    210c:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    210e:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    2110:	4293      	cmp	r3, r2
    2112:	d202      	bcs.n	211a <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    2114:	1e50      	subs	r0, r2, #1
    2116:	1ac0      	subs	r0, r0, r3
}
    2118:	4770      	bx	lr
{
	uint32_t head, tail;

	head = tx_buffer_head_;
	tail = tx_buffer_tail_;
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    211a:	6b40      	ldr	r0, [r0, #52]	; 0x34
    211c:	3801      	subs	r0, #1
    211e:	4410      	add	r0, r2
    2120:	1ac0      	subs	r0, r0, r3
    2122:	4770      	bx	lr

00002124 <HardwareSerial::available()>:

int HardwareSerial::available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    2124:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    2128:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    212c:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    212e:	b29b      	uxth	r3, r3
	if (head >= tail) return head - tail;
    2130:	429a      	cmp	r2, r3
    2132:	d203      	bcs.n	213c <HardwareSerial::available()+0x18>
	return rx_buffer_total_size_ + head - tail;
    2134:	6b80      	ldr	r0, [r0, #56]	; 0x38
    2136:	4410      	add	r0, r2
    2138:	1ac0      	subs	r0, r0, r3
}
    213a:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head >= tail) return head - tail;
    213c:	1ad0      	subs	r0, r2, r3
    213e:	4770      	bx	lr

00002140 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    2140:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    2144:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    2148:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    214a:	b29b      	uxth	r3, r3
	if (head == tail) return -1;
    214c:	429a      	cmp	r2, r3
    214e:	d010      	beq.n	2172 <HardwareSerial::peek()+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2150:	3301      	adds	r3, #1
    2152:	6b81      	ldr	r1, [r0, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    2154:	6b02      	ldr	r2, [r0, #48]	; 0x30
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2156:	428b      	cmp	r3, r1
    2158:	bf28      	it	cs
    215a:	2300      	movcs	r3, #0
	if (tail < rx_buffer_size_) {
    215c:	4293      	cmp	r3, r2
    215e:	d304      	bcc.n	216a <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    2160:	1a9b      	subs	r3, r3, r2
    2162:	6a42      	ldr	r2, [r0, #36]	; 0x24
    2164:	5cd0      	ldrb	r0, [r2, r3]
    2166:	b2c0      	uxtb	r0, r0
    2168:	4770      	bx	lr
	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
    216a:	6a02      	ldr	r2, [r0, #32]
    216c:	5cd0      	ldrb	r0, [r2, r3]
    216e:	b2c0      	uxtb	r0, r0
    2170:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
    2172:	f04f 30ff 	mov.w	r0, #4294967295
	if (tail < rx_buffer_size_) {
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}
    2176:	4770      	bx	lr

00002178 <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    2178:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    217c:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    2180:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    2182:	b29b      	uxth	r3, r3
	if (head == tail) return -1;
    2184:	4299      	cmp	r1, r3
    2186:	d029      	beq.n	21dc <HardwareSerial::read()+0x64>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2188:	3301      	adds	r3, #1
		return rx_buffer_storage_[tail-rx_buffer_size_];
	}
}

int HardwareSerial::read(void)
{
    218a:	b470      	push	{r4, r5, r6}
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    218c:	6b84      	ldr	r4, [r0, #56]	; 0x38
    218e:	42a3      	cmp	r3, r4
    2190:	d217      	bcs.n	21c2 <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    2192:	6b02      	ldr	r2, [r0, #48]	; 0x30
    2194:	b29e      	uxth	r6, r3
    2196:	4293      	cmp	r3, r2
    2198:	d218      	bcs.n	21cc <HardwareSerial::read()+0x54>
		c = rx_buffer_[tail];
    219a:	6a02      	ldr	r2, [r0, #32]
    219c:	5cd2      	ldrb	r2, [r2, r3]
    219e:	b2d2      	uxtb	r2, r2
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
	if (rts_pin_baseReg_) {
    21a0:	6d85      	ldr	r5, [r0, #88]	; 0x58
	if (tail < rx_buffer_size_) {
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    21a2:	f8a0 604c 	strh.w	r6, [r0, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    21a6:	b1b5      	cbz	r5, 21d6 <HardwareSerial::read()+0x5e>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    21a8:	428b      	cmp	r3, r1
		else avail = rx_buffer_total_size_ + head - tail;
    21aa:	bf88      	it	hi
    21ac:	1909      	addhi	r1, r1, r4
    21ae:	1acb      	subs	r3, r1, r3

		if (avail <= rts_low_watermark_) rts_assert();
    21b0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    21b2:	428b      	cmp	r3, r1
    21b4:	d80f      	bhi.n	21d6 <HardwareSerial::read()+0x5e>
	enableSerialEvents(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    21b6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    21b8:	4610      	mov	r0, r2
	enableSerialEvents(); 		// Enable the processing of serialEvent for this object
};

inline void HardwareSerial::rts_assert() 
{
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    21ba:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    21be:	bc70      	pop	{r4, r5, r6}
    21c0:	4770      	bx	lr
    21c2:	2600      	movs	r6, #0

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
	if (tail < rx_buffer_size_) {
    21c4:	6b02      	ldr	r2, [r0, #48]	; 0x30
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
	if (++tail >= rx_buffer_total_size_) tail = 0;
    21c6:	4633      	mov	r3, r6
	if (tail < rx_buffer_size_) {
    21c8:	4293      	cmp	r3, r2
    21ca:	d3e6      	bcc.n	219a <HardwareSerial::read()+0x22>
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    21cc:	1a9a      	subs	r2, r3, r2
    21ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
    21d0:	5caa      	ldrb	r2, [r5, r2]
    21d2:	b2d2      	uxtb	r2, r2
    21d4:	e7e4      	b.n	21a0 <HardwareSerial::read()+0x28>
		if (head >= tail) avail = head - tail;
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
    21d6:	4610      	mov	r0, r2
}	
    21d8:	bc70      	pop	{r4, r5, r6}
    21da:	4770      	bx	lr
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
	tail = rx_buffer_tail_;
	if (head == tail) return -1;
    21dc:	f04f 30ff 	mov.w	r0, #4294967295
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
	}
	return c;
}	
    21e0:	4770      	bx	lr
    21e2:	bf00      	nop

000021e4 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    21e4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    21e8:	b143      	cbz	r3, 21fc <HardwareSerial::flush()+0x18>
	}
	return c;
}	

void HardwareSerial::flush(void)
{
    21ea:	b510      	push	{r4, lr}
    21ec:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    21ee:	f000 fcbf 	bl	2b70 <yield>
    21f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    21f6:	2b00      	cmp	r3, #0
    21f8:	d1f9      	bne.n	21ee <HardwareSerial::flush()+0xa>
    21fa:	bd10      	pop	{r4, pc}
    21fc:	4770      	bx	lr
    21fe:	bf00      	nop

00002200 <nvic_execution_priority()>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    2200:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    2204:	b9b8      	cbnz	r0, 2236 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2206:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    220a:	b94b      	cbnz	r3, 2220 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    220c:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    2210:	b93a      	cbnz	r2, 2222 <nvic_execution_priority()+0x22>
#define CTRL_TX_INACTIVE	CTRL_ENABLE 

// Copied from T3.x - probably should move to other location.
int nvic_execution_priority(void)
{
	uint32_t priority=256;
    2212:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    2216:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    221a:	b150      	cbz	r0, 2232 <nvic_execution_priority()+0x32>
    221c:	4298      	cmp	r0, r3
    221e:	d208      	bcs.n	2232 <nvic_execution_priority()+0x32>
	return priority;
}
    2220:	4770      	bx	lr
	if (faultmask) return -1;
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
    2222:	2a0f      	cmp	r2, #15
    2224:	d9f7      	bls.n	2216 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    2226:	4b05      	ldr	r3, [pc, #20]	; (223c <nvic_execution_priority()+0x3c>)
    2228:	5cd3      	ldrb	r3, [r2, r3]
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    222a:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    222e:	2800      	cmp	r0, #0
    2230:	d1f4      	bne.n	221c <nvic_execution_priority()+0x1c>
    2232:	4618      	mov	r0, r3
    2234:	4770      	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    2236:	f04f 30ff 	mov.w	r0, #4294967295
    223a:	e7f1      	b.n	2220 <nvic_execution_priority()+0x20>
    223c:	e000e3f0 	.word	0xe000e3f0

00002240 <HardwareSerial::begin(unsigned long, unsigned short)>:


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    2240:	ee07 1a90 	vmov	s15, r1
    2244:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 2470 <HardwareSerial::begin(unsigned long, unsigned short)+0x230>
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    2248:	2104      	movs	r1, #4
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
    224a:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    224e:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    2252:	ed9f 6a88 	vldr	s12, [pc, #544]	; 2474 <HardwareSerial::begin(unsigned long, unsigned short)+0x234>
	return priority;
}


void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
    2256:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
    2258:	eec7 5a27 	vdiv.f32	s11, s14, s15
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
    225c:	460c      	mov	r4, r1
void HardwareSerial::begin(uint32_t baud, uint16_t format)
{
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
    225e:	2601      	movs	r6, #1
    2260:	f641 75ff 	movw	r5, #8191	; 0x1fff
    2264:	e01d      	b.n	22a2 <HardwareSerial::begin(unsigned long, unsigned short)+0x62>
    2266:	42ab      	cmp	r3, r5
    2268:	bfa8      	it	ge
    226a:	462b      	movge	r3, r5
    226c:	ee07 3a90 	vmov	s15, r3
    2270:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	for (int osr=4; osr <= 32; osr++) {
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
		if (divint < 1) divint = 1;
		else if (divint > 8191) divint = 8191;
		float err = ((float)divint - div) / div;
    2274:	ee76 6ac7 	vsub.f32	s13, s13, s14
    2278:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    227c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2284:	bf48      	it	mi
    2286:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    228a:	eef4 7ac6 	vcmpe.f32	s15, s12
    228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2292:	d803      	bhi.n	229c <HardwareSerial::begin(unsigned long, unsigned short)+0x5c>
			besterr = err;
    2294:	eeb0 6a67 	vmov.f32	s12, s15
    2298:	460c      	mov	r4, r1
			bestdiv = divint;
    229a:	461e      	mov	r6, r3
	//printf("HardwareSerial begin\n");
	float base = (float)UART_CLOCK / (float)baud;
	float besterr = 1e20;
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
    229c:	3101      	adds	r1, #1
    229e:	2921      	cmp	r1, #33	; 0x21
    22a0:	d011      	beq.n	22c6 <HardwareSerial::begin(unsigned long, unsigned short)+0x86>
		float div = base / (float)osr;
    22a2:	ee07 1a90 	vmov	s15, r1
    22a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    22aa:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    22ae:	ee77 7a05 	vadd.f32	s15, s14, s10
    22b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    22b6:	ee17 3a90 	vmov	r3, s15
		if (divint < 1) divint = 1;
    22ba:	2b00      	cmp	r3, #0
    22bc:	dcd3      	bgt.n	2266 <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
    22be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    22c2:	2301      	movs	r3, #1
    22c4:	e7d6      	b.n	2274 <HardwareSerial::begin(unsigned long, unsigned short)+0x34>
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    22c6:	6941      	ldr	r1, [r0, #20]
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    22c8:	2300      	movs	r3, #0
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    22ca:	6b85      	ldr	r5, [r0, #56]	; 0x38
    22cc:	f8b1 7058 	ldrh.w	r7, [r1, #88]	; 0x58
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    22d0:	f8b1 e05a 	ldrh.w	lr, [r1, #90]	; 0x5a
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
    22d4:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    22d8:	1bef      	subs	r7, r5, r7
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
    22da:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    22de:	ebce 0505 	rsb	r5, lr, r5
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
    22e2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    22e6:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;
    22ea:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44

	hardware->ccm_register |= hardware->ccm_value;
    22ee:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    22f2:	690b      	ldr	r3, [r1, #16]
    22f4:	f8de c000 	ldr.w	ip, [lr]
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    22f8:	63c7      	str	r7, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    22fa:	ea4c 0303 	orr.w	r3, ip, r3
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    22fe:	6405      	str	r5, [r0, #64]	; 0x40

	hardware->ccm_register |= hardware->ccm_value;

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2300:	4d5d      	ldr	r5, [pc, #372]	; (2478 <HardwareSerial::begin(unsigned long, unsigned short)+0x238>)
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
    2302:	f8ce 3000 	str.w	r3, [lr]

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2306:	7e03      	ldrb	r3, [r0, #24]
    2308:	4f5c      	ldr	r7, [pc, #368]	; (247c <HardwareSerial::begin(unsigned long, unsigned short)+0x23c>)
    230a:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    230e:	7d1b      	ldrb	r3, [r3, #20]
    2310:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    2314:	689b      	ldr	r3, [r3, #8]
    2316:	601f      	str	r7, [r3, #0]
    2318:	7e03      	ldrb	r3, [r0, #24]
    231a:	eb01 1303 	add.w	r3, r1, r3, lsl #4
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    231e:	7d1f      	ldrb	r7, [r3, #20]
    2320:	f8d3 e018 	ldr.w	lr, [r3, #24]
    2324:	eb05 1307 	add.w	r3, r5, r7, lsl #4
    2328:	685b      	ldr	r3, [r3, #4]
    232a:	f8c3 e000 	str.w	lr, [r3]
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    232e:	7e03      	ldrb	r3, [r0, #24]
    2330:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    2334:	69df      	ldr	r7, [r3, #28]
    2336:	b10f      	cbz	r7, 233c <HardwareSerial::begin(unsigned long, unsigned short)+0xfc>
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    2338:	6a1b      	ldr	r3, [r3, #32]
    233a:	603b      	str	r3, [r7, #0]
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    233c:	f890 e019 	ldrb.w	lr, [r0, #25]

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2340:	2c08      	cmp	r4, #8
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2342:	f104 33ff 	add.w	r3, r4, #4294967295
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    2346:	f04f 07d9 	mov.w	r7, #217	; 0xd9
    234a:	eb01 140e 	add.w	r4, r1, lr, lsl #4
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;
    234e:	f04f 0e00 	mov.w	lr, #0
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2352:	ea4f 6303 	mov.w	r3, r3, lsl #24
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    2356:	f894 4034 	ldrb.w	r4, [r4, #52]	; 0x34
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    235a:	f003 53f8 	and.w	r3, r3, #520093696	; 0x1f000000
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    235e:	eb05 1404 	add.w	r4, r5, r4, lsl #4
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2362:	ea43 0306 	orr.w	r3, r3, r6
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2366:	bfc8      	it	gt
    2368:	2600      	movgt	r6, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    236a:	68a4      	ldr	r4, [r4, #8]

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    236c:	bfd8      	it	le
    236e:	f44f 3600 	movle.w	r6, #131072	; 0x20000
    2372:	4333      	orrs	r3, r6
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    2374:	784e      	ldrb	r6, [r1, #1]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    2376:	6027      	str	r7, [r4, #0]
    2378:	7e44      	ldrb	r4, [r0, #25]
    237a:	3610      	adds	r6, #16
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    237c:	684f      	ldr	r7, [r1, #4]
    237e:	eb01 1404 	add.w	r4, r1, r4, lsl #4
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    2382:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    2386:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
    238a:	eb05 1501 	add.w	r5, r5, r1, lsl #4

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    238e:	6901      	ldr	r1, [r0, #16]
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    2390:	686c      	ldr	r4, [r5, #4]
    2392:	f8c4 c000 	str.w	ip, [r4]
    2396:	4c3a      	ldr	r4, [pc, #232]	; (2480 <HardwareSerial::begin(unsigned long, unsigned short)+0x240>)

	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2398:	610b      	str	r3, [r1, #16]
	port->PINCFG = 0;
    239a:	f8c1 e00c 	str.w	lr, [r1, #12]
    239e:	f844 7026 	str.w	r7, [r4, r6, lsl #2]

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    23a2:	6943      	ldr	r3, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    23a4:	2501      	movs	r5, #1
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    23a6:	4937      	ldr	r1, [pc, #220]	; (2484 <HardwareSerial::begin(unsigned long, unsigned short)+0x244>)
    23a8:	785c      	ldrb	r4, [r3, #1]
    23aa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    23ae:	4e36      	ldr	r6, [pc, #216]	; (2488 <HardwareSerial::begin(unsigned long, unsigned short)+0x248>)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    23b0:	5463      	strb	r3, [r4, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    23b2:	6944      	ldr	r4, [r0, #20]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    23b4:	6901      	ldr	r1, [r0, #16]
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
    23b6:	7863      	ldrb	r3, [r4, #1]
    23b8:	f003 001f 	and.w	r0, r3, #31
    23bc:	115b      	asrs	r3, r3, #5
    23be:	fa05 f000 	lsl.w	r0, r5, r0
    23c2:	f846 0023 	str.w	r0, [r6, r3, lsl #2]
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
    23c6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    23c8:	089b      	lsrs	r3, r3, #2
    23ca:	f003 031c 	and.w	r3, r3, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
    23ce:	2b0f      	cmp	r3, #15
    23d0:	d840      	bhi.n	2454 <HardwareSerial::begin(unsigned long, unsigned short)+0x214>
    23d2:	412b      	asrs	r3, r5
    23d4:	f003 0303 	and.w	r3, r3, #3
    23d8:	b2d8      	uxtb	r0, r3
	uint16_t rx_fifo_size = (((port->FIFO >> 0) & 0x7) << 2);
    23da:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    23dc:	009b      	lsls	r3, r3, #2
    23de:	f003 031c 	and.w	r3, r3, #28
	uint8_t rx_water = (rx_fifo_size < 16) ? rx_fifo_size >> 1 : 7;
    23e2:	2b0f      	cmp	r3, #15
    23e4:	d833      	bhi.n	244e <HardwareSerial::begin(unsigned long, unsigned short)+0x20e>
    23e6:	03db      	lsls	r3, r3, #15
    23e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    23ec:	4303      	orrs	r3, r0
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    23ee:	0757      	lsls	r7, r2, #29
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    23f0:	f002 0003 	and.w	r0, r2, #3
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    23f4:	62cb      	str	r3, [r1, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    23f6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    23f8:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    23fc:	628b      	str	r3, [r1, #40]	; 0x28
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    23fe:	d42b      	bmi.n	2458 <HardwareSerial::begin(unsigned long, unsigned short)+0x218>
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    2400:	f440 1370 	orr.w	r3, r0, #3932160	; 0x3c0000
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    2404:	f002 000f 	and.w	r0, r2, #15
    2408:	2804      	cmp	r0, #4
    240a:	bf08      	it	eq
    240c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    2410:	0696      	lsls	r6, r2, #26
    2412:	bf48      	it	mi
    2414:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    2418:	0715      	lsls	r5, r2, #28

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert

	// write out computed CTRL
	port->CTRL = ctrl;
    241a:	618b      	str	r3, [r1, #24]

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    241c:	d503      	bpl.n	2426 <HardwareSerial::begin(unsigned long, unsigned short)+0x1e6>
    241e:	690b      	ldr	r3, [r1, #16]
    2420:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    2424:	610b      	str	r3, [r1, #16]

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    2426:	694b      	ldr	r3, [r1, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    2428:	06d0      	lsls	r0, r2, #27
	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    242a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    242e:	bf48      	it	mi
    2430:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    2434:	614b      	str	r3, [r1, #20]

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    2436:	05d3      	lsls	r3, r2, #23
    2438:	d503      	bpl.n	2442 <HardwareSerial::begin(unsigned long, unsigned short)+0x202>
    243a:	690b      	ldr	r3, [r1, #16]
    243c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2440:	610b      	str	r3, [r1, #16]
	}
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
    2442:	7822      	ldrb	r2, [r4, #0]
    2444:	4b11      	ldr	r3, [pc, #68]	; (248c <HardwareSerial::begin(unsigned long, unsigned short)+0x24c>)
    2446:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    244a:	b141      	cbz	r1, 245e <HardwareSerial::begin(unsigned long, unsigned short)+0x21e>
    244c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    244e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    2452:	e7cb      	b.n	23ec <HardwareSerial::begin(unsigned long, unsigned short)+0x1ac>
    2454:	2003      	movs	r0, #3
    2456:	e7c0      	b.n	23da <HardwareSerial::begin(unsigned long, unsigned short)+0x19a>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    2458:	4b0d      	ldr	r3, [pc, #52]	; (2490 <HardwareSerial::begin(unsigned long, unsigned short)+0x250>)
    245a:	4303      	orrs	r3, r0
    245c:	e7d2      	b.n	2404 <HardwareSerial::begin(unsigned long, unsigned short)+0x1c4>

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
		serial_event_handlers_active++;
    245e:	480d      	ldr	r0, [pc, #52]	; (2494 <HardwareSerial::begin(unsigned long, unsigned short)+0x254>)
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
    2460:	68a4      	ldr	r4, [r4, #8]
		serial_event_handlers_active++;
    2462:	7801      	ldrb	r1, [r0, #0]
}

void HardwareSerial::enableSerialEvents() 
{
	if (!serial_event_handler_checks[hardware->serial_index]) {
		serial_event_handler_checks[hardware->serial_index] = hardware->serial_event_handler_check;	// clear it out
    2464:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
		serial_event_handlers_active++;
    2468:	1c4b      	adds	r3, r1, #1
    246a:	7003      	strb	r3, [r0, #0]
    246c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    246e:	bf00      	nop
    2470:	4bb71b00 	.word	0x4bb71b00
    2474:	60ad78ec 	.word	0x60ad78ec
    2478:	200000dc 	.word	0x200000dc
    247c:	0001f038 	.word	0x0001f038
    2480:	20002000 	.word	0x20002000
    2484:	e000e400 	.word	0xe000e400
    2488:	e000e100 	.word	0xe000e100
    248c:	20001c7c 	.word	0x20001c7c
    2490:	003c0010 	.word	0x003c0010
    2494:	20001c98 	.word	0x20001c98

00002498 <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    2498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    249a:	6d03      	ldr	r3, [r0, #80]	; 0x50
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    249c:	4604      	mov	r4, r0
    249e:	460e      	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    24a0:	b113      	cbz	r3, 24a8 <HardwareSerial::write9bit(unsigned long)+0x10>
    24a2:	6d42      	ldr	r2, [r0, #84]	; 0x54
    24a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	head = tx_buffer_head_;
    24a8:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    24ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
{
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
    24ae:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    24b0:	3501      	adds	r5, #1
    24b2:	429d      	cmp	r5, r3
    24b4:	d249      	bcs.n	254a <HardwareSerial::write9bit(unsigned long)+0xb2>
    24b6:	b2af      	uxth	r7, r5
	while (tx_buffer_tail_ == head) {
    24b8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    24bc:	b29b      	uxth	r3, r3
    24be:	42ab      	cmp	r3, r5
    24c0:	d120      	bne.n	2504 <HardwareSerial::write9bit(unsigned long)+0x6c>
		int priority = nvic_execution_priority();
    24c2:	f7ff fe9d 	bl	2200 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    24c6:	6963      	ldr	r3, [r4, #20]
    24c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    24cc:	4298      	cmp	r0, r3
    24ce:	dc2d      	bgt.n	252c <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    24d0:	6921      	ldr	r1, [r4, #16]
    24d2:	694b      	ldr	r3, [r1, #20]
    24d4:	021b      	lsls	r3, r3, #8
    24d6:	d5ef      	bpl.n	24b8 <HardwareSerial::write9bit(unsigned long)+0x20>
				uint32_t tail = tx_buffer_tail_;
    24d8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    24dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
    24de:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    24e0:	3301      	adds	r3, #1
    24e2:	4293      	cmp	r3, r2
    24e4:	d227      	bcs.n	2536 <HardwareSerial::write9bit(unsigned long)+0x9e>
				if (tail < tx_buffer_size_) {
    24e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    24e8:	b298      	uxth	r0, r3
    24ea:	4293      	cmp	r3, r2
    24ec:	d228      	bcs.n	2540 <HardwareSerial::write9bit(unsigned long)+0xa8>
					n = tx_buffer_[tail];
    24ee:	69e2      	ldr	r2, [r4, #28]
    24f0:	5cd3      	ldrb	r3, [r2, r3]
    24f2:	b2db      	uxtb	r3, r3
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
    24f4:	61cb      	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    24f6:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
	while (tx_buffer_tail_ == head) {
    24fa:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    24fe:	b29b      	uxth	r3, r3
    2500:	42ab      	cmp	r3, r5
    2502:	d0de      	beq.n	24c2 <HardwareSerial::write9bit(unsigned long)+0x2a>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    2504:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2506:	429d      	cmp	r5, r3
    2508:	d322      	bcc.n	2550 <HardwareSerial::write9bit(unsigned long)+0xb8>
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    250a:	1aed      	subs	r5, r5, r3
    250c:	b2f6      	uxtb	r6, r6
    250e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2510:	555e      	strb	r6, [r3, r5]
	}
	__disable_irq();
    2512:	b672      	cpsid	i
	transmitting_ = 1;
    2514:	2001      	movs	r0, #1
	tx_buffer_head_ = head;
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    2516:	6922      	ldr	r2, [r4, #16]
		tx_buffer_[head] = c;
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
	transmitting_ = 1;
    2518:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    251c:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    2520:	6993      	ldr	r3, [r2, #24]
    2522:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    2526:	6193      	str	r3, [r2, #24]
	__enable_irq();
    2528:	b662      	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    252a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
				}
				port->DATA  = n;
				tx_buffer_tail_ = tail;
			}
		} else if (priority >= 256) 
    252c:	28ff      	cmp	r0, #255	; 0xff
    252e:	ddc3      	ble.n	24b8 <HardwareSerial::write9bit(unsigned long)+0x20>
		{
			yield(); // wait
    2530:	f000 fb1e 	bl	2b70 <yield>
    2534:	e7c0      	b.n	24b8 <HardwareSerial::write9bit(unsigned long)+0x20>
    2536:	2000      	movs	r0, #0
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < tx_buffer_size_) {
    2538:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	while (tx_buffer_tail_ == head) {
		int priority = nvic_execution_priority();
		if (priority <= hardware->irq_priority) {
			if ((port->STAT & LPUART_STAT_TDRE)) {
				uint32_t tail = tx_buffer_tail_;
				if (++tail >= tx_buffer_total_size_) tail = 0;
    253a:	4603      	mov	r3, r0
				if (tail < tx_buffer_size_) {
    253c:	4293      	cmp	r3, r2
    253e:	d3d6      	bcc.n	24ee <HardwareSerial::write9bit(unsigned long)+0x56>
					n = tx_buffer_[tail];
				} else {
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    2540:	1a9b      	subs	r3, r3, r2
    2542:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2544:	5cd3      	ldrb	r3, [r2, r3]
    2546:	b2db      	uxtb	r3, r3
    2548:	e7d4      	b.n	24f4 <HardwareSerial::write9bit(unsigned long)+0x5c>
    254a:	2700      	movs	r7, #0
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
	head = tx_buffer_head_;
	if (++head >= tx_buffer_total_size_) head = 0;
    254c:	463d      	mov	r5, r7
    254e:	e7b3      	b.n	24b8 <HardwareSerial::write9bit(unsigned long)+0x20>
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
		tx_buffer_[head] = c;
    2550:	b2f6      	uxtb	r6, r6
    2552:	69e3      	ldr	r3, [r4, #28]
    2554:	555e      	strb	r6, [r3, r5]
    2556:	e7dc      	b.n	2512 <HardwareSerial::write9bit(unsigned long)+0x7a>

00002558 <HardwareSerial::write(unsigned char)>:
}

size_t HardwareSerial::write(uint8_t c)
{
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
    2558:	f7ff bf9e 	b.w	2498 <HardwareSerial::write9bit(unsigned long)>

0000255c <HardwareSerial::IRQHandler()>:
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    255c:	6902      	ldr	r2, [r0, #16]
    255e:	6953      	ldr	r3, [r2, #20]
    2560:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
	//digitalWrite(3, LOW);
	return 1;
}

void HardwareSerial::IRQHandler() 
{
    2564:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    2566:	d042      	beq.n	25ee <HardwareSerial::IRQHandler()+0x92>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    2568:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    256a:	f3c3 6502 	ubfx	r5, r3, #24, #3
		if (avail) {
    256e:	2d00      	cmp	r5, #0
    2570:	d03a      	beq.n	25e8 <HardwareSerial::IRQHandler()+0x8c>
			uint32_t newhead;
			head = rx_buffer_head_;
    2572:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    2576:	f8b0 e04c 	ldrh.w	lr, [r0, #76]	; 0x4c
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
    257a:	b2bf      	uxth	r7, r7
			tail = rx_buffer_tail_;
    257c:	fa1f fe8e 	uxth.w	lr, lr
    2580:	e006      	b.n	2590 <HardwareSerial::IRQHandler()+0x34>

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
    2582:	6a02      	ldr	r2, [r0, #32]
    2584:	54d6      	strb	r6, [r2, r3]
    2586:	6902      	ldr	r2, [r0, #16]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    2588:	1e6b      	subs	r3, r5, #1
    258a:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    258e:	d01a      	beq.n	25c6 <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2590:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    2592:	1c7b      	adds	r3, r7, #1

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    2594:	6b86      	ldr	r6, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    2596:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    259a:	f3c1 0109 	ubfx	r1, r1, #0, #10
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
    259e:	42b3      	cmp	r3, r6
    25a0:	bf28      	it	cs
    25a2:	2300      	movcs	r3, #0
				if (newhead != rx_buffer_tail_) {
    25a4:	b2a4      	uxth	r4, r4
    25a6:	42a3      	cmp	r3, r4
    25a8:	d0ee      	beq.n	2588 <HardwareSerial::IRQHandler()+0x2c>
					head = newhead;
					if (newhead < rx_buffer_size_) {
    25aa:	6b02      	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    25ac:	b2ce      	uxtb	r6, r1
    25ae:	461f      	mov	r7, r3
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    25b0:	4293      	cmp	r3, r2
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    25b2:	eba3 0402 	sub.w	r4, r3, r2
				newhead = head + 1;

				if (newhead >= rx_buffer_total_size_) newhead = 0;
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
    25b6:	d3e4      	bcc.n	2582 <HardwareSerial::IRQHandler()+0x26>
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    25b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    25ba:	551e      	strb	r6, [r3, r4]
		uint8_t avail = (port->WATER >> 24) & 0x7;
		if (avail) {
			uint32_t newhead;
			head = rx_buffer_head_;
			tail = rx_buffer_tail_;
			do {
    25bc:	1e6b      	subs	r3, r5, #1
    25be:	6902      	ldr	r2, [r0, #16]
    25c0:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    25c4:	d1e4      	bne.n	2590 <HardwareSerial::IRQHandler()+0x34>
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    25c6:	b2bb      	uxth	r3, r7
			if (rts_pin_baseReg_) {
    25c8:	6d81      	ldr	r1, [r0, #88]	; 0x58
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
					}
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
    25ca:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    25ce:	b159      	cbz	r1, 25e8 <HardwareSerial::IRQHandler()+0x8c>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    25d0:	4577      	cmp	r7, lr
    25d2:	d269      	bcs.n	26a8 <HardwareSerial::IRQHandler()+0x14c>
				else avail = rx_buffer_total_size_ + head - tail;
    25d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
    25d6:	ebce 0303 	rsb	r3, lr, r3
    25da:	441f      	add	r7, r3
				if (avail >= rts_high_watermark_) rts_deassert();
    25dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
    25de:	429f      	cmp	r7, r3
    25e0:	d302      	bcc.n	25e8 <HardwareSerial::IRQHandler()+0x8c>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
}

inline void HardwareSerial::rts_deassert()
{
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    25e2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    25e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
				if (avail >= rts_high_watermark_) rts_deassert();
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    25e8:	6953      	ldr	r3, [r2, #20]
    25ea:	02dc      	lsls	r4, r3, #11
    25ec:	d44b      	bmi.n	2686 <HardwareSerial::IRQHandler()+0x12a>
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    25ee:	f8d2 e018 	ldr.w	lr, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    25f2:	f41e 0f00 	tst.w	lr, #8388608	; 0x800000
    25f6:	d002      	beq.n	25fe <HardwareSerial::IRQHandler()+0xa2>
    25f8:	6953      	ldr	r3, [r2, #20]
    25fa:	0219      	lsls	r1, r3, #8
    25fc:	d412      	bmi.n	2624 <HardwareSerial::IRQHandler()+0xc8>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    25fe:	f41e 0f80 	tst.w	lr, #4194304	; 0x400000
    2602:	d03e      	beq.n	2682 <HardwareSerial::IRQHandler()+0x126>
    2604:	6953      	ldr	r3, [r2, #20]
    2606:	025b      	lsls	r3, r3, #9
    2608:	d53c      	bpl.n	2684 <HardwareSerial::IRQHandler()+0x128>
	{
		transmitting_ = 0;
    260a:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    260c:	6d03      	ldr	r3, [r0, #80]	; 0x50
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
	{
		transmitting_ = 0;
    260e:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2612:	b113      	cbz	r3, 261a <HardwareSerial::IRQHandler()+0xbe>
    2614:	6d41      	ldr	r1, [r0, #84]	; 0x54
    2616:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

		port->CTRL &= ~LPUART_CTRL_TCIE;
    261a:	6993      	ldr	r3, [r2, #24]
    261c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    2620:	6193      	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    2622:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    2624:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    2628:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
	ctrl = port->CTRL;
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    262c:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    262e:	b29b      	uxth	r3, r3
		do {
			if (head == tail) break;
    2630:	429d      	cmp	r5, r3
    2632:	d02d      	beq.n	2690 <HardwareSerial::IRQHandler()+0x134>
    2634:	6b46      	ldr	r6, [r0, #52]	; 0x34
    2636:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    2638:	e00a      	b.n	2650 <HardwareSerial::IRQHandler()+0xf4>
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
    263a:	69c1      	ldr	r1, [r0, #28]
    263c:	5cc9      	ldrb	r1, [r1, r3]
    263e:	b2c9      	uxtb	r1, r1
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
    2640:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    2642:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    2644:	f3c1 2102 	ubfx	r1, r1, #8, #3
    2648:	2903      	cmp	r1, #3
    264a:	d812      	bhi.n	2672 <HardwareSerial::IRQHandler()+0x116>
			if (head == tail) break;
    264c:	42ab      	cmp	r3, r5
    264e:	d01f      	beq.n	2690 <HardwareSerial::IRQHandler()+0x134>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    2650:	3301      	adds	r3, #1
    2652:	429e      	cmp	r6, r3
    2654:	bf98      	it	ls
    2656:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    2658:	42a3      	cmp	r3, r4
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    265a:	eba3 0104 	sub.w	r1, r3, r4
		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
    265e:	d3ec      	bcc.n	263a <HardwareSerial::IRQHandler()+0xde>
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    2660:	6a87      	ldr	r7, [r0, #40]	; 0x28
    2662:	5c79      	ldrb	r1, [r7, r1]
    2664:	b2c9      	uxtb	r1, r1
			}
			port->DATA = n;
    2666:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    2668:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
		tail = tx_buffer_tail_;
		do {
    266a:	f3c1 2102 	ubfx	r1, r1, #8, #3
    266e:	2903      	cmp	r1, #3
    2670:	d9ec      	bls.n	264c <HardwareSerial::IRQHandler()+0xf0>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    2672:	b299      	uxth	r1, r3
		if (head == tail) {
    2674:	42ab      	cmp	r3, r5
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    2676:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    267a:	d00c      	beq.n	2696 <HardwareSerial::IRQHandler()+0x13a>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    267c:	f41e 0f80 	tst.w	lr, #4194304	; 0x400000
    2680:	d1c0      	bne.n	2604 <HardwareSerial::IRQHandler()+0xa8>
    2682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2684:	bdf0      	pop	{r4, r5, r6, r7, pc}
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    2686:	6953      	ldr	r3, [r2, #20]
    2688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    268c:	6153      	str	r3, [r2, #20]
    268e:	e7ae      	b.n	25ee <HardwareSerial::IRQHandler()+0x92>
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
			}
			port->DATA = n;
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
		tx_buffer_tail_ = tail;
    2690:	b2ad      	uxth	r5, r5
    2692:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
		if (head == tail) {
			port->CTRL &= ~LPUART_CTRL_TIE; 
    2696:	6993      	ldr	r3, [r2, #24]
    2698:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    269c:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    269e:	6993      	ldr	r3, [r2, #24]
    26a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    26a4:	6193      	str	r3, [r2, #24]
    26a6:	e7aa      	b.n	25fe <HardwareSerial::IRQHandler()+0xa2>
				}
			} while (--avail > 0) ;
			rx_buffer_head_ = head;
			if (rts_pin_baseReg_) {
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    26a8:	ebce 0707 	rsb	r7, lr, r7
    26ac:	e796      	b.n	25dc <HardwareSerial::IRQHandler()+0x80>
    26ae:	bf00      	nop

000026b0 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    26b0:	b538      	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    26b2:	4b07      	ldr	r3, [pc, #28]	; (26d0 <HardwareSerial::processSerialEvents()+0x20>)
    26b4:	781c      	ldrb	r4, [r3, #0]
    26b6:	b14c      	cbz	r4, 26cc <HardwareSerial::processSerialEvents()+0x1c>
    26b8:	4d06      	ldr	r5, [pc, #24]	; (26d4 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    26ba:	f855 3f04 	ldr.w	r3, [r5, #4]!
    26be:	2b00      	cmp	r3, #0
    26c0:	d0fb      	beq.n	26ba <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    26c2:	4798      	blx	r3
			if (--handlers_still_to_process == 0) return;
    26c4:	1e63      	subs	r3, r4, #1
    26c6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    26ca:	d1f6      	bne.n	26ba <HardwareSerial::processSerialEvents()+0xa>
    26cc:	bd38      	pop	{r3, r4, r5, pc}
    26ce:	bf00      	nop
    26d0:	20001c98 	.word	0x20001c98
    26d4:	20001c78 	.word	0x20001c78

000026d8 <IRQHandler_Serial3>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial3()
{
	Serial3.IRQHandler();
    26d8:	4801      	ldr	r0, [pc, #4]	; (26e0 <IRQHandler_Serial3+0x8>)
    26da:	f7ff bf3f 	b.w	255c <HardwareSerial::IRQHandler()>
    26de:	bf00      	nop
    26e0:	20000474 	.word	0x20000474

000026e4 <serial_event_check_serial3()>:
}

void serial_event_check_serial3()
{
    26e4:	b508      	push	{r3, lr}
	if (Serial3.available()) serialEvent3();
    26e6:	4803      	ldr	r0, [pc, #12]	; (26f4 <serial_event_check_serial3()+0x10>)
    26e8:	f7ff fd1c 	bl	2124 <HardwareSerial::available()>
    26ec:	b108      	cbz	r0, 26f2 <serial_event_check_serial3()+0xe>
    26ee:	f7fd fe6b 	bl	3c8 <serialEvent3()>
    26f2:	bd08      	pop	{r3, pc}
    26f4:	20000474 	.word	0x20000474

000026f8 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
    26f8:	b510      	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    26fa:	4c14      	ldr	r4, [pc, #80]	; (274c <pit_isr()+0x54>)
    26fc:	6823      	ldr	r3, [r4, #0]
    26fe:	b113      	cbz	r3, 2706 <pit_isr()+0xe>
    2700:	4a13      	ldr	r2, [pc, #76]	; (2750 <pit_isr()+0x58>)
    2702:	68d1      	ldr	r1, [r2, #12]
    2704:	b9e9      	cbnz	r1, 2742 <pit_isr()+0x4a>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    2706:	6863      	ldr	r3, [r4, #4]
    2708:	b113      	cbz	r3, 2710 <pit_isr()+0x18>
    270a:	4a12      	ldr	r2, [pc, #72]	; (2754 <pit_isr()+0x5c>)
    270c:	68d1      	ldr	r1, [r2, #12]
    270e:	b9a1      	cbnz	r1, 273a <pit_isr()+0x42>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    2710:	68a3      	ldr	r3, [r4, #8]
    2712:	b113      	cbz	r3, 271a <pit_isr()+0x22>
    2714:	4a10      	ldr	r2, [pc, #64]	; (2758 <pit_isr()+0x60>)
    2716:	68d1      	ldr	r1, [r2, #12]
    2718:	b959      	cbnz	r1, 2732 <pit_isr()+0x3a>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    271a:	68e3      	ldr	r3, [r4, #12]
    271c:	b13b      	cbz	r3, 272e <pit_isr()+0x36>
    271e:	4a0f      	ldr	r2, [pc, #60]	; (275c <pit_isr()+0x64>)
    2720:	68d1      	ldr	r1, [r2, #12]
    2722:	b129      	cbz	r1, 2730 <pit_isr()+0x38>
    2724:	2101      	movs	r1, #1
#endif
}
    2726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
    272a:	60d1      	str	r1, [r2, #12]
    272c:	4718      	bx	r3
    272e:	bd10      	pop	{r4, pc}
    2730:	bd10      	pop	{r4, pc}
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
    2732:	2101      	movs	r1, #1
    2734:	60d1      	str	r1, [r2, #12]
    2736:	4798      	blx	r3
    2738:	e7ef      	b.n	271a <pit_isr()+0x22>
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
    273a:	2101      	movs	r1, #1
    273c:	60d1      	str	r1, [r2, #12]
    273e:	4798      	blx	r3
    2740:	e7e6      	b.n	2710 <pit_isr()+0x18>

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
    2742:	2101      	movs	r1, #1
    2744:	60d1      	str	r1, [r2, #12]
    2746:	4798      	blx	r3
    2748:	e7dd      	b.n	2706 <pit_isr()+0xe>
    274a:	bf00      	nop
    274c:	20001d20 	.word	0x20001d20
    2750:	40084100 	.word	0x40084100
    2754:	40084110 	.word	0x40084110
    2758:	40084120 	.word	0x40084120
    275c:	40084130 	.word	0x40084130

00002760 <IntervalTimer::beginCycles(void (*)(), unsigned long)>:


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
	printf("beginCycles %u\n", cycles);
	if (channel) {
    2760:	6803      	ldr	r3, [r0, #0]
static void (*funct_table[4])(void) __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
uint8_t IntervalTimer::nvic_priorites[4] = {255, 255, 255, 255};


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
    2762:	b5f0      	push	{r4, r5, r6, r7, lr}
	printf("beginCycles %u\n", cycles);
	if (channel) {
    2764:	b35b      	cbz	r3, 27be <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x5e>
		channel->TCTRL = 0;
    2766:	2500      	movs	r5, #0
		channel->TFLG = 1;
    2768:	2401      	movs	r4, #1

bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
    276a:	609d      	str	r5, [r3, #8]
		channel->TFLG = 1;
    276c:	60dc      	str	r4, [r3, #12]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
    276e:	4d21      	ldr	r5, [pc, #132]	; (27f4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x94>)
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
    2770:	2403      	movs	r4, #3
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
	funct_table[index] = funct;
	channel->LDVAL = cycles;
    2772:	601a      	str	r2, [r3, #0]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
    2774:	441d      	add	r5, r3
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
    2776:	609c      	str	r4, [r3, #8]
	nvic_priorites[index] = nvic_priority;
    2778:	4c1f      	ldr	r4, [pc, #124]	; (27f8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x98>)
    277a:	7903      	ldrb	r3, [r0, #4]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
    277c:	112d      	asrs	r5, r5, #4
	funct_table[index] = funct;
    277e:	4f1f      	ldr	r7, [pc, #124]	; (27fc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x9c>)
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
	nvic_priorites[index] = nvic_priority;
    2780:	5563      	strb	r3, [r4, r5]
	uint8_t top_priority = 255;
	for (int i=0; i < NUM_CHANNELS; i++) {
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    2782:	7823      	ldrb	r3, [r4, #0]
    2784:	7860      	ldrb	r0, [r4, #1]
    2786:	2bff      	cmp	r3, #255	; 0xff
    2788:	78a2      	ldrb	r2, [r4, #2]
    278a:	78e4      	ldrb	r4, [r4, #3]
    278c:	bf28      	it	cs
    278e:	23ff      	movcs	r3, #255	; 0xff
    2790:	4e1b      	ldr	r6, [pc, #108]	; (2800 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
				return false;
			}
		}
	}
	int index = channel - IMXRT_PIT_CHANNELS;
	funct_table[index] = funct;
    2792:	f847 1025 	str.w	r1, [r7, r5, lsl #2]
    2796:	4283      	cmp	r3, r0
    2798:	bf28      	it	cs
    279a:	4603      	movcs	r3, r0
    279c:	4819      	ldr	r0, [pc, #100]	; (2804 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
    279e:	4293      	cmp	r3, r2
    27a0:	f8c0 6228 	str.w	r6, [r0, #552]	; 0x228
    27a4:	bf28      	it	cs
    27a6:	4613      	movcs	r3, r2
    27a8:	42a3      	cmp	r3, r4
    27aa:	bf28      	it	cs
    27ac:	4623      	movcs	r3, r4
	uint8_t top_priority = 255;
	for (int i=0; i < NUM_CHANNELS; i++) {
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
	}
	attachInterruptVector(IRQ_PIT, &pit_isr);
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    27ae:	4c16      	ldr	r4, [pc, #88]	; (2808 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
    27b0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    27b4:	4a15      	ldr	r2, [pc, #84]	; (280c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	return true;
    27b6:	2001      	movs	r0, #1
	uint8_t top_priority = 255;
	for (int i=0; i < NUM_CHANNELS; i++) {
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
	}
	attachInterruptVector(IRQ_PIT, &pit_isr);
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    27b8:	7023      	strb	r3, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_PIT);
    27ba:	6011      	str	r1, [r2, #0]
	return true;
}
    27bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    27be:	4f14      	ldr	r7, [pc, #80]	; (2810 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
    27c0:	f04f 0c01 	mov.w	ip, #1
		channel = IMXRT_PIT_CHANNELS;
    27c4:	4e13      	ldr	r6, [pc, #76]	; (2814 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    27c6:	6efc      	ldr	r4, [r7, #108]	; 0x6c
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
    27c8:	f8df e050 	ldr.w	lr, [pc, #80]	; 281c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>
		channel = IMXRT_PIT_CHANNELS;
    27cc:	4633      	mov	r3, r6
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    27ce:	f444 5440 	orr.w	r4, r4, #12288	; 0x3000
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = IMXRT_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    27d2:	4d11      	ldr	r5, [pc, #68]	; (2818 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
	printf("beginCycles %u\n", cycles);
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    27d4:	66fc      	str	r4, [r7, #108]	; 0x6c
		//__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
    27d6:	f8ce c000 	str.w	ip, [lr]
		channel = IMXRT_PIT_CHANNELS;
    27da:	6006      	str	r6, [r0, #0]
		while (1) {
			if (channel->TCTRL == 0) break;
    27dc:	689c      	ldr	r4, [r3, #8]
    27de:	2c00      	cmp	r4, #0
    27e0:	d0c5      	beq.n	276e <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xe>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
    27e2:	3310      	adds	r3, #16
    27e4:	42ab      	cmp	r3, r5
    27e6:	6003      	str	r3, [r0, #0]
    27e8:	d1f8      	bne.n	27dc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x7c>
				channel = NULL;
    27ea:	2300      	movs	r3, #0
    27ec:	6003      	str	r3, [r0, #0]
				return false;
    27ee:	4618      	mov	r0, r3
    27f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27f2:	bf00      	nop
    27f4:	bff7bf00 	.word	0xbff7bf00
    27f8:	20000530 	.word	0x20000530
    27fc:	20001d20 	.word	0x20001d20
    2800:	000026f9 	.word	0x000026f9
    2804:	20002000 	.word	0x20002000
    2808:	e000e47a 	.word	0xe000e47a
    280c:	e000e10c 	.word	0xe000e10c
    2810:	400fc000 	.word	0x400fc000
    2814:	40084100 	.word	0x40084100
    2818:	40084140 	.word	0x40084140
    281c:	40084000 	.word	0x40084000

00002820 <IntervalTimer::end()>:
}


void IntervalTimer::end() {
#if 1
	if (channel) {
    2820:	6802      	ldr	r2, [r0, #0]
    2822:	b30a      	cbz	r2, 2868 <IntervalTimer::end()+0x48>
		int index = channel - IMXRT_PIT_CHANNELS;
    2824:	4b11      	ldr	r3, [pc, #68]	; (286c <IntervalTimer::end()+0x4c>)
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    2826:	4912      	ldr	r1, [pc, #72]	; (2870 <IntervalTimer::end()+0x50>)


void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    2828:	4413      	add	r3, r2
	NVIC_ENABLE_IRQ(IRQ_PIT);
	return true;
}


void IntervalTimer::end() {
    282a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
    282c:	111b      	asrs	r3, r3, #4
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    282e:	25ff      	movs	r5, #255	; 0xff
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    2830:	2400      	movs	r4, #0
    2832:	f8df e044 	ldr.w	lr, [pc, #68]	; 2878 <IntervalTimer::end()+0x58>
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
    2836:	54cd      	strb	r5, [r1, r3]
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    2838:	780e      	ldrb	r6, [r1, #0]
    283a:	784d      	ldrb	r5, [r1, #1]
    283c:	2eff      	cmp	r6, #255	; 0xff
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
		channel->TCTRL = 0;
    283e:	6094      	str	r4, [r2, #8]
void IntervalTimer::end() {
#if 1
	if (channel) {
		int index = channel - IMXRT_PIT_CHANNELS;
		// TODO: disable IRQ_PIT, but only if all instances ended
		funct_table[index] = nullptr;
    2840:	f84e 4023 	str.w	r4, [lr, r3, lsl #2]
    2844:	bf28      	it	cs
    2846:	26ff      	movcs	r6, #255	; 0xff
		channel->TCTRL = 0;
		nvic_priorites[index] = 255;
		uint8_t top_priority = 255;
		for (int i=0; i < NUM_CHANNELS; i++) {
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
    2848:	788a      	ldrb	r2, [r1, #2]
    284a:	78c9      	ldrb	r1, [r1, #3]
    284c:	42ae      	cmp	r6, r5
    284e:	4633      	mov	r3, r6
		}
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
    2850:	4f08      	ldr	r7, [pc, #32]	; (2874 <IntervalTimer::end()+0x54>)
    2852:	bf28      	it	cs
    2854:	462b      	movcs	r3, r5
    2856:	4293      	cmp	r3, r2
    2858:	bf28      	it	cs
    285a:	4613      	movcs	r3, r2
    285c:	428b      	cmp	r3, r1
    285e:	bf28      	it	cs
    2860:	460b      	movcs	r3, r1
    2862:	703b      	strb	r3, [r7, #0]
		channel = 0;
    2864:	6004      	str	r4, [r0, #0]
    2866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2868:	4770      	bx	lr
    286a:	bf00      	nop
    286c:	bff7bf00 	.word	0xbff7bf00
    2870:	20000530 	.word	0x20000530
    2874:	e000e47a 	.word	0xe000e47a
    2878:	20001d20 	.word	0x20001d20

0000287c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    287c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    287e:	f7fd fcdb 	bl	238 <setup>
	while (1) {
		loop();
    2882:	f7fd fdaf 	bl	3e4 <loop>
		yield();
    2886:	f000 f973 	bl	2b70 <yield>
    288a:	e7fa      	b.n	2882 <main+0x6>

0000288c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    288e:	460e      	mov	r6, r1
    2890:	b171      	cbz	r1, 28b0 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    2892:	b17a      	cbz	r2, 28b4 <Print::write(unsigned char const*, unsigned int)+0x28>
    2894:	4607      	mov	r7, r0
    2896:	4614      	mov	r4, r2
    2898:	2500      	movs	r5, #0
    289a:	683b      	ldr	r3, [r7, #0]
    289c:	4638      	mov	r0, r7
    289e:	f816 1b01 	ldrb.w	r1, [r6], #1
    28a2:	681b      	ldr	r3, [r3, #0]
    28a4:	4798      	blx	r3
    28a6:	3c01      	subs	r4, #1
    28a8:	4405      	add	r5, r0
    28aa:	d1f6      	bne.n	289a <Print::write(unsigned char const*, unsigned int)+0xe>
    28ac:	4628      	mov	r0, r5
    28ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    28b0:	4608      	mov	r0, r1
    28b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28b4:	4610      	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    28b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000028b8 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    28b8:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    28ba:	4c06      	ldr	r4, [pc, #24]	; (28d4 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    28bc:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    28be:	6803      	ldr	r3, [r0, #0]
    28c0:	2202      	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    28c2:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    28c4:	a901      	add	r1, sp, #4
    28c6:	685b      	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    28c8:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    28cc:	4798      	blx	r3
}
    28ce:	b002      	add	sp, #8
    28d0:	bd10      	pop	{r4, pc}
    28d2:	bf00      	nop
    28d4:	200003ec 	.word	0x200003ec

000028d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    28d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28da:	4606      	mov	r6, r0
    28dc:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    28de:	2a00      	cmp	r2, #0
    28e0:	d033      	beq.n	294a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    28e2:	2a01      	cmp	r2, #1
    28e4:	bf08      	it	eq
    28e6:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    28e8:	b351      	cbz	r1, 2940 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    28ea:	2521      	movs	r5, #33	; 0x21
    28ec:	e000      	b.n	28f0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    28ee:	b2fd      	uxtb	r5, r7
    28f0:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    28f2:	fbb1 f4f2 	udiv	r4, r1, r2
    28f6:	fb02 1114 	mls	r1, r2, r4, r1
    28fa:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    28fc:	2909      	cmp	r1, #9
    28fe:	f100 0137 	add.w	r1, r0, #55	; 0x37
    2902:	f100 0030 	add.w	r0, r0, #48	; 0x30
    2906:	bf88      	it	hi
    2908:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    290a:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    290c:	ac0a      	add	r4, sp, #40	; 0x28
    290e:	bf98      	it	ls
    2910:	b2c0      	uxtbls	r0, r0
    2912:	442c      	add	r4, r5
    2914:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    2918:	2900      	cmp	r1, #0
    291a:	d1e8      	bne.n	28ee <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    291c:	b133      	cbz	r3, 292c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    291e:	3d01      	subs	r5, #1
		buf[i] = '-';
    2920:	ab0a      	add	r3, sp, #40	; 0x28
    2922:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    2924:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    2926:	442b      	add	r3, r5
    2928:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    292c:	6833      	ldr	r3, [r6, #0]
    292e:	a901      	add	r1, sp, #4
    2930:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    2934:	4630      	mov	r0, r6
    2936:	4429      	add	r1, r5
    2938:	685b      	ldr	r3, [r3, #4]
    293a:	4798      	blx	r3
}
    293c:	b00b      	add	sp, #44	; 0x2c
    293e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2940:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    2942:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    2944:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    2948:	e7e8      	b.n	291c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    294a:	6803      	ldr	r3, [r0, #0]
    294c:	b2c9      	uxtb	r1, r1
    294e:	681b      	ldr	r3, [r3, #0]
    2950:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    2952:	b00b      	add	sp, #44	; 0x2c
    2954:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2956:	bf00      	nop

00002958 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    2958:	2900      	cmp	r1, #0
    295a:	db03      	blt.n	2964 <Print::print(long)+0xc>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    295c:	2300      	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    295e:	220a      	movs	r2, #10
    2960:	f7ff bfba 	b.w	28d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    2964:	4249      	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    2966:	232d      	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    2968:	220a      	movs	r2, #10
    296a:	f7ff bfb5 	b.w	28d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    296e:	bf00      	nop

00002970 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    2970:	eeb4 0b40 	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    2974:	b570      	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    2976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    297a:	4605      	mov	r5, r0
    297c:	ed2d 8b02 	vpush	{d8}
    2980:	b086      	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    2982:	f180 8091 	bvs.w	2aa8 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    2986:	eeb0 7bc0 	vabs.f64	d7, d0
    298a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 2ab8 <Print::printFloat(double, unsigned char)+0x148>
    298e:	eeb4 7b46 	vcmp.f64	d7, d6
    2992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2996:	dd0a      	ble.n	29ae <Print::printFloat(double, unsigned char)+0x3e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    2998:	6803      	ldr	r3, [r0, #0]
    299a:	2203      	movs	r2, #3
    299c:	494e      	ldr	r1, [pc, #312]	; (2ad8 <Print::printFloat(double, unsigned char)+0x168>)
    299e:	685b      	ldr	r3, [r3, #4]
    29a0:	4798      	blx	r3
    29a2:	4606      	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    29a4:	4630      	mov	r0, r6
    29a6:	b006      	add	sp, #24
    29a8:	ecbd 8b02 	vpop	{d8}
    29ac:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    29ae:	ed9f 7b44 	vldr	d7, [pc, #272]	; 2ac0 <Print::printFloat(double, unsigned char)+0x150>
    29b2:	eeb4 0bc7 	vcmpe.f64	d0, d7
    29b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29ba:	dc58      	bgt.n	2a6e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    29bc:	ed9f 7b42 	vldr	d7, [pc, #264]	; 2ac8 <Print::printFloat(double, unsigned char)+0x158>
    29c0:	eeb4 0bc7 	vcmpe.f64	d0, d7
    29c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29c8:	d451      	bmi.n	2a6e <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    29ca:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    29ce:	460c      	mov	r4, r1
    29d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29d4:	d456      	bmi.n	2a84 <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    29d6:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    29d8:	2c00      	cmp	r4, #0
    29da:	d057      	beq.n	2a8c <Print::printFloat(double, unsigned char)+0x11c>
    29dc:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
    29e0:	2200      	movs	r2, #0
		rounding *= 0.1;
    29e2:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 2ad0 <Print::printFloat(double, unsigned char)+0x160>
    29e6:	3201      	adds	r2, #1
    29e8:	ee28 8b07 	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    29ec:	b2d1      	uxtb	r1, r2
    29ee:	428c      	cmp	r4, r1
    29f0:	d8f9      	bhi.n	29e6 <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    29f2:	ee30 0b08 	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    29f6:	220a      	movs	r2, #10
    29f8:	4628      	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    29fa:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    29fe:	eeb8 8b67 	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    2a02:	ee17 1a90 	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    2a06:	ee30 8b48 	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    2a0a:	f7ff ff65 	bl	28d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2a0e:	2c0f      	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    2a10:	f04f 0201 	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    2a14:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    2a18:	f04f 032e 	mov.w	r3, #46	; 0x2e
    2a1c:	bf28      	it	cs
    2a1e:	240f      	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    2a20:	4606      	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    2a22:	f88d 3008 	strb.w	r3, [sp, #8]
    2a26:	4414      	add	r4, r2
    2a28:	b2e4      	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    2a2a:	ee28 0b07 	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    2a2e:	1c53      	adds	r3, r2, #1
    2a30:	a906      	add	r1, sp, #24
    2a32:	4411      	add	r1, r2
    2a34:	b2da      	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    2a36:	42a2      	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    2a38:	eefc 6bc0 	vcvt.u32.f64	s13, d0
    2a3c:	edcd 6a01 	vstr	s13, [sp, #4]
    2a40:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    2a44:	ee06 3a90 	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    2a48:	f103 0330 	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    2a4c:	eeb8 8be6 	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    2a50:	f801 3c10 	strb.w	r3, [r1, #-16]
			remainder -= n; 
    2a54:	ee30 8b48 	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    2a58:	d1e7      	bne.n	2a2a <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    2a5a:	682b      	ldr	r3, [r5, #0]
    2a5c:	4628      	mov	r0, r5
    2a5e:	a902      	add	r1, sp, #8
    2a60:	685b      	ldr	r3, [r3, #4]
    2a62:	4798      	blx	r3
	}
	return count;
}
    2a64:	4630      	mov	r0, r6
    2a66:	b006      	add	sp, #24
    2a68:	ecbd 8b02 	vpop	{d8}
    2a6c:	bd70      	pop	{r4, r5, r6, pc}
    2a6e:	682b      	ldr	r3, [r5, #0]
    2a70:	2203      	movs	r2, #3
    2a72:	491a      	ldr	r1, [pc, #104]	; (2adc <Print::printFloat(double, unsigned char)+0x16c>)
    2a74:	685b      	ldr	r3, [r3, #4]
    2a76:	4798      	blx	r3
    2a78:	4606      	mov	r6, r0
    2a7a:	4630      	mov	r0, r6
    2a7c:	b006      	add	sp, #24
    2a7e:	ecbd 8b02 	vpop	{d8}
    2a82:	bd70      	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    2a84:	eeb1 0b40 	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    2a88:	2301      	movs	r3, #1
    2a8a:	e7a5      	b.n	29d8 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    2a8c:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    2a90:	4628      	mov	r0, r5
    2a92:	220a      	movs	r2, #10
    2a94:	ee30 0b07 	vadd.f64	d0, d0, d7
    2a98:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    2a9c:	ee17 1a90 	vmov	r1, s15
    2aa0:	f7ff ff1a 	bl	28d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2aa4:	4606      	mov	r6, r0
    2aa6:	e77d      	b.n	29a4 <Print::printFloat(double, unsigned char)+0x34>
    2aa8:	6803      	ldr	r3, [r0, #0]
    2aaa:	2203      	movs	r2, #3
    2aac:	490c      	ldr	r1, [pc, #48]	; (2ae0 <Print::printFloat(double, unsigned char)+0x170>)
    2aae:	685b      	ldr	r3, [r3, #4]
    2ab0:	4798      	blx	r3
    2ab2:	4606      	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    2ab4:	e776      	b.n	29a4 <Print::printFloat(double, unsigned char)+0x34>
    2ab6:	bf00      	nop
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	7fefffff 	.word	0x7fefffff
    2ac0:	e0000000 	.word	0xe0000000
    2ac4:	41efffff 	.word	0x41efffff
    2ac8:	e0000000 	.word	0xe0000000
    2acc:	c1efffff 	.word	0xc1efffff
    2ad0:	9999999a 	.word	0x9999999a
    2ad4:	3fb99999 	.word	0x3fb99999
    2ad8:	200003f8 	.word	0x200003f8
    2adc:	200003f4 	.word	0x200003f4
    2ae0:	200003f0 	.word	0x200003f0

00002ae4 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    2ae4:	b570      	push	{r4, r5, r6, lr}
    2ae6:	4d0a      	ldr	r5, [pc, #40]	; (2b10 <Stream::timedRead()+0x2c>)
    2ae8:	4604      	mov	r4, r0
    2aea:	682e      	ldr	r6, [r5, #0]
    2aec:	e006      	b.n	2afc <Stream::timedRead()+0x18>
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    if (c >= 0) return c;
    yield();
    2aee:	f000 f83f 	bl	2b70 <yield>
    2af2:	682b      	ldr	r3, [r5, #0]
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  unsigned long startMillis = millis();
  do {
    2af4:	68a2      	ldr	r2, [r4, #8]
    2af6:	1b9b      	subs	r3, r3, r6
    2af8:	4293      	cmp	r3, r2
    2afa:	d206      	bcs.n	2b0a <Stream::timedRead()+0x26>
    c = read();
    2afc:	6823      	ldr	r3, [r4, #0]
    2afe:	4620      	mov	r0, r4
    2b00:	695b      	ldr	r3, [r3, #20]
    2b02:	4798      	blx	r3
    if (c >= 0) return c;
    2b04:	2800      	cmp	r0, #0
    2b06:	dbf2      	blt.n	2aee <Stream::timedRead()+0xa>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    2b08:	bd70      	pop	{r4, r5, r6, pc}
  do {
    c = read();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    2b0a:	f04f 30ff 	mov.w	r0, #4294967295
}
    2b0e:	bd70      	pop	{r4, r5, r6, pc}
    2b10:	20001a3c 	.word	0x20001a3c

00002b14 <Stream::readBytes(char*, unsigned int)>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    2b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    2b16:	460d      	mov	r5, r1
    2b18:	b1a1      	cbz	r1, 2b44 <Stream::readBytes(char*, unsigned int)+0x30>
    2b1a:	4616      	mov	r6, r2
	size_t count = 0;
	while (count < length) {
    2b1c:	b182      	cbz	r2, 2b40 <Stream::readBytes(char*, unsigned int)+0x2c>
    2b1e:	4607      	mov	r7, r0
    2b20:	2400      	movs	r4, #0
    2b22:	e004      	b.n	2b2e <Stream::readBytes(char*, unsigned int)+0x1a>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
		count++;
    2b24:	3401      	adds	r4, #1
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    2b26:	f805 0b01 	strb.w	r0, [r5], #1
//
size_t Stream::readBytes(char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
	size_t count = 0;
	while (count < length) {
    2b2a:	42a6      	cmp	r6, r4
    2b2c:	d008      	beq.n	2b40 <Stream::readBytes(char*, unsigned int)+0x2c>
		int c = timedRead();
    2b2e:	4638      	mov	r0, r7
    2b30:	f7ff ffd8 	bl	2ae4 <Stream::timedRead()>
		if (c < 0) {
    2b34:	2800      	cmp	r0, #0
    2b36:	daf5      	bge.n	2b24 <Stream::readBytes(char*, unsigned int)+0x10>
	String readString(size_t max = 120);
	String readStringUntil(char terminator, size_t max = 120);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    2b38:	2301      	movs	r3, #1
    2b3a:	4620      	mov	r0, r4
    2b3c:	733b      	strb	r3, [r7, #12]
    2b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
    2b40:	4630      	mov	r0, r6
		}
		*buffer++ = (char)c;
		count++;
	}
	return count;
}
    2b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
	if (buffer == nullptr) return 0;
    2b44:	4608      	mov	r0, r1
    2b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002b48 <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    2b48:	f7ff b8f8 	b.w	1d3c <usb_serial_flush_input>

00002b4c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    2b4c:	f7ff b8ce 	b.w	1cec <usb_serial_peekchar>

00002b50 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    2b50:	f7ff b92e 	b.w	1db0 <usb_serial_getchar>

00002b54 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2b54:	f7ff b8ec 	b.w	1d30 <usb_serial_available>

00002b58 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    2b58:	f7ff b982 	b.w	1e60 <usb_serial_flush_output>

00002b5c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    2b5c:	f7ff b95a 	b.w	1e14 <usb_serial_write_buffer_free>

00002b60 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2b60:	4608      	mov	r0, r1
    2b62:	4611      	mov	r1, r2
    2b64:	f7ff b94a 	b.w	1dfc <usb_serial_write>

00002b68 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2b68:	4608      	mov	r0, r1
    2b6a:	f7ff b931 	b.w	1dd0 <usb_serial_putchar>
    2b6e:	bf00      	nop

00002b70 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    2b70:	b570      	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    2b72:	4c21      	ldr	r4, [pc, #132]	; (2bf8 <yield+0x88>)
    2b74:	7823      	ldrb	r3, [r4, #0]
    2b76:	b983      	cbnz	r3, 2b9a <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    2b78:	4b20      	ldr	r3, [pc, #128]	; (2bfc <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2b7a:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    2b7c:	781b      	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    2b7e:	7022      	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    2b80:	bb1b      	cbnz	r3, 2bca <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    2b82:	4b1f      	ldr	r3, [pc, #124]	; (2c00 <yield+0x90>)
    2b84:	781b      	ldrb	r3, [r3, #0]
    2b86:	2b00      	cmp	r3, #0
    2b88:	d129      	bne.n	2bde <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    2b8a:	4b1e      	ldr	r3, [pc, #120]	; (2c04 <yield+0x94>)

	running = 0;
    2b8c:	2100      	movs	r1, #0
    2b8e:	681a      	ldr	r2, [r3, #0]
    2b90:	7021      	strb	r1, [r4, #0]
    2b92:	b112      	cbz	r2, 2b9a <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2b94:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    2b98:	b102      	cbz	r2, 2b9c <yield+0x2c>
    2b9a:	bd70      	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2b9c:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    2ba0:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    2ba2:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    2ba4:	b1f2      	cbz	r2, 2be4 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    2ba6:	4c18      	ldr	r4, [pc, #96]	; (2c08 <yield+0x98>)
    2ba8:	7821      	ldrb	r1, [r4, #0]
    2baa:	b9d9      	cbnz	r1, 2be4 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2bac:	2601      	movs	r6, #1
		firstYield = first->_next;
    2bae:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    2bb0:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    2bb2:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    2bb4:	b1d5      	cbz	r5, 2bec <yield+0x7c>
			firstYield->_prev = nullptr;
    2bb6:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2bb8:	b900      	cbnz	r0, 2bbc <yield+0x4c>
    2bba:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2bbc:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    2bbe:	6893      	ldr	r3, [r2, #8]
    2bc0:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    2bc2:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    2bc4:	4798      	blx	r3
		runningFromYield = false;
    2bc6:	7025      	strb	r5, [r4, #0]
    2bc8:	bd70      	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    2bca:	f7ff f8b1 	bl	1d30 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    2bce:	2800      	cmp	r0, #0
    2bd0:	d0d7      	beq.n	2b82 <yield+0x12>
    2bd2:	f7fd fb77 	bl	2c4 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    2bd6:	4b0a      	ldr	r3, [pc, #40]	; (2c00 <yield+0x90>)
    2bd8:	781b      	ldrb	r3, [r3, #0]
    2bda:	2b00      	cmp	r3, #0
    2bdc:	d0d5      	beq.n	2b8a <yield+0x1a>
    2bde:	f7ff fd67 	bl	26b0 <HardwareSerial::processSerialEvents()>
    2be2:	e7d2      	b.n	2b8a <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2be4:	2800      	cmp	r0, #0
    2be6:	d1d8      	bne.n	2b9a <yield+0x2a>
    2be8:	b662      	cpsie	i
    2bea:	bd70      	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    2bec:	4b07      	ldr	r3, [pc, #28]	; (2c0c <yield+0x9c>)
    2bee:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2bf0:	2800      	cmp	r0, #0
    2bf2:	d1e3      	bne.n	2bbc <yield+0x4c>
    2bf4:	e7e1      	b.n	2bba <yield+0x4a>
    2bf6:	bf00      	nop
    2bf8:	20001d30 	.word	0x20001d30
    2bfc:	20000534 	.word	0x20000534
    2c00:	20001c98 	.word	0x20001c98
    2c04:	20001c70 	.word	0x20001c70
    2c08:	20001c74 	.word	0x20001c74
    2c0c:	20001c6c 	.word	0x20001c6c

00002c10 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2c10:	4a96      	ldr	r2, [pc, #600]	; (2e6c <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2c12:	4b97      	ldr	r3, [pc, #604]	; (2e70 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2c14:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    2c16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    2c1a:	4c96      	ldr	r4, [pc, #600]	; (2e74 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2c1c:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    2c20:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2c22:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2c24:	d91c      	bls.n	2c60 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    2c26:	4b94      	ldr	r3, [pc, #592]	; (2e78 <set_arm_clock+0x268>)
    2c28:	4298      	cmp	r0, r3
    2c2a:	f240 8115 	bls.w	2e58 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2c2e:	4b93      	ldr	r3, [pc, #588]	; (2e7c <set_arm_clock+0x26c>)
    2c30:	f240 6527 	movw	r5, #1575	; 0x627
    2c34:	4f92      	ldr	r7, [pc, #584]	; (2e80 <set_arm_clock+0x270>)
    2c36:	4403      	add	r3, r0
    2c38:	4c92      	ldr	r4, [pc, #584]	; (2e84 <set_arm_clock+0x274>)
    2c3a:	0a1a      	lsrs	r2, r3, #8
    2c3c:	fba7 3202 	umull	r3, r2, r7, r2
    2c40:	09d3      	lsrs	r3, r2, #7
    2c42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2c46:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2c4a:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    2c4e:	42ab      	cmp	r3, r5
    2c50:	bf28      	it	cs
    2c52:	462b      	movcs	r3, r5
    2c54:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    2c58:	fba4 3503 	umull	r3, r5, r4, r3
    2c5c:	08ed      	lsrs	r5, r5, #3
    2c5e:	e004      	b.n	2c6a <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    2c60:	4d89      	ldr	r5, [pc, #548]	; (2e88 <set_arm_clock+0x278>)
    2c62:	42a8      	cmp	r0, r5
    2c64:	bf94      	ite	ls
    2c66:	2506      	movls	r5, #6
    2c68:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2c6a:	4a81      	ldr	r2, [pc, #516]	; (2e70 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2c6c:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2c70:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2c74:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2c76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    2c7a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2c7e:	d20a      	bcs.n	2c96 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2c80:	4b7c      	ldr	r3, [pc, #496]	; (2e74 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2c82:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2c86:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2c88:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2c8a:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2c8c:	6813      	ldr	r3, [r2, #0]
    2c8e:	2b00      	cmp	r3, #0
    2c90:	dafc      	bge.n	2c8c <set_arm_clock+0x7c>
    2c92:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    2c96:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    2c9a:	d131      	bne.n	2d00 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    2c9c:	4c7b      	ldr	r4, [pc, #492]	; (2e8c <set_arm_clock+0x27c>)
    2c9e:	4a7c      	ldr	r2, [pc, #496]	; (2e90 <set_arm_clock+0x280>)
    2ca0:	f8d4 c010 	ldr.w	ip, [r4, #16]
    2ca4:	4614      	mov	r4, r2
    2ca6:	ea0c 0202 	and.w	r2, ip, r2
    2caa:	42a2      	cmp	r2, r4
    2cac:	bf0a      	itet	eq
    2cae:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    2cb2:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    2cb6:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2cb8:	ea8e 0403 	eor.w	r4, lr, r3
    2cbc:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    2cc0:	d008      	beq.n	2cd4 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    2cc2:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2cc6:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    2cca:	4c69      	ldr	r4, [pc, #420]	; (2e70 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2ccc:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    2cd0:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    2cd4:	ea81 0302 	eor.w	r3, r1, r2
    2cd8:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    2cdc:	d008      	beq.n	2cf0 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2cde:	4b64      	ldr	r3, [pc, #400]	; (2e70 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    2ce0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    2ce4:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2ce6:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    2ce8:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2cea:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2cec:	071c      	lsls	r4, r3, #28
    2cee:	d4fc      	bmi.n	2cea <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    2cf0:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    2cf4:	4a5e      	ldr	r2, [pc, #376]	; (2e70 <set_arm_clock+0x260>)
    2cf6:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2cfa:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2cfc:	0699      	lsls	r1, r3, #26
    2cfe:	d4fc      	bmi.n	2cfa <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    2d00:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2d02:	4c64      	ldr	r4, [pc, #400]	; (2e94 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    2d04:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    2d06:	fb01 f302 	mul.w	r3, r1, r2
    2d0a:	fb00 f303 	mul.w	r3, r0, r3
    2d0e:	42a3      	cmp	r3, r4
    2d10:	d809      	bhi.n	2d26 <set_arm_clock+0x116>
		if (div_arm < 8) {
    2d12:	2a07      	cmp	r2, #7
    2d14:	f200 8095 	bhi.w	2e42 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    2d18:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    2d1a:	fb01 f302 	mul.w	r3, r1, r2
    2d1e:	fb00 f303 	mul.w	r3, r0, r3
    2d22:	42a3      	cmp	r3, r4
    2d24:	d9f5      	bls.n	2d12 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2d26:	485c      	ldr	r0, [pc, #368]	; (2e98 <set_arm_clock+0x288>)
    2d28:	4c5c      	ldr	r4, [pc, #368]	; (2e9c <set_arm_clock+0x28c>)
    2d2a:	4418      	add	r0, r3
    2d2c:	fba4 0300 	umull	r0, r3, r4, r0
    2d30:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    2d32:	2b6c      	cmp	r3, #108	; 0x6c
    2d34:	f200 808b 	bhi.w	2e4e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    2d38:	2b35      	cmp	r3, #53	; 0x35
    2d3a:	f200 808f 	bhi.w	2e5c <set_arm_clock+0x24c>
    2d3e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 2ec8 <set_arm_clock+0x2b8>
    2d42:	2336      	movs	r3, #54	; 0x36
    2d44:	4856      	ldr	r0, [pc, #344]	; (2ea0 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2d46:	f8df c144 	ldr.w	ip, [pc, #324]	; 2e8c <set_arm_clock+0x27c>
    2d4a:	4c56      	ldr	r4, [pc, #344]	; (2ea4 <set_arm_clock+0x294>)
    2d4c:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2d50:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2d54:	ea09 0404 	and.w	r4, r9, r4
    2d58:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    2d5a:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2d5e:	d00b      	beq.n	2d78 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2d60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2d64:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2d68:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2d6a:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    2d6e:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2d72:	6823      	ldr	r3, [r4, #0]
    2d74:	2b00      	cmp	r3, #0
    2d76:	dafc      	bge.n	2d72 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2d78:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 2e70 <set_arm_clock+0x260>
    2d7c:	3a01      	subs	r2, #1
    2d7e:	f8dc 3010 	ldr.w	r3, [ip, #16]
    2d82:	f003 0307 	and.w	r3, r3, #7
    2d86:	4293      	cmp	r3, r2
    2d88:	d007      	beq.n	2d9a <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2d8a:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2d8e:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2d90:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2d94:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2d96:	03db      	lsls	r3, r3, #15
    2d98:	d4fc      	bmi.n	2d94 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2d9a:	3901      	subs	r1, #1
    2d9c:	0289      	lsls	r1, r1, #10
    2d9e:	ea8e 0301 	eor.w	r3, lr, r1
    2da2:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    2da6:	d00c      	beq.n	2dc2 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    2da8:	4b31      	ldr	r3, [pc, #196]	; (2e70 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    2daa:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2dae:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2db2:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2db4:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    2db8:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2dbc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2dbe:	0799      	lsls	r1, r3, #30
    2dc0:	d4fc      	bmi.n	2dbc <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2dc2:	4b39      	ldr	r3, [pc, #228]	; (2ea8 <set_arm_clock+0x298>)
    2dc4:	4939      	ldr	r1, [pc, #228]	; (2eac <set_arm_clock+0x29c>)
    2dc6:	4403      	add	r3, r0
    2dc8:	09db      	lsrs	r3, r3, #7
    2dca:	fba1 3103 	umull	r3, r1, r1, r3
    2dce:	0b09      	lsrs	r1, r1, #12
    2dd0:	2904      	cmp	r1, #4
    2dd2:	bf28      	it	cs
    2dd4:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    2dd6:	1e4b      	subs	r3, r1, #1
    2dd8:	021b      	lsls	r3, r3, #8
    2dda:	ea8e 0203 	eor.w	r2, lr, r3
    2dde:	f412 7f40 	tst.w	r2, #768	; 0x300
    2de2:	d007      	beq.n	2df4 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    2de4:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2dec:	4a20      	ldr	r2, [pc, #128]	; (2e70 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2dee:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    2df2:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2df4:	4b1e      	ldr	r3, [pc, #120]	; (2e70 <set_arm_clock+0x260>)
    2df6:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2df8:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2dfa:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    2dfe:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2e00:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2e02:	069b      	lsls	r3, r3, #26
    2e04:	d4fc      	bmi.n	2e00 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2e06:	4b2a      	ldr	r3, [pc, #168]	; (2eb0 <set_arm_clock+0x2a0>)
    2e08:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2e0c:	4c29      	ldr	r4, [pc, #164]	; (2eb4 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2e0e:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2e10:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    2e14:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2e16:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2e1a:	4c27      	ldr	r4, [pc, #156]	; (2eb8 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2e1c:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2e20:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2e24:	4a25      	ldr	r2, [pc, #148]	; (2ebc <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    2e26:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2e28:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2e2a:	d208      	bcs.n	2e3e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2e2c:	4b11      	ldr	r3, [pc, #68]	; (2e74 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2e2e:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2e32:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2e34:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    2e36:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2e38:	6813      	ldr	r3, [r2, #0]
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	dafc      	bge.n	2e38 <set_arm_clock+0x228>
	}

	return frequency;
}
    2e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    2e42:	2904      	cmp	r1, #4
    2e44:	f63f af6f 	bhi.w	2d26 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    2e48:	3101      	adds	r1, #1
				div_arm = 1;
    2e4a:	2201      	movs	r2, #1
    2e4c:	e75b      	b.n	2d06 <set_arm_clock+0xf6>
    2e4e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2ecc <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    2e52:	236c      	movs	r3, #108	; 0x6c
    2e54:	481a      	ldr	r0, [pc, #104]	; (2ec0 <set_arm_clock+0x2b0>)
    2e56:	e776      	b.n	2d46 <set_arm_clock+0x136>
    2e58:	2512      	movs	r5, #18
    2e5a:	e706      	b.n	2c6a <set_arm_clock+0x5a>
    2e5c:	4819      	ldr	r0, [pc, #100]	; (2ec4 <set_arm_clock+0x2b4>)
    2e5e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2ed0 <set_arm_clock+0x2c0>
    2e62:	fb00 f003 	mul.w	r0, r0, r3
    2e66:	ea43 0808 	orr.w	r8, r3, r8
    2e6a:	e76c      	b.n	2d46 <set_arm_clock+0x136>
    2e6c:	1f78a400 	.word	0x1f78a400
    2e70:	400fc000 	.word	0x400fc000
    2e74:	40080000 	.word	0x40080000
    2e78:	23c34600 	.word	0x23c34600
    2e7c:	dc3cba00 	.word	0xdc3cba00
    2e80:	004cb223 	.word	0x004cb223
    2e84:	51eb851f 	.word	0x51eb851f
    2e88:	016e3600 	.word	0x016e3600
    2e8c:	400d8000 	.word	0x400d8000
    2e90:	80003040 	.word	0x80003040
    2e94:	269fb1ff 	.word	0x269fb1ff
    2e98:	005b8d80 	.word	0x005b8d80
    2e9c:	165e9f81 	.word	0x165e9f81
    2ea0:	269fb200 	.word	0x269fb200
    2ea4:	8001307f 	.word	0x8001307f
    2ea8:	08f0d17f 	.word	0x08f0d17f
    2eac:	00e5109f 	.word	0x00e5109f
    2eb0:	431bde83 	.word	0x431bde83
    2eb4:	2000054c 	.word	0x2000054c
    2eb8:	20000548 	.word	0x20000548
    2ebc:	20001a38 	.word	0x20001a38
    2ec0:	4d3f6400 	.word	0x4d3f6400
    2ec4:	00b71b00 	.word	0x00b71b00
    2ec8:	80002036 	.word	0x80002036
    2ecc:	8000206c 	.word	0x8000206c
    2ed0:	80002000 	.word	0x80002000

00002ed4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    2ed4:	b4f0      	push	{r4, r5, r6, r7}
    2ed6:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    2ed8:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    2eda:	4637      	mov	r7, r6
    2edc:	e000      	b.n	2ee0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    2ede:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    2ee0:	fbb0 f3f2 	udiv	r3, r0, r2
    2ee4:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2ee8:	f100 0437 	add.w	r4, r0, #55	; 0x37
    2eec:	2809      	cmp	r0, #9
    2eee:	f100 0030 	add.w	r0, r0, #48	; 0x30
    2ef2:	b2e4      	uxtb	r4, r4
    2ef4:	bf98      	it	ls
    2ef6:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    2ef8:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2efa:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    2efe:	2b00      	cmp	r3, #0
    2f00:	d1ed      	bne.n	2ede <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    2f02:	194a      	adds	r2, r1, r5
    2f04:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    2f06:	b14d      	cbz	r5, 2f1c <ultoa+0x48>
    2f08:	3301      	adds	r3, #1
		t = buf[j];
    2f0a:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    2f0e:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2f10:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    2f12:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2f14:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    2f16:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    2f1a:	dbf5      	blt.n	2f08 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    2f1c:	4608      	mov	r0, r1
    2f1e:	bcf0      	pop	{r4, r5, r6, r7}
    2f20:	4770      	bx	lr
    2f22:	bf00      	nop

00002f24 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2f24:	48a4      	ldr	r0, [pc, #656]	; (31b8 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2f26:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2f2a:	4ba4      	ldr	r3, [pc, #656]	; (31bc <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2f2c:	6f82      	ldr	r2, [r0, #120]	; 0x78
    2f2e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    2f32:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2f34:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    2f36:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2f38:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2f3c:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2f40:	4c9f      	ldr	r4, [pc, #636]	; (31c0 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2f42:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2f46:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2f48:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2f4c:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2f4e:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2f50:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2f54:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2f58:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2f5c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2f60:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2f64:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    2f68:	b280      	uxth	r0, r0
    2f6a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    2f6e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    2f72:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    2f76:	4b91      	ldr	r3, [pc, #580]	; (31bc <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    2f78:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2f7a:	2500      	movs	r5, #0
    2f7c:	0140      	lsls	r0, r0, #5
    2f7e:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2f80:	2904      	cmp	r1, #4
    2f82:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2f84:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2f88:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    2f8a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2f8c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    2f8e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    2f90:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    2f92:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    2f94:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2f96:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2f98:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2f9a:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2f9c:	d1e9      	bne.n	2f72 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2f9e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2fa2:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2fa6:	4b87      	ldr	r3, [pc, #540]	; (31c4 <pwm_init+0x2a0>)
    2fa8:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2fac:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2fae:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2fb0:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2fb4:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2fb6:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2fba:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    2fbe:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    2fc2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    2fc6:	b280      	uxth	r0, r0
    2fc8:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    2fcc:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    2fd0:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    2fd4:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    2fd8:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    2fdc:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    2fe0:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    2fe4:	b280      	uxth	r0, r0
    2fe6:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    2fea:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    2fee:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    2ff2:	4b74      	ldr	r3, [pc, #464]	; (31c4 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    2ff4:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    2ff6:	2500      	movs	r5, #0
    2ff8:	0140      	lsls	r0, r0, #5
    2ffa:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    2ffc:	2904      	cmp	r1, #4
    2ffe:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3000:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3002:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3006:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3008:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    300a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    300c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    300e:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3010:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3012:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3014:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3016:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3018:	d1e9      	bne.n	2fee <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    301a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    301e:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3022:	4b69      	ldr	r3, [pc, #420]	; (31c8 <pwm_init+0x2a4>)
    3024:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3028:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    302a:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    302c:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3030:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3032:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3036:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    303a:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    303e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    3042:	b280      	uxth	r0, r0
    3044:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    3048:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    304c:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3050:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3054:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3058:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    305c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    3060:	b280      	uxth	r0, r0
    3062:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    3066:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    306a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    306e:	4b56      	ldr	r3, [pc, #344]	; (31c8 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    3070:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3072:	2500      	movs	r5, #0
    3074:	0140      	lsls	r0, r0, #5
    3076:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3078:	2904      	cmp	r1, #4
    307a:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    307c:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    307e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3082:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3084:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3086:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3088:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    308a:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    308c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    308e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3090:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3092:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3094:	d1e9      	bne.n	306a <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3096:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    309a:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    309e:	4b4b      	ldr	r3, [pc, #300]	; (31cc <pwm_init+0x2a8>)
    30a0:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    30a4:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    30a6:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    30a8:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    30ac:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    30ae:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    30b2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    30b6:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    30ba:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    30be:	b280      	uxth	r0, r0
    30c0:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    30c4:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    30c8:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    30cc:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    30d0:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    30d4:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    30d8:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    30dc:	b280      	uxth	r0, r0
    30de:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    30e2:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    30e6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    30ea:	4b38      	ldr	r3, [pc, #224]	; (31cc <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    30ec:	3101      	adds	r1, #1
    30ee:	0140      	lsls	r0, r0, #5
    30f0:	461c      	mov	r4, r3
    30f2:	2904      	cmp	r1, #4
    30f4:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    30f6:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    30f8:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    30fc:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    30fe:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3100:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3102:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3104:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    3106:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3108:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    310a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    310c:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    310e:	d1ea      	bne.n	30e6 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3110:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3114:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3116:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3118:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    311c:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    311e:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3122:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3124:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3128:	433b      	orrs	r3, r7
    312a:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    312e:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    3132:	b29b      	uxth	r3, r3
    3134:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    3138:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    313c:	0150      	lsls	r0, r2, #5
    313e:	4b24      	ldr	r3, [pc, #144]	; (31d0 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3140:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3142:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3144:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3146:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3148:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    314a:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    314c:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    314e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3152:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3154:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3156:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3158:	d1f0      	bne.n	313c <pwm_init+0x218>
    315a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    315c:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    315e:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3162:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3166:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3168:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    316c:	0150      	lsls	r0, r2, #5
    316e:	4b19      	ldr	r3, [pc, #100]	; (31d4 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3170:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3172:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3174:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3176:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3178:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    317a:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    317c:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    317e:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3180:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3182:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3184:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3186:	d1f1      	bne.n	316c <pwm_init+0x248>
    3188:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    318a:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    318c:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3190:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3194:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3196:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    319a:	0150      	lsls	r0, r2, #5
    319c:	4b0e      	ldr	r3, [pc, #56]	; (31d8 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    319e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    31a0:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    31a2:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    31a4:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    31a6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    31a8:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    31aa:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    31ac:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    31ae:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    31b0:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    31b2:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    31b4:	d1f1      	bne.n	319a <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    31b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31b8:	400fc000 	.word	0x400fc000
    31bc:	403dc000 	.word	0x403dc000
    31c0:	fc030000 	.word	0xfc030000
    31c4:	403e0000 	.word	0x403e0000
    31c8:	403e4000 	.word	0x403e4000
    31cc:	403e8000 	.word	0x403e8000
    31d0:	401dc000 	.word	0x401dc000
    31d4:	401e0000 	.word	0x401e0000
    31d8:	401e4000 	.word	0x401e4000

000031dc <__aeabi_atexit>:
    31dc:	460b      	mov	r3, r1
    31de:	4601      	mov	r1, r0
    31e0:	4618      	mov	r0, r3
    31e2:	f000 b801 	b.w	31e8 <__cxa_atexit>
    31e6:	bf00      	nop

000031e8 <__cxa_atexit>:
    31e8:	4613      	mov	r3, r2
    31ea:	460a      	mov	r2, r1
    31ec:	4601      	mov	r1, r0
    31ee:	2002      	movs	r0, #2
    31f0:	f000 bb52 	b.w	3898 <__register_exitproc>

000031f4 <__errno>:
    31f4:	4b01      	ldr	r3, [pc, #4]	; (31fc <__errno+0x8>)
    31f6:	6818      	ldr	r0, [r3, #0]
    31f8:	4770      	bx	lr
    31fa:	bf00      	nop
    31fc:	20000978 	.word	0x20000978

00003200 <__libc_init_array>:
    3200:	b570      	push	{r4, r5, r6, lr}
    3202:	4e0f      	ldr	r6, [pc, #60]	; (3240 <__libc_init_array+0x40>)
    3204:	4d0f      	ldr	r5, [pc, #60]	; (3244 <__libc_init_array+0x44>)
    3206:	1b76      	subs	r6, r6, r5
    3208:	10b6      	asrs	r6, r6, #2
    320a:	bf18      	it	ne
    320c:	2400      	movne	r4, #0
    320e:	d005      	beq.n	321c <__libc_init_array+0x1c>
    3210:	3401      	adds	r4, #1
    3212:	f855 3b04 	ldr.w	r3, [r5], #4
    3216:	4798      	blx	r3
    3218:	42a6      	cmp	r6, r4
    321a:	d1f9      	bne.n	3210 <__libc_init_array+0x10>
    321c:	4e0a      	ldr	r6, [pc, #40]	; (3248 <__libc_init_array+0x48>)
    321e:	4d0b      	ldr	r5, [pc, #44]	; (324c <__libc_init_array+0x4c>)
    3220:	1b76      	subs	r6, r6, r5
    3222:	f000 fcc1 	bl	3ba8 <___init_veneer>
    3226:	10b6      	asrs	r6, r6, #2
    3228:	bf18      	it	ne
    322a:	2400      	movne	r4, #0
    322c:	d006      	beq.n	323c <__libc_init_array+0x3c>
    322e:	3401      	adds	r4, #1
    3230:	f855 3b04 	ldr.w	r3, [r5], #4
    3234:	4798      	blx	r3
    3236:	42a6      	cmp	r6, r4
    3238:	d1f9      	bne.n	322e <__libc_init_array+0x2e>
    323a:	bd70      	pop	{r4, r5, r6, pc}
    323c:	bd70      	pop	{r4, r5, r6, pc}
    323e:	bf00      	nop
    3240:	600016f8 	.word	0x600016f8
    3244:	600016f8 	.word	0x600016f8
    3248:	60001700 	.word	0x60001700
    324c:	600016f8 	.word	0x600016f8

00003250 <malloc>:
    3250:	4b02      	ldr	r3, [pc, #8]	; (325c <malloc+0xc>)
    3252:	4601      	mov	r1, r0
    3254:	6818      	ldr	r0, [r3, #0]
    3256:	f000 b803 	b.w	3260 <_malloc_r>
    325a:	bf00      	nop
    325c:	20000978 	.word	0x20000978

00003260 <_malloc_r>:
    3260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3264:	f101 050b 	add.w	r5, r1, #11
    3268:	2d16      	cmp	r5, #22
    326a:	b083      	sub	sp, #12
    326c:	4606      	mov	r6, r0
    326e:	f240 809f 	bls.w	33b0 <_malloc_r+0x150>
    3272:	f035 0507 	bics.w	r5, r5, #7
    3276:	f100 80bf 	bmi.w	33f8 <_malloc_r+0x198>
    327a:	42a9      	cmp	r1, r5
    327c:	f200 80bc 	bhi.w	33f8 <_malloc_r+0x198>
    3280:	f000 faf4 	bl	386c <__malloc_lock>
    3284:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    3288:	f0c0 829c 	bcc.w	37c4 <_malloc_r+0x564>
    328c:	0a6b      	lsrs	r3, r5, #9
    328e:	f000 80ba 	beq.w	3406 <_malloc_r+0x1a6>
    3292:	2b04      	cmp	r3, #4
    3294:	f200 8183 	bhi.w	359e <_malloc_r+0x33e>
    3298:	09a8      	lsrs	r0, r5, #6
    329a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    329e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    32a2:	3038      	adds	r0, #56	; 0x38
    32a4:	4fc4      	ldr	r7, [pc, #784]	; (35b8 <_malloc_r+0x358>)
    32a6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    32aa:	f1a3 0108 	sub.w	r1, r3, #8
    32ae:	685c      	ldr	r4, [r3, #4]
    32b0:	42a1      	cmp	r1, r4
    32b2:	d107      	bne.n	32c4 <_malloc_r+0x64>
    32b4:	e0ac      	b.n	3410 <_malloc_r+0x1b0>
    32b6:	2a00      	cmp	r2, #0
    32b8:	f280 80ac 	bge.w	3414 <_malloc_r+0x1b4>
    32bc:	68e4      	ldr	r4, [r4, #12]
    32be:	42a1      	cmp	r1, r4
    32c0:	f000 80a6 	beq.w	3410 <_malloc_r+0x1b0>
    32c4:	6863      	ldr	r3, [r4, #4]
    32c6:	f023 0303 	bic.w	r3, r3, #3
    32ca:	1b5a      	subs	r2, r3, r5
    32cc:	2a0f      	cmp	r2, #15
    32ce:	ddf2      	ble.n	32b6 <_malloc_r+0x56>
    32d0:	49b9      	ldr	r1, [pc, #740]	; (35b8 <_malloc_r+0x358>)
    32d2:	693c      	ldr	r4, [r7, #16]
    32d4:	f101 0e08 	add.w	lr, r1, #8
    32d8:	4574      	cmp	r4, lr
    32da:	f000 81b3 	beq.w	3644 <_malloc_r+0x3e4>
    32de:	6863      	ldr	r3, [r4, #4]
    32e0:	f023 0303 	bic.w	r3, r3, #3
    32e4:	1b5a      	subs	r2, r3, r5
    32e6:	2a0f      	cmp	r2, #15
    32e8:	f300 8199 	bgt.w	361e <_malloc_r+0x3be>
    32ec:	2a00      	cmp	r2, #0
    32ee:	f8c1 e014 	str.w	lr, [r1, #20]
    32f2:	f8c1 e010 	str.w	lr, [r1, #16]
    32f6:	f280 809e 	bge.w	3436 <_malloc_r+0x1d6>
    32fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    32fe:	f080 8167 	bcs.w	35d0 <_malloc_r+0x370>
    3302:	08db      	lsrs	r3, r3, #3
    3304:	f103 0c01 	add.w	ip, r3, #1
    3308:	2201      	movs	r2, #1
    330a:	109b      	asrs	r3, r3, #2
    330c:	fa02 f303 	lsl.w	r3, r2, r3
    3310:	684a      	ldr	r2, [r1, #4]
    3312:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    3316:	f8c4 8008 	str.w	r8, [r4, #8]
    331a:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    331e:	431a      	orrs	r2, r3
    3320:	f1a9 0308 	sub.w	r3, r9, #8
    3324:	60e3      	str	r3, [r4, #12]
    3326:	604a      	str	r2, [r1, #4]
    3328:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    332c:	f8c8 400c 	str.w	r4, [r8, #12]
    3330:	1083      	asrs	r3, r0, #2
    3332:	2401      	movs	r4, #1
    3334:	409c      	lsls	r4, r3
    3336:	4294      	cmp	r4, r2
    3338:	f200 808a 	bhi.w	3450 <_malloc_r+0x1f0>
    333c:	4214      	tst	r4, r2
    333e:	d106      	bne.n	334e <_malloc_r+0xee>
    3340:	f020 0003 	bic.w	r0, r0, #3
    3344:	0064      	lsls	r4, r4, #1
    3346:	4214      	tst	r4, r2
    3348:	f100 0004 	add.w	r0, r0, #4
    334c:	d0fa      	beq.n	3344 <_malloc_r+0xe4>
    334e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    3352:	46cc      	mov	ip, r9
    3354:	4680      	mov	r8, r0
    3356:	f8dc 100c 	ldr.w	r1, [ip, #12]
    335a:	458c      	cmp	ip, r1
    335c:	d107      	bne.n	336e <_malloc_r+0x10e>
    335e:	e173      	b.n	3648 <_malloc_r+0x3e8>
    3360:	2a00      	cmp	r2, #0
    3362:	f280 8181 	bge.w	3668 <_malloc_r+0x408>
    3366:	68c9      	ldr	r1, [r1, #12]
    3368:	458c      	cmp	ip, r1
    336a:	f000 816d 	beq.w	3648 <_malloc_r+0x3e8>
    336e:	684b      	ldr	r3, [r1, #4]
    3370:	f023 0303 	bic.w	r3, r3, #3
    3374:	1b5a      	subs	r2, r3, r5
    3376:	2a0f      	cmp	r2, #15
    3378:	ddf2      	ble.n	3360 <_malloc_r+0x100>
    337a:	460c      	mov	r4, r1
    337c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    3380:	f854 8f08 	ldr.w	r8, [r4, #8]!
    3384:	194b      	adds	r3, r1, r5
    3386:	f045 0501 	orr.w	r5, r5, #1
    338a:	604d      	str	r5, [r1, #4]
    338c:	f042 0101 	orr.w	r1, r2, #1
    3390:	f8c8 c00c 	str.w	ip, [r8, #12]
    3394:	4630      	mov	r0, r6
    3396:	f8cc 8008 	str.w	r8, [ip, #8]
    339a:	617b      	str	r3, [r7, #20]
    339c:	613b      	str	r3, [r7, #16]
    339e:	f8c3 e00c 	str.w	lr, [r3, #12]
    33a2:	f8c3 e008 	str.w	lr, [r3, #8]
    33a6:	6059      	str	r1, [r3, #4]
    33a8:	509a      	str	r2, [r3, r2]
    33aa:	f000 fa61 	bl	3870 <__malloc_unlock>
    33ae:	e01f      	b.n	33f0 <_malloc_r+0x190>
    33b0:	2910      	cmp	r1, #16
    33b2:	d821      	bhi.n	33f8 <_malloc_r+0x198>
    33b4:	f000 fa5a 	bl	386c <__malloc_lock>
    33b8:	2510      	movs	r5, #16
    33ba:	2306      	movs	r3, #6
    33bc:	2002      	movs	r0, #2
    33be:	4f7e      	ldr	r7, [pc, #504]	; (35b8 <_malloc_r+0x358>)
    33c0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    33c4:	f1a3 0208 	sub.w	r2, r3, #8
    33c8:	685c      	ldr	r4, [r3, #4]
    33ca:	4294      	cmp	r4, r2
    33cc:	f000 8145 	beq.w	365a <_malloc_r+0x3fa>
    33d0:	6863      	ldr	r3, [r4, #4]
    33d2:	68e1      	ldr	r1, [r4, #12]
    33d4:	68a5      	ldr	r5, [r4, #8]
    33d6:	f023 0303 	bic.w	r3, r3, #3
    33da:	4423      	add	r3, r4
    33dc:	4630      	mov	r0, r6
    33de:	685a      	ldr	r2, [r3, #4]
    33e0:	60e9      	str	r1, [r5, #12]
    33e2:	f042 0201 	orr.w	r2, r2, #1
    33e6:	608d      	str	r5, [r1, #8]
    33e8:	605a      	str	r2, [r3, #4]
    33ea:	f000 fa41 	bl	3870 <__malloc_unlock>
    33ee:	3408      	adds	r4, #8
    33f0:	4620      	mov	r0, r4
    33f2:	b003      	add	sp, #12
    33f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33f8:	2400      	movs	r4, #0
    33fa:	230c      	movs	r3, #12
    33fc:	4620      	mov	r0, r4
    33fe:	6033      	str	r3, [r6, #0]
    3400:	b003      	add	sp, #12
    3402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3406:	2380      	movs	r3, #128	; 0x80
    3408:	f04f 0e40 	mov.w	lr, #64	; 0x40
    340c:	203f      	movs	r0, #63	; 0x3f
    340e:	e749      	b.n	32a4 <_malloc_r+0x44>
    3410:	4670      	mov	r0, lr
    3412:	e75d      	b.n	32d0 <_malloc_r+0x70>
    3414:	4423      	add	r3, r4
    3416:	68e1      	ldr	r1, [r4, #12]
    3418:	685a      	ldr	r2, [r3, #4]
    341a:	68a5      	ldr	r5, [r4, #8]
    341c:	f042 0201 	orr.w	r2, r2, #1
    3420:	60e9      	str	r1, [r5, #12]
    3422:	4630      	mov	r0, r6
    3424:	608d      	str	r5, [r1, #8]
    3426:	605a      	str	r2, [r3, #4]
    3428:	f000 fa22 	bl	3870 <__malloc_unlock>
    342c:	3408      	adds	r4, #8
    342e:	4620      	mov	r0, r4
    3430:	b003      	add	sp, #12
    3432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3436:	4423      	add	r3, r4
    3438:	4630      	mov	r0, r6
    343a:	685a      	ldr	r2, [r3, #4]
    343c:	f042 0201 	orr.w	r2, r2, #1
    3440:	605a      	str	r2, [r3, #4]
    3442:	f000 fa15 	bl	3870 <__malloc_unlock>
    3446:	3408      	adds	r4, #8
    3448:	4620      	mov	r0, r4
    344a:	b003      	add	sp, #12
    344c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3450:	68bc      	ldr	r4, [r7, #8]
    3452:	6863      	ldr	r3, [r4, #4]
    3454:	f023 0803 	bic.w	r8, r3, #3
    3458:	45a8      	cmp	r8, r5
    345a:	d304      	bcc.n	3466 <_malloc_r+0x206>
    345c:	ebc5 0308 	rsb	r3, r5, r8
    3460:	2b0f      	cmp	r3, #15
    3462:	f300 808c 	bgt.w	357e <_malloc_r+0x31e>
    3466:	4b55      	ldr	r3, [pc, #340]	; (35bc <_malloc_r+0x35c>)
    3468:	f8df 9160 	ldr.w	r9, [pc, #352]	; 35cc <_malloc_r+0x36c>
    346c:	681a      	ldr	r2, [r3, #0]
    346e:	f8d9 3000 	ldr.w	r3, [r9]
    3472:	3301      	adds	r3, #1
    3474:	442a      	add	r2, r5
    3476:	eb04 0a08 	add.w	sl, r4, r8
    347a:	f000 8160 	beq.w	373e <_malloc_r+0x4de>
    347e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3482:	320f      	adds	r2, #15
    3484:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    3488:	f022 020f 	bic.w	r2, r2, #15
    348c:	4611      	mov	r1, r2
    348e:	4630      	mov	r0, r6
    3490:	9201      	str	r2, [sp, #4]
    3492:	f000 f9ef 	bl	3874 <_sbrk_r>
    3496:	f1b0 3fff 	cmp.w	r0, #4294967295
    349a:	4683      	mov	fp, r0
    349c:	9a01      	ldr	r2, [sp, #4]
    349e:	f000 8158 	beq.w	3752 <_malloc_r+0x4f2>
    34a2:	4582      	cmp	sl, r0
    34a4:	f200 80fc 	bhi.w	36a0 <_malloc_r+0x440>
    34a8:	4b45      	ldr	r3, [pc, #276]	; (35c0 <_malloc_r+0x360>)
    34aa:	6819      	ldr	r1, [r3, #0]
    34ac:	45da      	cmp	sl, fp
    34ae:	4411      	add	r1, r2
    34b0:	6019      	str	r1, [r3, #0]
    34b2:	f000 8153 	beq.w	375c <_malloc_r+0x4fc>
    34b6:	f8d9 0000 	ldr.w	r0, [r9]
    34ba:	f8df e110 	ldr.w	lr, [pc, #272]	; 35cc <_malloc_r+0x36c>
    34be:	3001      	adds	r0, #1
    34c0:	bf1b      	ittet	ne
    34c2:	ebca 0a0b 	rsbne	sl, sl, fp
    34c6:	4451      	addne	r1, sl
    34c8:	f8ce b000 	streq.w	fp, [lr]
    34cc:	6019      	strne	r1, [r3, #0]
    34ce:	f01b 0107 	ands.w	r1, fp, #7
    34d2:	f000 8117 	beq.w	3704 <_malloc_r+0x4a4>
    34d6:	f1c1 0008 	rsb	r0, r1, #8
    34da:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    34de:	4483      	add	fp, r0
    34e0:	3108      	adds	r1, #8
    34e2:	445a      	add	r2, fp
    34e4:	f3c2 020b 	ubfx	r2, r2, #0, #12
    34e8:	ebc2 0901 	rsb	r9, r2, r1
    34ec:	4649      	mov	r1, r9
    34ee:	4630      	mov	r0, r6
    34f0:	9301      	str	r3, [sp, #4]
    34f2:	f000 f9bf 	bl	3874 <_sbrk_r>
    34f6:	1c43      	adds	r3, r0, #1
    34f8:	9b01      	ldr	r3, [sp, #4]
    34fa:	f000 813f 	beq.w	377c <_malloc_r+0x51c>
    34fe:	ebcb 0200 	rsb	r2, fp, r0
    3502:	444a      	add	r2, r9
    3504:	f042 0201 	orr.w	r2, r2, #1
    3508:	6819      	ldr	r1, [r3, #0]
    350a:	f8c7 b008 	str.w	fp, [r7, #8]
    350e:	4449      	add	r1, r9
    3510:	42bc      	cmp	r4, r7
    3512:	f8cb 2004 	str.w	r2, [fp, #4]
    3516:	6019      	str	r1, [r3, #0]
    3518:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 35c0 <_malloc_r+0x360>
    351c:	d016      	beq.n	354c <_malloc_r+0x2ec>
    351e:	f1b8 0f0f 	cmp.w	r8, #15
    3522:	f240 80fd 	bls.w	3720 <_malloc_r+0x4c0>
    3526:	6862      	ldr	r2, [r4, #4]
    3528:	f1a8 030c 	sub.w	r3, r8, #12
    352c:	f023 0307 	bic.w	r3, r3, #7
    3530:	18e0      	adds	r0, r4, r3
    3532:	f002 0201 	and.w	r2, r2, #1
    3536:	f04f 0e05 	mov.w	lr, #5
    353a:	431a      	orrs	r2, r3
    353c:	2b0f      	cmp	r3, #15
    353e:	6062      	str	r2, [r4, #4]
    3540:	f8c0 e004 	str.w	lr, [r0, #4]
    3544:	f8c0 e008 	str.w	lr, [r0, #8]
    3548:	f200 811c 	bhi.w	3784 <_malloc_r+0x524>
    354c:	4b1d      	ldr	r3, [pc, #116]	; (35c4 <_malloc_r+0x364>)
    354e:	68bc      	ldr	r4, [r7, #8]
    3550:	681a      	ldr	r2, [r3, #0]
    3552:	4291      	cmp	r1, r2
    3554:	bf88      	it	hi
    3556:	6019      	strhi	r1, [r3, #0]
    3558:	4b1b      	ldr	r3, [pc, #108]	; (35c8 <_malloc_r+0x368>)
    355a:	681a      	ldr	r2, [r3, #0]
    355c:	4291      	cmp	r1, r2
    355e:	6862      	ldr	r2, [r4, #4]
    3560:	bf88      	it	hi
    3562:	6019      	strhi	r1, [r3, #0]
    3564:	f022 0203 	bic.w	r2, r2, #3
    3568:	4295      	cmp	r5, r2
    356a:	eba2 0305 	sub.w	r3, r2, r5
    356e:	d801      	bhi.n	3574 <_malloc_r+0x314>
    3570:	2b0f      	cmp	r3, #15
    3572:	dc04      	bgt.n	357e <_malloc_r+0x31e>
    3574:	4630      	mov	r0, r6
    3576:	f000 f97b 	bl	3870 <__malloc_unlock>
    357a:	2400      	movs	r4, #0
    357c:	e738      	b.n	33f0 <_malloc_r+0x190>
    357e:	1962      	adds	r2, r4, r5
    3580:	f043 0301 	orr.w	r3, r3, #1
    3584:	f045 0501 	orr.w	r5, r5, #1
    3588:	6065      	str	r5, [r4, #4]
    358a:	4630      	mov	r0, r6
    358c:	60ba      	str	r2, [r7, #8]
    358e:	6053      	str	r3, [r2, #4]
    3590:	f000 f96e 	bl	3870 <__malloc_unlock>
    3594:	3408      	adds	r4, #8
    3596:	4620      	mov	r0, r4
    3598:	b003      	add	sp, #12
    359a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    359e:	2b14      	cmp	r3, #20
    35a0:	d971      	bls.n	3686 <_malloc_r+0x426>
    35a2:	2b54      	cmp	r3, #84	; 0x54
    35a4:	f200 80a4 	bhi.w	36f0 <_malloc_r+0x490>
    35a8:	0b28      	lsrs	r0, r5, #12
    35aa:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    35ae:	ea4f 034e 	mov.w	r3, lr, lsl #1
    35b2:	306e      	adds	r0, #110	; 0x6e
    35b4:	e676      	b.n	32a4 <_malloc_r+0x44>
    35b6:	bf00      	nop
    35b8:	2000097c 	.word	0x2000097c
    35bc:	20001d3c 	.word	0x20001d3c
    35c0:	20001d40 	.word	0x20001d40
    35c4:	20001d38 	.word	0x20001d38
    35c8:	20001d34 	.word	0x20001d34
    35cc:	20000d88 	.word	0x20000d88
    35d0:	0a5a      	lsrs	r2, r3, #9
    35d2:	2a04      	cmp	r2, #4
    35d4:	d95e      	bls.n	3694 <_malloc_r+0x434>
    35d6:	2a14      	cmp	r2, #20
    35d8:	f200 80b3 	bhi.w	3742 <_malloc_r+0x4e2>
    35dc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    35e0:	0049      	lsls	r1, r1, #1
    35e2:	325b      	adds	r2, #91	; 0x5b
    35e4:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    35e8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    35ec:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 37cc <_malloc_r+0x56c>
    35f0:	f1ac 0c08 	sub.w	ip, ip, #8
    35f4:	458c      	cmp	ip, r1
    35f6:	f000 8088 	beq.w	370a <_malloc_r+0x4aa>
    35fa:	684a      	ldr	r2, [r1, #4]
    35fc:	f022 0203 	bic.w	r2, r2, #3
    3600:	4293      	cmp	r3, r2
    3602:	d202      	bcs.n	360a <_malloc_r+0x3aa>
    3604:	6889      	ldr	r1, [r1, #8]
    3606:	458c      	cmp	ip, r1
    3608:	d1f7      	bne.n	35fa <_malloc_r+0x39a>
    360a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    360e:	687a      	ldr	r2, [r7, #4]
    3610:	f8c4 c00c 	str.w	ip, [r4, #12]
    3614:	60a1      	str	r1, [r4, #8]
    3616:	f8cc 4008 	str.w	r4, [ip, #8]
    361a:	60cc      	str	r4, [r1, #12]
    361c:	e688      	b.n	3330 <_malloc_r+0xd0>
    361e:	1963      	adds	r3, r4, r5
    3620:	f042 0701 	orr.w	r7, r2, #1
    3624:	f045 0501 	orr.w	r5, r5, #1
    3628:	6065      	str	r5, [r4, #4]
    362a:	4630      	mov	r0, r6
    362c:	614b      	str	r3, [r1, #20]
    362e:	610b      	str	r3, [r1, #16]
    3630:	f8c3 e00c 	str.w	lr, [r3, #12]
    3634:	f8c3 e008 	str.w	lr, [r3, #8]
    3638:	605f      	str	r7, [r3, #4]
    363a:	509a      	str	r2, [r3, r2]
    363c:	3408      	adds	r4, #8
    363e:	f000 f917 	bl	3870 <__malloc_unlock>
    3642:	e6d5      	b.n	33f0 <_malloc_r+0x190>
    3644:	684a      	ldr	r2, [r1, #4]
    3646:	e673      	b.n	3330 <_malloc_r+0xd0>
    3648:	f108 0801 	add.w	r8, r8, #1
    364c:	f018 0f03 	tst.w	r8, #3
    3650:	f10c 0c08 	add.w	ip, ip, #8
    3654:	f47f ae7f 	bne.w	3356 <_malloc_r+0xf6>
    3658:	e030      	b.n	36bc <_malloc_r+0x45c>
    365a:	68dc      	ldr	r4, [r3, #12]
    365c:	42a3      	cmp	r3, r4
    365e:	bf08      	it	eq
    3660:	3002      	addeq	r0, #2
    3662:	f43f ae35 	beq.w	32d0 <_malloc_r+0x70>
    3666:	e6b3      	b.n	33d0 <_malloc_r+0x170>
    3668:	440b      	add	r3, r1
    366a:	460c      	mov	r4, r1
    366c:	685a      	ldr	r2, [r3, #4]
    366e:	68c9      	ldr	r1, [r1, #12]
    3670:	f854 5f08 	ldr.w	r5, [r4, #8]!
    3674:	f042 0201 	orr.w	r2, r2, #1
    3678:	605a      	str	r2, [r3, #4]
    367a:	4630      	mov	r0, r6
    367c:	60e9      	str	r1, [r5, #12]
    367e:	608d      	str	r5, [r1, #8]
    3680:	f000 f8f6 	bl	3870 <__malloc_unlock>
    3684:	e6b4      	b.n	33f0 <_malloc_r+0x190>
    3686:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    368a:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    368e:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3692:	e607      	b.n	32a4 <_malloc_r+0x44>
    3694:	099a      	lsrs	r2, r3, #6
    3696:	f102 0139 	add.w	r1, r2, #57	; 0x39
    369a:	0049      	lsls	r1, r1, #1
    369c:	3238      	adds	r2, #56	; 0x38
    369e:	e7a1      	b.n	35e4 <_malloc_r+0x384>
    36a0:	42bc      	cmp	r4, r7
    36a2:	4b4a      	ldr	r3, [pc, #296]	; (37cc <_malloc_r+0x56c>)
    36a4:	f43f af00 	beq.w	34a8 <_malloc_r+0x248>
    36a8:	689c      	ldr	r4, [r3, #8]
    36aa:	6862      	ldr	r2, [r4, #4]
    36ac:	f022 0203 	bic.w	r2, r2, #3
    36b0:	e75a      	b.n	3568 <_malloc_r+0x308>
    36b2:	f859 3908 	ldr.w	r3, [r9], #-8
    36b6:	4599      	cmp	r9, r3
    36b8:	f040 8082 	bne.w	37c0 <_malloc_r+0x560>
    36bc:	f010 0f03 	tst.w	r0, #3
    36c0:	f100 30ff 	add.w	r0, r0, #4294967295
    36c4:	d1f5      	bne.n	36b2 <_malloc_r+0x452>
    36c6:	687b      	ldr	r3, [r7, #4]
    36c8:	ea23 0304 	bic.w	r3, r3, r4
    36cc:	607b      	str	r3, [r7, #4]
    36ce:	0064      	lsls	r4, r4, #1
    36d0:	429c      	cmp	r4, r3
    36d2:	f63f aebd 	bhi.w	3450 <_malloc_r+0x1f0>
    36d6:	2c00      	cmp	r4, #0
    36d8:	f43f aeba 	beq.w	3450 <_malloc_r+0x1f0>
    36dc:	421c      	tst	r4, r3
    36de:	4640      	mov	r0, r8
    36e0:	f47f ae35 	bne.w	334e <_malloc_r+0xee>
    36e4:	0064      	lsls	r4, r4, #1
    36e6:	421c      	tst	r4, r3
    36e8:	f100 0004 	add.w	r0, r0, #4
    36ec:	d0fa      	beq.n	36e4 <_malloc_r+0x484>
    36ee:	e62e      	b.n	334e <_malloc_r+0xee>
    36f0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    36f4:	d818      	bhi.n	3728 <_malloc_r+0x4c8>
    36f6:	0be8      	lsrs	r0, r5, #15
    36f8:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    36fc:	ea4f 034e 	mov.w	r3, lr, lsl #1
    3700:	3077      	adds	r0, #119	; 0x77
    3702:	e5cf      	b.n	32a4 <_malloc_r+0x44>
    3704:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3708:	e6eb      	b.n	34e2 <_malloc_r+0x282>
    370a:	2101      	movs	r1, #1
    370c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3710:	1092      	asrs	r2, r2, #2
    3712:	fa01 f202 	lsl.w	r2, r1, r2
    3716:	431a      	orrs	r2, r3
    3718:	f8c8 2004 	str.w	r2, [r8, #4]
    371c:	4661      	mov	r1, ip
    371e:	e777      	b.n	3610 <_malloc_r+0x3b0>
    3720:	2301      	movs	r3, #1
    3722:	f8cb 3004 	str.w	r3, [fp, #4]
    3726:	e725      	b.n	3574 <_malloc_r+0x314>
    3728:	f240 5254 	movw	r2, #1364	; 0x554
    372c:	4293      	cmp	r3, r2
    372e:	d820      	bhi.n	3772 <_malloc_r+0x512>
    3730:	0ca8      	lsrs	r0, r5, #18
    3732:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    3736:	ea4f 034e 	mov.w	r3, lr, lsl #1
    373a:	307c      	adds	r0, #124	; 0x7c
    373c:	e5b2      	b.n	32a4 <_malloc_r+0x44>
    373e:	3210      	adds	r2, #16
    3740:	e6a4      	b.n	348c <_malloc_r+0x22c>
    3742:	2a54      	cmp	r2, #84	; 0x54
    3744:	d826      	bhi.n	3794 <_malloc_r+0x534>
    3746:	0b1a      	lsrs	r2, r3, #12
    3748:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    374c:	0049      	lsls	r1, r1, #1
    374e:	326e      	adds	r2, #110	; 0x6e
    3750:	e748      	b.n	35e4 <_malloc_r+0x384>
    3752:	68bc      	ldr	r4, [r7, #8]
    3754:	6862      	ldr	r2, [r4, #4]
    3756:	f022 0203 	bic.w	r2, r2, #3
    375a:	e705      	b.n	3568 <_malloc_r+0x308>
    375c:	f3ca 000b 	ubfx	r0, sl, #0, #12
    3760:	2800      	cmp	r0, #0
    3762:	f47f aea8 	bne.w	34b6 <_malloc_r+0x256>
    3766:	4442      	add	r2, r8
    3768:	68bb      	ldr	r3, [r7, #8]
    376a:	f042 0201 	orr.w	r2, r2, #1
    376e:	605a      	str	r2, [r3, #4]
    3770:	e6ec      	b.n	354c <_malloc_r+0x2ec>
    3772:	23fe      	movs	r3, #254	; 0xfe
    3774:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    3778:	207e      	movs	r0, #126	; 0x7e
    377a:	e593      	b.n	32a4 <_malloc_r+0x44>
    377c:	2201      	movs	r2, #1
    377e:	f04f 0900 	mov.w	r9, #0
    3782:	e6c1      	b.n	3508 <_malloc_r+0x2a8>
    3784:	f104 0108 	add.w	r1, r4, #8
    3788:	4630      	mov	r0, r6
    378a:	f000 f925 	bl	39d8 <_free_r>
    378e:	f8d9 1000 	ldr.w	r1, [r9]
    3792:	e6db      	b.n	354c <_malloc_r+0x2ec>
    3794:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    3798:	d805      	bhi.n	37a6 <_malloc_r+0x546>
    379a:	0bda      	lsrs	r2, r3, #15
    379c:	f102 0178 	add.w	r1, r2, #120	; 0x78
    37a0:	0049      	lsls	r1, r1, #1
    37a2:	3277      	adds	r2, #119	; 0x77
    37a4:	e71e      	b.n	35e4 <_malloc_r+0x384>
    37a6:	f240 5154 	movw	r1, #1364	; 0x554
    37aa:	428a      	cmp	r2, r1
    37ac:	d805      	bhi.n	37ba <_malloc_r+0x55a>
    37ae:	0c9a      	lsrs	r2, r3, #18
    37b0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    37b4:	0049      	lsls	r1, r1, #1
    37b6:	327c      	adds	r2, #124	; 0x7c
    37b8:	e714      	b.n	35e4 <_malloc_r+0x384>
    37ba:	21fe      	movs	r1, #254	; 0xfe
    37bc:	227e      	movs	r2, #126	; 0x7e
    37be:	e711      	b.n	35e4 <_malloc_r+0x384>
    37c0:	687b      	ldr	r3, [r7, #4]
    37c2:	e784      	b.n	36ce <_malloc_r+0x46e>
    37c4:	08e8      	lsrs	r0, r5, #3
    37c6:	1c43      	adds	r3, r0, #1
    37c8:	005b      	lsls	r3, r3, #1
    37ca:	e5f8      	b.n	33be <_malloc_r+0x15e>
    37cc:	2000097c 	.word	0x2000097c

000037d0 <memset>:
    37d0:	b470      	push	{r4, r5, r6}
    37d2:	0784      	lsls	r4, r0, #30
    37d4:	d046      	beq.n	3864 <memset+0x94>
    37d6:	1e54      	subs	r4, r2, #1
    37d8:	2a00      	cmp	r2, #0
    37da:	d041      	beq.n	3860 <memset+0x90>
    37dc:	b2cd      	uxtb	r5, r1
    37de:	4603      	mov	r3, r0
    37e0:	e002      	b.n	37e8 <memset+0x18>
    37e2:	1e62      	subs	r2, r4, #1
    37e4:	b3e4      	cbz	r4, 3860 <memset+0x90>
    37e6:	4614      	mov	r4, r2
    37e8:	f803 5b01 	strb.w	r5, [r3], #1
    37ec:	079a      	lsls	r2, r3, #30
    37ee:	d1f8      	bne.n	37e2 <memset+0x12>
    37f0:	2c03      	cmp	r4, #3
    37f2:	d92e      	bls.n	3852 <memset+0x82>
    37f4:	b2cd      	uxtb	r5, r1
    37f6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    37fa:	2c0f      	cmp	r4, #15
    37fc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    3800:	d919      	bls.n	3836 <memset+0x66>
    3802:	f103 0210 	add.w	r2, r3, #16
    3806:	4626      	mov	r6, r4
    3808:	3e10      	subs	r6, #16
    380a:	2e0f      	cmp	r6, #15
    380c:	f842 5c10 	str.w	r5, [r2, #-16]
    3810:	f842 5c0c 	str.w	r5, [r2, #-12]
    3814:	f842 5c08 	str.w	r5, [r2, #-8]
    3818:	f842 5c04 	str.w	r5, [r2, #-4]
    381c:	f102 0210 	add.w	r2, r2, #16
    3820:	d8f2      	bhi.n	3808 <memset+0x38>
    3822:	f1a4 0210 	sub.w	r2, r4, #16
    3826:	f022 020f 	bic.w	r2, r2, #15
    382a:	f004 040f 	and.w	r4, r4, #15
    382e:	3210      	adds	r2, #16
    3830:	2c03      	cmp	r4, #3
    3832:	4413      	add	r3, r2
    3834:	d90d      	bls.n	3852 <memset+0x82>
    3836:	461e      	mov	r6, r3
    3838:	4622      	mov	r2, r4
    383a:	3a04      	subs	r2, #4
    383c:	2a03      	cmp	r2, #3
    383e:	f846 5b04 	str.w	r5, [r6], #4
    3842:	d8fa      	bhi.n	383a <memset+0x6a>
    3844:	1f22      	subs	r2, r4, #4
    3846:	f022 0203 	bic.w	r2, r2, #3
    384a:	3204      	adds	r2, #4
    384c:	4413      	add	r3, r2
    384e:	f004 0403 	and.w	r4, r4, #3
    3852:	b12c      	cbz	r4, 3860 <memset+0x90>
    3854:	b2c9      	uxtb	r1, r1
    3856:	441c      	add	r4, r3
    3858:	f803 1b01 	strb.w	r1, [r3], #1
    385c:	42a3      	cmp	r3, r4
    385e:	d1fb      	bne.n	3858 <memset+0x88>
    3860:	bc70      	pop	{r4, r5, r6}
    3862:	4770      	bx	lr
    3864:	4614      	mov	r4, r2
    3866:	4603      	mov	r3, r0
    3868:	e7c2      	b.n	37f0 <memset+0x20>
    386a:	bf00      	nop

0000386c <__malloc_lock>:
    386c:	4770      	bx	lr
    386e:	bf00      	nop

00003870 <__malloc_unlock>:
    3870:	4770      	bx	lr
    3872:	bf00      	nop

00003874 <_sbrk_r>:
    3874:	b538      	push	{r3, r4, r5, lr}
    3876:	4c07      	ldr	r4, [pc, #28]	; (3894 <_sbrk_r+0x20>)
    3878:	2300      	movs	r3, #0
    387a:	4605      	mov	r5, r0
    387c:	4608      	mov	r0, r1
    387e:	6023      	str	r3, [r4, #0]
    3880:	f7fd facc 	bl	e1c <_sbrk>
    3884:	1c43      	adds	r3, r0, #1
    3886:	d000      	beq.n	388a <_sbrk_r+0x16>
    3888:	bd38      	pop	{r3, r4, r5, pc}
    388a:	6823      	ldr	r3, [r4, #0]
    388c:	2b00      	cmp	r3, #0
    388e:	d0fb      	beq.n	3888 <_sbrk_r+0x14>
    3890:	602b      	str	r3, [r5, #0]
    3892:	bd38      	pop	{r3, r4, r5, pc}
    3894:	2000428c 	.word	0x2000428c

00003898 <__register_exitproc>:
    3898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    389c:	4c25      	ldr	r4, [pc, #148]	; (3934 <__register_exitproc+0x9c>)
    389e:	6825      	ldr	r5, [r4, #0]
    38a0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    38a4:	4606      	mov	r6, r0
    38a6:	4688      	mov	r8, r1
    38a8:	4692      	mov	sl, r2
    38aa:	4699      	mov	r9, r3
    38ac:	b3c4      	cbz	r4, 3920 <__register_exitproc+0x88>
    38ae:	6860      	ldr	r0, [r4, #4]
    38b0:	281f      	cmp	r0, #31
    38b2:	dc17      	bgt.n	38e4 <__register_exitproc+0x4c>
    38b4:	1c43      	adds	r3, r0, #1
    38b6:	b176      	cbz	r6, 38d6 <__register_exitproc+0x3e>
    38b8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    38bc:	2201      	movs	r2, #1
    38be:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    38c2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    38c6:	4082      	lsls	r2, r0
    38c8:	4311      	orrs	r1, r2
    38ca:	2e02      	cmp	r6, #2
    38cc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    38d0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    38d4:	d01e      	beq.n	3914 <__register_exitproc+0x7c>
    38d6:	3002      	adds	r0, #2
    38d8:	6063      	str	r3, [r4, #4]
    38da:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    38de:	2000      	movs	r0, #0
    38e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    38e4:	4b14      	ldr	r3, [pc, #80]	; (3938 <__register_exitproc+0xa0>)
    38e6:	b303      	cbz	r3, 392a <__register_exitproc+0x92>
    38e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    38ec:	f7ff fcb0 	bl	3250 <malloc>
    38f0:	4604      	mov	r4, r0
    38f2:	b1d0      	cbz	r0, 392a <__register_exitproc+0x92>
    38f4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    38f8:	2700      	movs	r7, #0
    38fa:	e880 0088 	stmia.w	r0, {r3, r7}
    38fe:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3902:	4638      	mov	r0, r7
    3904:	2301      	movs	r3, #1
    3906:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    390a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    390e:	2e00      	cmp	r6, #0
    3910:	d0e1      	beq.n	38d6 <__register_exitproc+0x3e>
    3912:	e7d1      	b.n	38b8 <__register_exitproc+0x20>
    3914:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    3918:	430a      	orrs	r2, r1
    391a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    391e:	e7da      	b.n	38d6 <__register_exitproc+0x3e>
    3920:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    3924:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    3928:	e7c1      	b.n	38ae <__register_exitproc+0x16>
    392a:	f04f 30ff 	mov.w	r0, #4294967295
    392e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3932:	bf00      	nop
    3934:	20000424 	.word	0x20000424
    3938:	00003251 	.word	0x00003251

0000393c <_malloc_trim_r>:
    393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    393e:	4f23      	ldr	r7, [pc, #140]	; (39cc <_malloc_trim_r+0x90>)
    3940:	460c      	mov	r4, r1
    3942:	4606      	mov	r6, r0
    3944:	f7ff ff92 	bl	386c <__malloc_lock>
    3948:	68bb      	ldr	r3, [r7, #8]
    394a:	685d      	ldr	r5, [r3, #4]
    394c:	f025 0503 	bic.w	r5, r5, #3
    3950:	1b29      	subs	r1, r5, r4
    3952:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    3956:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    395a:	f021 010f 	bic.w	r1, r1, #15
    395e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    3962:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    3966:	db07      	blt.n	3978 <_malloc_trim_r+0x3c>
    3968:	2100      	movs	r1, #0
    396a:	4630      	mov	r0, r6
    396c:	f7ff ff82 	bl	3874 <_sbrk_r>
    3970:	68bb      	ldr	r3, [r7, #8]
    3972:	442b      	add	r3, r5
    3974:	4298      	cmp	r0, r3
    3976:	d004      	beq.n	3982 <_malloc_trim_r+0x46>
    3978:	4630      	mov	r0, r6
    397a:	f7ff ff79 	bl	3870 <__malloc_unlock>
    397e:	2000      	movs	r0, #0
    3980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3982:	4261      	negs	r1, r4
    3984:	4630      	mov	r0, r6
    3986:	f7ff ff75 	bl	3874 <_sbrk_r>
    398a:	3001      	adds	r0, #1
    398c:	d00d      	beq.n	39aa <_malloc_trim_r+0x6e>
    398e:	4b10      	ldr	r3, [pc, #64]	; (39d0 <_malloc_trim_r+0x94>)
    3990:	68ba      	ldr	r2, [r7, #8]
    3992:	6819      	ldr	r1, [r3, #0]
    3994:	1b2d      	subs	r5, r5, r4
    3996:	f045 0501 	orr.w	r5, r5, #1
    399a:	4630      	mov	r0, r6
    399c:	1b09      	subs	r1, r1, r4
    399e:	6055      	str	r5, [r2, #4]
    39a0:	6019      	str	r1, [r3, #0]
    39a2:	f7ff ff65 	bl	3870 <__malloc_unlock>
    39a6:	2001      	movs	r0, #1
    39a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39aa:	2100      	movs	r1, #0
    39ac:	4630      	mov	r0, r6
    39ae:	f7ff ff61 	bl	3874 <_sbrk_r>
    39b2:	68ba      	ldr	r2, [r7, #8]
    39b4:	1a83      	subs	r3, r0, r2
    39b6:	2b0f      	cmp	r3, #15
    39b8:	ddde      	ble.n	3978 <_malloc_trim_r+0x3c>
    39ba:	4c06      	ldr	r4, [pc, #24]	; (39d4 <_malloc_trim_r+0x98>)
    39bc:	4904      	ldr	r1, [pc, #16]	; (39d0 <_malloc_trim_r+0x94>)
    39be:	6824      	ldr	r4, [r4, #0]
    39c0:	f043 0301 	orr.w	r3, r3, #1
    39c4:	1b00      	subs	r0, r0, r4
    39c6:	6053      	str	r3, [r2, #4]
    39c8:	6008      	str	r0, [r1, #0]
    39ca:	e7d5      	b.n	3978 <_malloc_trim_r+0x3c>
    39cc:	2000097c 	.word	0x2000097c
    39d0:	20001d40 	.word	0x20001d40
    39d4:	20000d88 	.word	0x20000d88

000039d8 <_free_r>:
    39d8:	2900      	cmp	r1, #0
    39da:	d045      	beq.n	3a68 <_free_r+0x90>
    39dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39e0:	460d      	mov	r5, r1
    39e2:	4680      	mov	r8, r0
    39e4:	f7ff ff42 	bl	386c <__malloc_lock>
    39e8:	f855 7c04 	ldr.w	r7, [r5, #-4]
    39ec:	496a      	ldr	r1, [pc, #424]	; (3b98 <_free_r+0x1c0>)
    39ee:	f027 0301 	bic.w	r3, r7, #1
    39f2:	f1a5 0408 	sub.w	r4, r5, #8
    39f6:	18e2      	adds	r2, r4, r3
    39f8:	688e      	ldr	r6, [r1, #8]
    39fa:	6850      	ldr	r0, [r2, #4]
    39fc:	42b2      	cmp	r2, r6
    39fe:	f020 0003 	bic.w	r0, r0, #3
    3a02:	d062      	beq.n	3aca <_free_r+0xf2>
    3a04:	07fe      	lsls	r6, r7, #31
    3a06:	6050      	str	r0, [r2, #4]
    3a08:	d40b      	bmi.n	3a22 <_free_r+0x4a>
    3a0a:	f855 7c08 	ldr.w	r7, [r5, #-8]
    3a0e:	1be4      	subs	r4, r4, r7
    3a10:	f101 0e08 	add.w	lr, r1, #8
    3a14:	68a5      	ldr	r5, [r4, #8]
    3a16:	4575      	cmp	r5, lr
    3a18:	443b      	add	r3, r7
    3a1a:	d06f      	beq.n	3afc <_free_r+0x124>
    3a1c:	68e7      	ldr	r7, [r4, #12]
    3a1e:	60ef      	str	r7, [r5, #12]
    3a20:	60bd      	str	r5, [r7, #8]
    3a22:	1815      	adds	r5, r2, r0
    3a24:	686d      	ldr	r5, [r5, #4]
    3a26:	07ed      	lsls	r5, r5, #31
    3a28:	d542      	bpl.n	3ab0 <_free_r+0xd8>
    3a2a:	f043 0201 	orr.w	r2, r3, #1
    3a2e:	6062      	str	r2, [r4, #4]
    3a30:	50e3      	str	r3, [r4, r3]
    3a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3a36:	d218      	bcs.n	3a6a <_free_r+0x92>
    3a38:	08db      	lsrs	r3, r3, #3
    3a3a:	1c5a      	adds	r2, r3, #1
    3a3c:	684d      	ldr	r5, [r1, #4]
    3a3e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    3a42:	60a7      	str	r7, [r4, #8]
    3a44:	2001      	movs	r0, #1
    3a46:	109b      	asrs	r3, r3, #2
    3a48:	fa00 f303 	lsl.w	r3, r0, r3
    3a4c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    3a50:	431d      	orrs	r5, r3
    3a52:	3808      	subs	r0, #8
    3a54:	60e0      	str	r0, [r4, #12]
    3a56:	604d      	str	r5, [r1, #4]
    3a58:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    3a5c:	60fc      	str	r4, [r7, #12]
    3a5e:	4640      	mov	r0, r8
    3a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3a64:	f7ff bf04 	b.w	3870 <__malloc_unlock>
    3a68:	4770      	bx	lr
    3a6a:	0a5a      	lsrs	r2, r3, #9
    3a6c:	2a04      	cmp	r2, #4
    3a6e:	d853      	bhi.n	3b18 <_free_r+0x140>
    3a70:	099a      	lsrs	r2, r3, #6
    3a72:	f102 0739 	add.w	r7, r2, #57	; 0x39
    3a76:	007f      	lsls	r7, r7, #1
    3a78:	f102 0538 	add.w	r5, r2, #56	; 0x38
    3a7c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    3a80:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    3a84:	4944      	ldr	r1, [pc, #272]	; (3b98 <_free_r+0x1c0>)
    3a86:	3808      	subs	r0, #8
    3a88:	4290      	cmp	r0, r2
    3a8a:	d04d      	beq.n	3b28 <_free_r+0x150>
    3a8c:	6851      	ldr	r1, [r2, #4]
    3a8e:	f021 0103 	bic.w	r1, r1, #3
    3a92:	428b      	cmp	r3, r1
    3a94:	d202      	bcs.n	3a9c <_free_r+0xc4>
    3a96:	6892      	ldr	r2, [r2, #8]
    3a98:	4290      	cmp	r0, r2
    3a9a:	d1f7      	bne.n	3a8c <_free_r+0xb4>
    3a9c:	68d0      	ldr	r0, [r2, #12]
    3a9e:	60e0      	str	r0, [r4, #12]
    3aa0:	60a2      	str	r2, [r4, #8]
    3aa2:	6084      	str	r4, [r0, #8]
    3aa4:	60d4      	str	r4, [r2, #12]
    3aa6:	4640      	mov	r0, r8
    3aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3aac:	f7ff bee0 	b.w	3870 <__malloc_unlock>
    3ab0:	6895      	ldr	r5, [r2, #8]
    3ab2:	4f3a      	ldr	r7, [pc, #232]	; (3b9c <_free_r+0x1c4>)
    3ab4:	42bd      	cmp	r5, r7
    3ab6:	4403      	add	r3, r0
    3ab8:	d03f      	beq.n	3b3a <_free_r+0x162>
    3aba:	68d0      	ldr	r0, [r2, #12]
    3abc:	60e8      	str	r0, [r5, #12]
    3abe:	f043 0201 	orr.w	r2, r3, #1
    3ac2:	6085      	str	r5, [r0, #8]
    3ac4:	6062      	str	r2, [r4, #4]
    3ac6:	50e3      	str	r3, [r4, r3]
    3ac8:	e7b3      	b.n	3a32 <_free_r+0x5a>
    3aca:	07ff      	lsls	r7, r7, #31
    3acc:	4403      	add	r3, r0
    3ace:	d407      	bmi.n	3ae0 <_free_r+0x108>
    3ad0:	f855 2c08 	ldr.w	r2, [r5, #-8]
    3ad4:	1aa4      	subs	r4, r4, r2
    3ad6:	4413      	add	r3, r2
    3ad8:	68a0      	ldr	r0, [r4, #8]
    3ada:	68e2      	ldr	r2, [r4, #12]
    3adc:	60c2      	str	r2, [r0, #12]
    3ade:	6090      	str	r0, [r2, #8]
    3ae0:	4a2f      	ldr	r2, [pc, #188]	; (3ba0 <_free_r+0x1c8>)
    3ae2:	6812      	ldr	r2, [r2, #0]
    3ae4:	f043 0001 	orr.w	r0, r3, #1
    3ae8:	4293      	cmp	r3, r2
    3aea:	6060      	str	r0, [r4, #4]
    3aec:	608c      	str	r4, [r1, #8]
    3aee:	d3b6      	bcc.n	3a5e <_free_r+0x86>
    3af0:	4b2c      	ldr	r3, [pc, #176]	; (3ba4 <_free_r+0x1cc>)
    3af2:	4640      	mov	r0, r8
    3af4:	6819      	ldr	r1, [r3, #0]
    3af6:	f7ff ff21 	bl	393c <_malloc_trim_r>
    3afa:	e7b0      	b.n	3a5e <_free_r+0x86>
    3afc:	1811      	adds	r1, r2, r0
    3afe:	6849      	ldr	r1, [r1, #4]
    3b00:	07c9      	lsls	r1, r1, #31
    3b02:	d444      	bmi.n	3b8e <_free_r+0x1b6>
    3b04:	6891      	ldr	r1, [r2, #8]
    3b06:	68d2      	ldr	r2, [r2, #12]
    3b08:	60ca      	str	r2, [r1, #12]
    3b0a:	4403      	add	r3, r0
    3b0c:	f043 0001 	orr.w	r0, r3, #1
    3b10:	6091      	str	r1, [r2, #8]
    3b12:	6060      	str	r0, [r4, #4]
    3b14:	50e3      	str	r3, [r4, r3]
    3b16:	e7a2      	b.n	3a5e <_free_r+0x86>
    3b18:	2a14      	cmp	r2, #20
    3b1a:	d817      	bhi.n	3b4c <_free_r+0x174>
    3b1c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    3b20:	007f      	lsls	r7, r7, #1
    3b22:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    3b26:	e7a9      	b.n	3a7c <_free_r+0xa4>
    3b28:	10aa      	asrs	r2, r5, #2
    3b2a:	684b      	ldr	r3, [r1, #4]
    3b2c:	2501      	movs	r5, #1
    3b2e:	fa05 f202 	lsl.w	r2, r5, r2
    3b32:	4313      	orrs	r3, r2
    3b34:	604b      	str	r3, [r1, #4]
    3b36:	4602      	mov	r2, r0
    3b38:	e7b1      	b.n	3a9e <_free_r+0xc6>
    3b3a:	f043 0201 	orr.w	r2, r3, #1
    3b3e:	614c      	str	r4, [r1, #20]
    3b40:	610c      	str	r4, [r1, #16]
    3b42:	60e5      	str	r5, [r4, #12]
    3b44:	60a5      	str	r5, [r4, #8]
    3b46:	6062      	str	r2, [r4, #4]
    3b48:	50e3      	str	r3, [r4, r3]
    3b4a:	e788      	b.n	3a5e <_free_r+0x86>
    3b4c:	2a54      	cmp	r2, #84	; 0x54
    3b4e:	d806      	bhi.n	3b5e <_free_r+0x186>
    3b50:	0b1a      	lsrs	r2, r3, #12
    3b52:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    3b56:	007f      	lsls	r7, r7, #1
    3b58:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    3b5c:	e78e      	b.n	3a7c <_free_r+0xa4>
    3b5e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    3b62:	d806      	bhi.n	3b72 <_free_r+0x19a>
    3b64:	0bda      	lsrs	r2, r3, #15
    3b66:	f102 0778 	add.w	r7, r2, #120	; 0x78
    3b6a:	007f      	lsls	r7, r7, #1
    3b6c:	f102 0577 	add.w	r5, r2, #119	; 0x77
    3b70:	e784      	b.n	3a7c <_free_r+0xa4>
    3b72:	f240 5054 	movw	r0, #1364	; 0x554
    3b76:	4282      	cmp	r2, r0
    3b78:	d806      	bhi.n	3b88 <_free_r+0x1b0>
    3b7a:	0c9a      	lsrs	r2, r3, #18
    3b7c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    3b80:	007f      	lsls	r7, r7, #1
    3b82:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    3b86:	e779      	b.n	3a7c <_free_r+0xa4>
    3b88:	27fe      	movs	r7, #254	; 0xfe
    3b8a:	257e      	movs	r5, #126	; 0x7e
    3b8c:	e776      	b.n	3a7c <_free_r+0xa4>
    3b8e:	f043 0201 	orr.w	r2, r3, #1
    3b92:	6062      	str	r2, [r4, #4]
    3b94:	50e3      	str	r3, [r4, r3]
    3b96:	e762      	b.n	3a5e <_free_r+0x86>
    3b98:	2000097c 	.word	0x2000097c
    3b9c:	20000984 	.word	0x20000984
    3ba0:	20000d84 	.word	0x20000d84
    3ba4:	20001d3c 	.word	0x20001d3c

00003ba8 <___init_veneer>:
    3ba8:	f85f f000 	ldr.w	pc, [pc]	; 3bac <___init_veneer+0x4>
    3bac:	600016a5 	.word	0x600016a5

Disassembly of section .fini:

00003bb0 <_fini>:
    3bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bb2:	bf00      	nop
